<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>灰灰爱吃小云朵</title><link>https://200928.github.io/</link><description>This is my cool site</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 09 Jan 2024 09:04:08 +0800</lastBuildDate><atom:link href="https://200928.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim基本操作</title><link>https://200928.github.io/posts/vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link><pubDate>Tue, 09 Jan 2024 09:04:08 +0800</pubDate><author>ming</author><guid>https://200928.github.io/posts/vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid><description><![CDATA[简介 Quick setup — if you’ve done this kind of thing before or https://github.com/200928/hugo-xiaozao.git Get started by creating a new file or uploading an existing file. We recommend every repository include a README, LICENSE, and .gitignore.
…or create a new repository on the command line
echo &#34;# hugo-xiaozao&#34; &gt;&gt; README.md git init git add README.md git commit -m &#34;first commit&#34; git branch -M main git remote add origin https://github.com/200928/hugo-xiaozao.git git push -u origin main …or push an existing repository from the command line]]></description></item><item><title>Spring日志设置</title><link>https://200928.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E6%97%A5%E5%BF%97/</link><pubDate>Sat, 09 Dec 2023 09:04:08 +0800</pubDate><author>ming</author><guid>https://200928.github.io/posts/springboot%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E6%97%A5%E5%BF%97/</guid><description><![CDATA[引入依赖 &lt;!--日志输出--&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-core&lt;/artifactId&gt; &lt;version&gt;1.2.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.30&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt; &lt;artifactId&gt;logback-classic&lt;/artifactId&gt; &lt;version&gt;1.2.6&lt;/version&gt; &lt;/dependency&gt; application.yml 修改mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.slf4j.Slf4jImpl可输出到日志文件中
# MyBatis-Plus 配置 mybatis-plus: configuration: # 启用或禁用缓存 cache-enabled: true # 启用或禁用生成的键 use-generated-keys: true # 设置默认的执行器类型。选项有 SIMPLE, REUSE, 和 BATCH default-executor-type: REUSE # 启用或禁用实际参数名的使用 use-actual-param-name: true # 指定 MyBatis-Plus 的日志实现。默认是 org.apache.ibatis.logging.stdout.StdOutImpl # 它只能打印日志到控制台，不能输出到日志文件 #log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 当前的日志实现是 org.apache.ibatis.logging.slf4j.Slf4jImpl，它支持输出到日志文件 log-impl: org.apache.ibatis.logging.slf4j.Slf4jImpl logback-spring.xml &lt;?xml version=&#34;1.0&#34; encoding=&#34;UTF-8&#34;?&gt; &lt;configuration scan=&#34;true&#34; scanPeriod=&#34;10 seconds&#34;&gt; &lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt; &lt;!]]></description></item><item><title>Windows 项目部署</title><link>https://200928.github.io/posts/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</link><pubDate>Wed, 29 Nov 2023 09:04:08 +0800</pubDate><author>ming</author><guid>https://200928.github.io/posts/windows%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</guid><description>start javaw -jar xxxxx netstat -ano | findstr 8848 查看端口占用 pid taskkill /pid xxxx/f 杀死进程</description></item><item><title>Git 协作</title><link>https://200928.github.io/posts/git%E5%8D%8F%E4%BD%9C/</link><pubDate>Thu, 09 Nov 2023 09:04:08 +0800</pubDate><author>ming</author><guid>https://200928.github.io/posts/git%E5%8D%8F%E4%BD%9C/</guid><description><![CDATA[1
添加并提交 X-plore handshaker
git branch -m 旧分支名 新分支名 git reset HEAD^ git commit -am &#34;&lt;提交内容&gt;&#34; git log --oneline git config --global user.name &#34;&lt;用户名&gt;&#34; git config --global user.email &#34;&lt;邮箱&gt;&#34; git commit --amend --reset-author git pull # 同步本地远端信息 git checkout -b &lt;新分支名&gt; &lt;远程主机名&gt;/&lt;远程分支名&gt; # 基于远程分支代码代码开一个本地分支 git push origin &lt;新分支名&gt; # 将代码推送到远程分支，即在远程开一个同名分支 git branch --set-upstream-to=&lt;远程主机名&gt;/&lt;远程分支名&gt; &lt;本地分支名&gt; # 设置本地分支追踪远程分支 git push 提交代码 Git 提交前缀规范 commit 的类型：
feat: 新功能、新特性 fix: 修改 bug perf: 更改代码，以提高性能（在不影响代码内部行为的前提下，对程序性能进行优化） refactor: 代码重构（重构，在不影响代码内部行为、功能下的代码修改） docs: 文档修改 style: 代码格式修改, 注意不是 css 修改（例如分号修改） test: 测试用例新增、修改 build: 影响项目构建或依赖项修改 revert: 恢复上一次提交 ci: 持续集成相关文件修改 chore: 其他修改（不在上述类型中的修改） release: 发布新版本 workflow: 工作流相关文件修改 提交 minghui@Arch:~/workspace/sg-code/gitlab/car-management-backend^dev-fmh ♥ % git push 23-11-03 - 9:52:33 致命错误：当前分支 dev-fmh 没有对应的上游分支。 为推送当前分支并建立与远程上游的跟踪，使用 git push --set-upstream origin dev-fmh 为了让没有追踪上游的分支自动配置，参见 &#39;git help config&#39; 中的 push.]]></description></item><item><title>JavaScript 异步</title><link>https://200928.github.io/posts/javascript%E5%BC%82%E6%AD%A5/</link><pubDate>Mon, 09 Oct 2023 09:04:08 +0800</pubDate><author>ming</author><guid>https://200928.github.io/posts/javascript%E5%BC%82%E6%AD%A5/</guid><description><![CDATA[同步模式与异步模式 同步模式 JavaScript 语言的执行是单线程的，从执行代码来看，是单独一条一条语句从上至下执行，但是这样就会存在阻塞，比如某个操作比较费时（文件读写、网络IO等）下面的代码就不得不等待这个耗时操作执行完成后在执行，显然这种方式非常影响整个程序的使用。
为什么 JavaScript 不设计成多线程执行语言，举个例子，在 Web 应用中，A 函数删除了一个 DOM 节点，B 函数修改了同一个 DOM 节点，那么之后我是使用 A 函数的执行结果还是 B 函数的执行结果？这样会出现很多的问题
异步模式 异步模式大概是指运行环境提供的 API 是以同步或者异步模式进行工作的，同步模式指 JavaScript 代码会以同步模式执行，但是其某些 API 会调用其他线程完成某些工作。换句话说，JavaScript 是单线程工作的，但其浏览器并不是单线程工作的，执行 JavaScript 的线程是单线程的。
回调函数 所有异步编程方案的根基，由调用者定义，交给执行者执行的函数
Promise 一种更优雅的异步编程统一方案
基本用法 // Promise 基本用法 const promise = new Promise((resolve, reject) =&gt; { // 承诺达成后需要执行的函数 resolve(100) // 承诺失败后需要执行的函数 reject(new Error(&#39;Promise rejected&#39;)) }) promise.then(value =&gt; { console.log(&#39;resolve&#39;, value) },error =&gt; { console.log(&#39;rejected&#39;, error) }) Ajax 例子 // Promise 方式的 AJAX const ajax = url =&gt; { return new Promise((resolve, reject) =&gt; { var xhr = new XMLHttpRequest() xhr.]]></description></item><item><title>SMB文件共享</title><link>https://200928.github.io/posts/smb/</link><pubDate>Sat, 21 May 2022 10:28:58 +0000</pubDate><author>ming</author><guid>https://200928.github.io/posts/smb/</guid><description>安装 安装 samba
sudo pacman -S samba
创建配置文件sudo nvim /etc/samba/smb.conf
实例内容 这里 获取
用户配置 添加用户 Samba 需要 Linux 账户才能使用 - 可以使用已有账户或 创建新用户.
虽然用户名可以和 Linux 系统共享，Samba 使用单独的密码管理，将下面的 samba_user 替换为选择的 Samba 用户
注意：添加的用户必须是系统用户
$ sudo smbpasswd -a minghui New SMB password: Retype new SMB password: Added user minghui. $ sudo pdbedit -L minghui:1000: 创建sambashare用户组 sambashare 名字不要改
$ sudo groupadd sambashare 然后将samba用户添加到sambashare组
$ sudo usermod -aG sambashare minghui 共享文件夹 将要分享的文件夹用户组改为sambashare
$ sudo chown root:sambashare /mnt/move_disk/ 以下的操作将会让 sambashare 群组中的用户拥有读取，写入和执行此文件夹中内容的权限：</description></item></channel></rss>