<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Battle of Tanks</title>
      <link href="2021/03/27/Battle-of-Tanks/"/>
      <url>2021/03/27/Battle-of-Tanks/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Java绘图坐标体系"><a href="#Java绘图坐标体系" class="headerlink" title="Java绘图坐标体系"></a>Java绘图坐标体系</h1><p>坐标原点位于左上角，以像素为单位</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210327164401200.png" alt="image-20210327164401200"></p><blockquote><p>像素：密度单位</p><p>比如屏幕分辨率是 1920x1080 表示每一行有 1920 个像素点，共有 1080 行</p><p>所以该屏幕一共有 1920x1080=2,073,600 个像素</p></blockquote><h1 id="线程-基础"><a href="#线程-基础" class="headerlink" title="线程-基础"></a>线程-基础</h1><ul><li>程序 Program：为了完成特定任务，用某种语言编写的一组指令的集合，也就是代码</li><li>进程：指运行中的程序、进程是一次执行过程，或是正在运行的一个程序、是动态过程，有产生 存在 消亡的过程</li><li>线程<ul><li>由进程创建，是进程的一个实体</li><li>一个进程可以拥有多个线程</li></ul></li></ul><h2 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h2><h3 id="继承-Thread-实现多继承"><a href="#继承-Thread-实现多继承" class="headerlink" title="继承 Thread 实现多继承"></a>继承 Thread 实现多继承</h3><blockquote><p>创建一个 Cat 类 每隔 1 秒输出 喵喵</p><p>然后分别查看主线程和 Cat 创建的进程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 9:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 演示通过继承 Thread 类创建线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建cat对象，可以当成线程使用</span></span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.start();    <span class="comment">// 启动线程 -&gt; 最终会执行 Cat run 方法</span></span><br><span class="line">        <span class="comment">// 说明：当 main 线程启动一个子线程 Thread-0 主线程不会阻塞，会继续执行</span></span><br><span class="line">        <span class="comment">// 主线程和子线程交替执行</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i = &quot;</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个类继承了 Thread 类，该类就可以当做线程使用</span></span><br><span class="line"><span class="comment"> * 重写 run 方法，写上自己的业务代码</span></span><br><span class="line"><span class="comment"> * run 方法来自 Thread 类实现了Runnable 接口的 run 方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        if (target != null) &#123;</span></span><br><span class="line"><span class="comment">            target.run();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵喵&quot;</span> + (++times) + <span class="string">&quot;，线程名称：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">// 让该进程休眠 1 秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (times == <span class="number">80</span>) &#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析：</p><p>main 线程会创建一个 Cat 线程</p><p>main 函数的线程名为：main</p><p>Cat 线程名称为：Thread-0</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328110217209.png" alt="image-20210328110217209" style="zoom:80%;" /><p>因为 main 线程执行次数为 60，Thread-0 线程执行次数为80</p><p>所以 main 线程先消亡，Thread-0 线程后消亡</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328105253183.png" alt="image-20210328105253183" style="zoom:80%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328105355718.png" alt="image-20210328105355718"></p><blockquote><p>这里为何不直接调用 cat.run()，并没有创建新线程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328112149331.png" alt="image-20210328112149331"></p><p>如果调用了 cat.run() 那么下面的代码就要等这个方法执行完成后方可执行（看下图），串行执行了</p><p>而且 cat 的线程名称就是 mian 并没有开辟新线程</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328111141975.png" alt="image-20210328111141975"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328111704538.png" alt="image-20210328111704538"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328111941971.png" alt="image-20210328111941971"></p><blockquote><p>下面看 start(); 执行源码分析主要执行，无用的省略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start0();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// start0() 是本地方法，由JVM调用，底层是 C/C++实现</span></span><br><span class="line"><span class="comment">// 真正实现多线程的是 start0() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328112822197.png" alt="image-20210328112822197"></p><h3 id="通过实现-Runnable-接口实现多线程"><a href="#通过实现-Runnable-接口实现多线程" class="headerlink" title="通过实现 Runnable 接口实现多线程"></a>通过实现 Runnable 接口实现多线程</h3><blockquote><p>说明：由于Java 是单继承的，如果一个类继承了其他类就不能继承 Thread 类了，所以想要实现多线程就可以通过实现 Runnable 接口来实现多线程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328113720890.png" alt="image-20210328113720890"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 11:40</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 通过实现 Runnable 接口实现多线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">       <span class="comment">// 创建一个 Thread 对象，把 dog对象(实现Runnable)，放入 Thread</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(dog);</span><br><span class="line">        thread.start();</span><br><span class="line">        </span><br><span class="line">        ThreadProxy threadProxy = <span class="keyword">new</span> ThreadProxy(dog);</span><br><span class="line">        threadProxy.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;汪汪叫：&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程代理类，模拟了一个极简的 Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadProxy</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Runnable target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadProxy</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start0();   <span class="comment">// 真正实现多线程的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码的 ThreadProxy 只是模拟Thread</p></blockquote><ol><li><p>构造器接受一个实现了 Runnable 类的对象实例 </p></li><li><p>用户创建线程需要调用 start() 方法</p></li><li><p>start() 方法再调用 start0() 方法</p></li><li><p>start0() 方法再调用 run() （这个run方法是传经来的对象）</p><p>比如上面代码就是 Dog 的实例 dog</p></li></ol><h3 id="实现两个线程并发"><a href="#实现两个线程并发" class="headerlink" title="实现两个线程并发"></a>实现两个线程并发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:28</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * main 函数启动两个子线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        T2 t2 = <span class="keyword">new</span> T2();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1:Hello,World &quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (count != <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2:Hello,World &quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (count != <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">T1:Hello,World 1Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 1Thread-<span class="number">1</span></span><br><span class="line">T1:Hello,World 2Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 2Thread-<span class="number">1</span></span><br><span class="line">T1:Hello,World 3Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 3Thread-<span class="number">1</span></span><br><span class="line">................</span><br><span class="line">T1:Hello,World 79Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 79Thread-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="继承-Thread-和-实现-Runnable-的区别"><a href="#继承-Thread-和-实现-Runnable-的区别" class="headerlink" title="继承 Thread 和 实现 Runnable 的区别"></a>继承 Thread 和 实现 Runnable 的区别</h3><ol><li><p>从java的设计看，这两者本身没有本质的区别，Thread本身就实现了 Runnable 接口</p><p>start() -&gt; start0()</p></li><li><p>实现 Runnable 接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T3 t3 = <span class="keyword">new</span> T3();</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(t3);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(t3);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br></pre></td></tr></table></figure><h3 id="卖票"><a href="#卖票" class="headerlink" title="卖票"></a>卖票</h3><blockquote><p>下面是分别通过 继承和实现接口 两种方法，但都会出现超卖</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 使用多线程模拟三个窗口同事售票 100 张</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过继承实现</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket01 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket02 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket03 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        sellTicket01.start();</span></span><br><span class="line"><span class="comment">//        sellTicket02.start();</span></span><br><span class="line"><span class="comment">//        sellTicket03.start();</span></span><br><span class="line">        <span class="comment">// 通过接口实现</span></span><br><span class="line">        SellTicket02 sellTicket = <span class="keyword">new</span> SellTicket02();</span><br><span class="line">        Thread thread01 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        Thread thread02 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        Thread thread03 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line">        thread03.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过继承方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 接口方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h2><blockquote><p>设置 loop 值实现——通知方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.ThreadExit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 14:04</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.ThreadExit</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadExit01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程休眠 10s&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        t.setLoop(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T运行中......&quot;</span> + (++num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(<span class="keyword">boolean</span> loop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">主线程休眠 10s</span><br><span class="line">T运行中.....<span class="number">.1</span></span><br><span class="line">T运行中.....<span class="number">.2</span></span><br><span class="line">T运行中.....<span class="number">.3</span></span><br><span class="line">T运行中.....<span class="number">.4</span></span><br><span class="line">T运行中.....<span class="number">.5</span></span><br><span class="line">T运行中.....<span class="number">.6</span></span><br><span class="line">T运行中.....<span class="number">.7</span></span><br><span class="line">T运行中.....<span class="number">.8</span></span><br><span class="line">T运行中.....<span class="number">.9</span></span><br><span class="line">T运行中.....<span class="number">.10</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h2><ol><li><p>setName    // 设置线程名称</p></li><li><p>getName   // 返回线程名称</p></li><li><p>start</p></li><li><p>run    // 调用线程对象 run 方法</p></li><li><p>setPriority    // 更改线程的优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The minimum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The default priority that is assigned to a thread.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line">   </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The maximum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>getPriority    // 获取线程的优先级</p></li><li><p>sleep    // 在指定的毫秒数内让当前正在执行的线程休眠</p></li><li><p>interrupt    // 中断程序</p></li><li><p>yield    // 线程礼让，让出cpu，让其他线程执行，但礼让时间不确定，故不一定礼让成功</p></li><li><p>join    // 线程插队，插队的线程一旦插队成功，则肯定先执行完插入的线程所有的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 15:25</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Method</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程吃包子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程（小弟）吃了 &quot;</span> + i + <span class="string">&quot; 个包子&quot;</span>);</span><br><span class="line">            <span class="comment">// 主线程吃 5 个包子就让老大吃完 20 个然后在吃</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程（小弟）让 包子给 老大吃&quot;</span>);</span><br><span class="line">                <span class="comment">// join 线程插队</span></span><br><span class="line">                t.join();</span><br><span class="line">                <span class="comment">// yield 礼让</span></span><br><span class="line"><span class="comment">//                Thread.yield();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;老大吃完了，接下来主线程（小弟）吃&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程（老大）吃了 &quot;</span> + i + <span class="string">&quot; 个包子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">子线程（老大）吃了 <span class="number">1</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">1</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">2</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">2</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">3</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">3</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">4</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">4</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">5</span> 个包子</span><br><span class="line">主线程（小弟）让 包子给 老大吃</span><br><span class="line">子线程（老大）吃了 <span class="number">5</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">6</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">7</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">8</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">9</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">10</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">11</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">12</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">13</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">14</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">15</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">16</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">17</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">18</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">19</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">20</span> 个包子</span><br><span class="line">老大吃完了，接下来主线程（小弟）吃</span><br><span class="line">主线程（小弟）吃了 <span class="number">6</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">7</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">8</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">9</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">10</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">11</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">12</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">13</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">14</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">15</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">16</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">17</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">18</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">19</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">20</span> 个包子</span><br></pre></td></tr></table></figure></li></ol><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><ol><li>用户线程：也叫工作线程，当线程的任务执行完或通知方式</li><li>守护线程：一般为工作线程服务，当所有的用户线程结束，守护线程自动结束</li><li>常见的守护线程：垃圾回收机制</li></ol><blockquote><p>下面测试如何将一个线程设置为守护线程</p><p>ThreadMethod02</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 16:03</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Method</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyDaemonThread());</span><br><span class="line">        <span class="comment">// 如果我们希望当 main 线程结束以后，子线程自动结束</span></span><br><span class="line">        <span class="comment">// 只需将子线程设置为守护线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;我是 main&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDaemonThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是MyDaemonThread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328163835246.png" alt="image-20210328163835246"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328163934258.png" alt="image-20210328163934258"></p><blockquote><p>通过下面代码查看状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.State;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 16:47</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.State</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;Hi &quot;</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 NEW</span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Hi <span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Hi <span class="number">1</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">3</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">4</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">5</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">6</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">7</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">8</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">9</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TERMINATED</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h2><blockquote><p>Synchronize</p><p>在多线程编程中，一些敏感数据不允许被多个线程同时访问，保证数据在任何时刻，最多有一个线程访问，以保证数据的完整性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Synchronize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Synchronize</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 使用多线程模拟三个窗口同事售票 100 张</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过继承实现</span></span><br><span class="line">        SellTicket01 sellTicket01 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        SellTicket01 sellTicket02 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        SellTicket01 sellTicket03 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        sellTicket01.start();</span><br><span class="line">        sellTicket02.start();</span><br><span class="line">        sellTicket03.start();</span><br><span class="line">        <span class="comment">// 通过接口实现</span></span><br><span class="line"><span class="comment">//        SellTicket02 sellTicket = new SellTicket02();</span></span><br><span class="line"><span class="comment">//        Thread thread01 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        Thread thread02 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        Thread thread03 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        thread01.start();</span></span><br><span class="line"><span class="comment">//        thread02.start();</span></span><br><span class="line"><span class="comment">//        thread03.start();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;  <span class="comment">// 同步方法，在同一时刻，只能有一个线程来执行该方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步方法实现加锁</span></span><br><span class="line">    <span class="comment">// 这时锁在 this 对象</span></span><br><span class="line">    <span class="comment">// 也可以在代码块写 synchronized ，这是同步代码块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;  <span class="comment">// 同步方法，在同一时刻，只能有一个线程来执行该方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="comment">/*this*/</span> object) &#123;    <span class="comment">// 写this或object都可以</span></span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><blockquote><p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁</p></blockquote><blockquote><p>举例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Synchronize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Soundbank;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 20:06</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Synchronize</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeadLockDemo deadLockDemo = <span class="keyword">new</span> DeadLockDemo(<span class="keyword">true</span>);</span><br><span class="line">        DeadLockDemo deadLockDemo1 = <span class="keyword">new</span> DeadLockDemo(<span class="keyword">false</span>);</span><br><span class="line">        deadLockDemo.start();</span><br><span class="line">        deadLockDemo1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="keyword">static</span> Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeadLockDemo</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 1 &quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 2 &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 3 &quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 4 &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><ol><li>当前线程的同步方法、同步代码执行结束</li><li>当前线程在同步代码块、同步方法中遇到了 <strong>break、return</strong></li><li>当前线程在同步代码块、同步方法中出现了未处理的 <strong>Error、Exception</strong>，导致异常结束</li><li>当前线程在同步代码快、同步方法中执行了线程对象的 <strong>wait()</strong> 方法，当前线程暂停，并释放锁</li></ol><blockquote><p>下面操作不会释放锁</p></blockquote><ol><li>线程执行同步代码块或者同步方法时，程序调用了 <strong>Thread.sleep()、Thread.yield()</strong> 方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其他线程调用了该线程的 <strong>suspend()</strong> 方法将该线程挂起，该线程不会释放锁</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><blockquote><p>（1）在main方法中启动两个线程</p><p>（2）第 1 个线程循环随机打印 100 以内的整数</p><p>（3）直到第 2 个线程从键盘读取了 “Q” 命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 21:11</span></span><br><span class="line"><span class="comment"> * @ Description: com.Homework</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        thread.start();</span><br><span class="line">        T2 t2 = <span class="keyword">new</span> T2(t1);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机输出 1-100 数字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(<span class="keyword">boolean</span> loop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出 1-100 数字</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;T1 线程退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入 Q 上面的线程就会退出</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T1 a;</span><br><span class="line">    <span class="keyword">private</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">T2</span><span class="params">(T1 a)</span> </span>&#123;   <span class="comment">// 构造器传入 T1 对象</span></span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 接受到用户的输入</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入指令(Q)表示退出 : &quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> key = scanner.next().toUpperCase().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 以通知的方式结束 a</span></span><br><span class="line">                a.setLoop(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;T2 线程退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（1）有 2 个用户分别从同一个卡上取钱 总额为 10000</p><p>（2）每次都取 1000，当余额不足时，不能取款</p><p>（3）不能出现超取现象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Homework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 21:47</span></span><br><span class="line"><span class="comment"> * @ Description: com.Homework</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        thread1.setName(<span class="string">&quot;T1&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        thread2.setName(<span class="string">&quot;T2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取款线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (money &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;余额不足！！！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                money -= <span class="number">1000</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 取出 1000, 当前余额 : &quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="2021/03/22/STL/"/>
      <url>2021/03/22/STL/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol><li><p>构造函数</p><ul><li>vector<T>    // 采用模板实现类实现，默认构造函数</li><li>vector(v.begin(), v.end)    // 拷贝 v[begin(), end())区间的元素</li><li>vector(n, elem)    // 构造函数将 n 个 elem 拷贝给本身</li><li>vector(const vector &amp;vec)   // 拷贝构造函数</li></ul></li><li><p>常用赋值</p><ul><li>assign(beg, end);    // 将 [begin, end) 区间的数据拷贝赋值给本身</li><li>assign(n, elem);    // 将n个elem拷贝赋值给本身</li><li>vector&amp; operator=(const vector &amp;vec);    // 重载等号操作符</li><li>swap(vec);    // 将vec与本身的元素互换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>, <span class="number">5</span>)</span></span>;<span class="comment">// 10个5</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(v2.begin(), v2.end())</span></span>;<span class="comment">// 将v2拷贝到v3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v4;</span><br><span class="line">v4.assign(v3.begin(), v3.end());<span class="comment">// 将v3赋值给v4</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v5;</span><br><span class="line">v5 = v3;<span class="comment">// 用等号赋值一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//swap交换</span></span><br><span class="line">v5.swap(v4);<span class="comment">// 将v5和v4内容互换</span></span><br></pre></td></tr></table></figure></li><li><p>大小操作</p><ul><li>size();     // 返回元素个数</li><li>empty();</li><li>resize(int num);     // 重新定义容器长度，如果变长，则用默认值填充新位置，如果变短，则超出的部分元素舍弃</li><li>resize(int num, elem);</li><li>capacity();     // 容器的容量</li><li>reserve(int len);    // 预留len和元素长度，预留位置不初始化，元素不可访问</li></ul></li><li><p>数据存储操作</p><ul><li>at(int index);    // 越界抛异常 out_of_range</li><li>operator[];    // 越界运行直接报错</li><li>front();    // 返回第一个元素</li><li>back();    // 返回最后一个元素</li></ul></li><li><p>插入和删除</p><ul><li>insert(const_iterator pos, int count, elem);    // 迭代器指向位置 pos 插入 count 个 元素 elem</li><li>insert(const_iterator pos, elem);    // 同上，不过默认插入一个 elem</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.begin(); it != v.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    vec.push_back(<span class="number">1</span>);</span><br><span class="line">    vec.push_back(<span class="number">2</span>);</span><br><span class="line">    vec.push_back(<span class="number">3</span>);</span><br><span class="line">    vec.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    vec.insert(vec.begin(), <span class="number">100</span>);</span><br><span class="line">    printVector(vec);</span><br><span class="line"></span><br><span class="line">    vec.insert(vec.end(),<span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line">    printVector(vec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* out</span></span><br><span class="line"><span class="comment">100_1_2_3_4_</span></span><br><span class="line"><span class="comment">100_1_2_3_4_100_100_100_</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>push_back(elem);     // 尾部插入元素</li><li>pop_back();    // 删除最后一个元素</li><li>erase(const_iterator start, const_iterator end);     // 删除迭代器从 start 到 end 之间的元素</li><li>erase(const_iterator pos);     // 删除迭代器指向的元素</li><li>clear();     // 删除容器中所有元素</li></ul></li></ol><blockquote><p>去重 unique</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210323141556378.png" alt="image-20210323141556378"></p><h2 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.begin(); it != v.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector_reverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.rbegin(); it != v.rend(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h2><blockquote><p>例子</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322203355924.png" alt="image-20210322203355924"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322203427853.png" alt="image-20210322203427853"></p><blockquote><p>将未使用的空间进行释放</p><p>方法如下</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322203629444.png" alt="image-20210322203629444"></p><p>作用：</p><ul><li><p>vector<int>(vec)：利用拷贝构造初始匿名对象</p></li><li><p>然后匿名创建的占用空间就是使用容量</p><p>然后匿名对象和 vec 互换</p><p>之后匿名对象会自己析构</p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322210912416.png" alt="image-20210322210912416"></p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322212715920.png" alt="image-20210322212715920"  /><h1 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue<V></h1><h2 id="优先队列，int-默认大的优先"><a href="#优先队列，int-默认大的优先" class="headerlink" title="优先队列，int 默认大的优先"></a>优先队列，int 默认大的优先</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// 4 3 2 1 0</span></span><br></pre></td></tr></table></figure><h2 id="priority-queue-小的优先写法"><a href="#priority-queue-小的优先写法" class="headerlink" title="priority_queue 小的优先写法"></a>priority_queue<int> 小的优先写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">//  0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h2 id="结构体优先写法"><a href="#结构体优先写法" class="headerlink" title="结构体优先写法"></a>结构体优先写法</h2><blockquote><p>不同于 sort() 函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node x, node y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;<span class="comment">// 这样反而是 大的 优先</span></span><br><span class="line">        <span class="comment">// 小的优先</span></span><br><span class="line">        <span class="comment">// return x.val &gt; y.val;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;node&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        node tmp&#123;&#125;;</span><br><span class="line">        tmp.val = i;</span><br><span class="line">        q.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top().val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// 4 3 2 1 0 </span></span><br></pre></td></tr></table></figure><h2 id="sort-结构体比较写法"><a href="#sort-结构体比较写法" class="headerlink" title="sort() 结构体比较写法"></a>sort() 结构体比较写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(v.begin(), v.begin() + k, Cmp);</span><br></pre></td></tr></table></figure><ol><li><p>写在结构体内</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node x, node y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;<span class="comment">// 小到大排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>写在结构体外</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.val &gt; y.val;  <span class="comment">// 大到小排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="全排列模板"><a href="#全排列模板" class="headerlink" title="全排列模板"></a>全排列模板</h1><blockquote><p>注意 while (next_permutation(左下标, 右下标))</p><p>排列的区间是 [左下标, 右下标)</p><p>此例子是 [1, 5) 不包括 m[5]</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> n;  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        m[i] = i;</span><br><span class="line">    &#125; <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(m+<span class="number">1</span>, m+<span class="number">5</span>)); <span class="comment">// 左闭右开 [m+1, m+5) 之间的数全排列</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排列总数：&quot;</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line">排列总数：<span class="number">24</span></span><br></pre></td></tr></table></figure><h1 id="lower-bound-、upper-bound"><a href="#lower-bound-、upper-bound" class="headerlink" title="lower_bound( )、upper_bound( )"></a>lower_bound( )、upper_bound( )</h1><ol><li>数组从小到大顺序时<ul><li>lower_bound(begin, end, num);    // 返回第一个 <strong>大于等于 num</strong> 的地址</li><li>upper_bound(begin, end, num);   // 返回第一个 <strong>大于 num</strong> 的地址</li></ul></li><li>数组从大到小顺序时，重载lower_bound()和upper_bound() 即可找到第一个小于等于 num 的地址<ul><li>lower_bound(begin, end, num, greater<tpye>);    // 返回第一个 <strong>小于等于 num</strong> 的地址</li><li>upper_bound(begin, end, num, greater<type>);     // 返回第一个 <strong>小于 num</strong> 的地</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">5</span>];</span><br><span class="line">    m[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    m[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    m[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">    m[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">    m[<span class="number">4</span>] = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> pos1 = lower_bound(m, m+<span class="number">5</span>, <span class="number">4</span>) - m;</span><br><span class="line">    <span class="keyword">int</span> pos2 = upper_bound(m, m + <span class="number">5</span>, <span class="number">4</span>) - m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos1:&quot;</span> &lt;&lt; pos1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos2:&quot;</span> &lt;&lt; pos2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(m, m + <span class="number">5</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pos3 = lower_bound(m, m+<span class="number">5</span>, <span class="number">4</span>, greater&lt;<span class="keyword">int</span>&gt;()) - m;</span><br><span class="line">    <span class="keyword">int</span> pos4 = upper_bound(m, m + <span class="number">5</span>, <span class="number">4</span>, greater&lt;<span class="keyword">int</span>&gt;()) - m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos3:&quot;</span> &lt;&lt; pos3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos4:&quot;</span> &lt;&lt; pos4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line">pos1:<span class="number">2</span></span><br><span class="line">pos2:<span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> </span><br><span class="line">pos3:<span class="number">2</span></span><br><span class="line">pos4:<span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data struct two</title>
      <link href="2021/03/17/data%20struct%20two/"/>
      <url>2021/03/17/data%20struct%20two/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h1><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Trees.TrieTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/3 - 21:09</span></span><br><span class="line"><span class="comment"> * @ Description: Trees.PrefixTree</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">trieTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀树节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pass;   <span class="comment">// 记录进过了几次</span></span><br><span class="line">        <span class="keyword">int</span> end;    <span class="comment">// 记录以当前节点为尾的字符串</span></span><br><span class="line">        TrieNode[] nexts;   <span class="comment">// 记录 &#x27;a&#x27;-&#x27;z&#x27; 的路径</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            nexts = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀树实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> root.pass;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入一段字符串</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            node.pass++;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;  <span class="comment">// 记录字母</span></span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// a 对应 0, b 对应 1.....</span></span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;    <span class="comment">// 如果未出现过该字母,则创建</span></span><br><span class="line">                    node.nexts[index] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">                node.pass++;</span><br><span class="line">            &#125;</span><br><span class="line">            node.end++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除一段字符</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (search(word) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            node.pass--;</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (--node.nexts[index].pass == <span class="number">0</span>) &#123;</span><br><span class="line">                    node.nexts[index] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            node.end--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询字符在树中出现的次数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="comment">// 如果未在树中存在该路径则直接返回 0</span></span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有加入的字符串中，计算有多少个是以 pre 为前缀的</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">prefixNumber</span><span class="params">(String pre)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pre == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            <span class="keyword">char</span>[] chars = pre.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.pass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">        String string0 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String string1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String string2 = <span class="string">&quot;acdefg&quot;</span>;</span><br><span class="line">        String string3 = <span class="string">&quot;minghuifan&quot;</span>;</span><br><span class="line"></span><br><span class="line">        trie.insert(string0);</span><br><span class="line">        trie.insert(string1);</span><br><span class="line">        trie.insert(string2);</span><br><span class="line">        trie.insert(string3);</span><br><span class="line"></span><br><span class="line">        trie.delete(string1);</span><br><span class="line"></span><br><span class="line">        System.out.println(trie.size());</span><br><span class="line">        System.out.println(trie.search(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><blockquote><p>out f(in)</p></blockquote><ol><li><p>in -&gt; 无穷</p><p>out -&gt; S（一个范围）</p><ul><li><p>MD5：0 ~ 2^64-1</p><p>十六进制为16位的字符串，即每个位表示16中状态(0000<del>1111 or 0</del>F)</p></li><li><p>SHA1：0 ~ 2^128-1</p><p>十六进制为32位的字符串</p></li></ul></li><li><p>相同的in -&gt; 相同的out</p><p>说明哈希函数不随机</p></li><li><p>不同的输入 -&gt; 相同的输出（哈希碰撞）</p></li><li><p>输入得到的哈希值都均匀且离散的分布在 S 域上</p></li><li><p>取模</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210317193725509.png" alt="image-20210317193725509"></p></li></ol><h2 id="EX1"><a href="#EX1" class="headerlink" title="EX1"></a>EX1</h2><p>有40亿个无符号整数的文件，无符号整数范围是(0 ~ 2^32^-1)，给 1G 内存返回出现次数最多的整数</p><blockquote><p>2^32^ = 4,294,967,296 约为 43 亿</p></blockquote><hr><h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><blockquote><p>先引入位图</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chapter_9;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/18 - 18:52</span></span><br><span class="line"><span class="comment"> * @ Description: Chapter_9</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitArr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入数组中一共有 N 个数，每个数占 4 字节</span></span><br><span class="line">    <span class="comment">// 共有 4N Byte = 4N*8 bit</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改变第 index 位的 0 1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitarr</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numIndex = index / <span class="number">32</span>;  <span class="comment">// 定位到数组的哪一位</span></span><br><span class="line">        <span class="keyword">int</span> bitIndex = index % <span class="number">32</span>;  <span class="comment">// 定位在该数的第多少位</span></span><br><span class="line">        <span class="keyword">int</span> bit = (arr[numIndex] &gt;&gt; bitIndex) &amp; <span class="number">1</span>;  <span class="comment">// 拿到第 index 位的状态</span></span><br><span class="line">        arr[numIndex] = arr[numIndex] | (<span class="number">1</span> &lt;&lt; bitIndex);    <span class="comment">// 将 index 位的数修改为 1</span></span><br><span class="line"><span class="comment">//        arr[numIndex] = arr[numIndex] &amp; (~(1 &lt;&lt; bitIndex));   // 将 index 位的数修改为 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 总结：取得第 i 位的 0/1 状态 int bit = (arr[i / 32] &gt;&gt; (i % 32)) &amp; 1</span></span><br><span class="line">        <span class="keyword">return</span> bit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印二进制数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">192</span>; i++) &#123;</span><br><span class="line">            System.out.print(bitarr(arr, i));</span><br><span class="line">            <span class="keyword">if</span> (sum++ % <span class="number">32</span> == <span class="number">31</span>) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一位一位的改变, 下面写法省略了前面 28 个0</span></span><br><span class="line">    <span class="comment">// 1 0001   0~31</span></span><br><span class="line">    <span class="comment">// 2 0010   32~63</span></span><br><span class="line">    <span class="comment">// 3 0011   64~95</span></span><br><span class="line">    <span class="comment">// 4 0100   96~127</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        bitarr(arr, <span class="number">1</span>);</span><br><span class="line">        bitarr(arr, <span class="number">32</span>);</span><br><span class="line">        bitarr(arr, <span class="number">66</span>);</span><br><span class="line">        bitarr(arr, <span class="number">96</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** out</span></span><br><span class="line"><span class="comment"> * 10000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 01000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 11000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 00100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 10100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 01100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 3_3_7_5_</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>题目：</p><p>不安全网页的黑名单包含 <strong>100亿</strong> 个黑名单网页，每个网页的 URL 最多占用 64B。现在想要实现一个网页过滤系统，利用该系统可以根据网页的 URL 判断该网页是否在黑名单上，请设计该系统。</p><p>要求：</p><ol><li>该系统允许有万分之一以下的判断失误率</li><li>使用的额外空间不要超过 <strong>30G</strong></li></ol></blockquote><p>这个问题可以使我们认识布隆过滤器器</p><blockquote><p>分析：</p><p>如果我们使用 HashSet 来保存每一个 URL，一个 URL 就是 64B，100亿个就是 6400亿B 约为 640G，显然超出要求的额外空间</p><p>通过把 URL 保存起来显然是不行的，无法达到题目要求的 30G 以下额外空间</p><p>那么就要用到布隆过滤器</p></blockquote><h2 id="通过例子了解实现"><a href="#通过例子了解实现" class="headerlink" title="通过例子了解实现"></a>通过例子了解实现</h2><ol><li><p>上诉我们已经了解了 位图，那么如果我们用位图中的每一个位置来保存一个 URL 需要的内存约为 640/8G 80G，还超过了 30G</p><p>但是我们不需要URL个位置，因此还可以将位图进一步缩小至 30G</p></li><li><p>如何用位图来保存 URL？</p><ul><li>每个 URL 通过 k 个哈希函数计算得到一个哈希值然后在模上m（m为位图数位数），当然也可能出现哈希值相同的情况</li><li>然后此时每个哈希值对应位图中的每一位，进行描黑（也就是变为1）</li><li>然后对每一个 URL 重复上两个操作</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210318211247986.png" alt="image-20210318211247986"></p></li><li><p>然后每个 URL 都通过多个哈希值找到了对应的位置进行描黑处理了</p></li><li><p>然后查找方式如下，比如查找 URLx 是否在黑名单上</p><ul><li>URLx 通过那 k 个哈希函数然后模上m，得到了 k 个位置</li><li>然后看这 k 个位置在位图中是否<strong>全是黑</strong>的状态（即为1状态）</li></ul><blockquote><p>黑URL -&gt; 白   不存在</p><p>白URL -&gt; 黑   存在</p><p>为什么黑URL不可能报错成白URL：因为同一个 URL 通过相同的哈希函数得到的哈希值是一样的，那么肯定会描黑这些位置的，那么查找的时候这些位置必全为黑</p><p>白URL误报成黑URL：如果白URL计算出来的 K个 哈希值刚好是全黑，也就是说当 位图数m 较小、URL数量多且k较多时候可能位图中的每一个位置都描黑了。</p><p>那么我们就要降低白报成黑的概率，尽可能减少误报。</p></blockquote></li><li><p>那么如何确定 <strong>①k ②m ③url个数</strong> </p><p>先确定 <strong>m</strong> 然后根据<strong>样本量</strong>和预期失误率来确定 <strong>k</strong></p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210318222956023.png" alt="image-20210318222956023" style="zoom:80%;" /><blockquote><p>n 样本量</p><p>p 预期失误率</p><p>只需要这两个参数，与单样本大小无关（比如这道题中的一个URL 64B 这个条件无用）</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210405122603425.png" alt="image-20210405122603425"></p><blockquote><p>比如这道题中</p><p>n = 100亿</p><p>p = 0.01%</p><p>m = 19.19n = 20n = 2000亿bit = 25G</p><p>k = 14</p><p>最后计算出真实失误率 p(真) = 0.006%</p></blockquote></li></ol><hr><h1 id="一致性哈希原理"><a href="#一致性哈希原理" class="headerlink" title="一致性哈希原理"></a>一致性哈希原理</h1><hr><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><blockquote><p>通用写法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> UnionFind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/19 - 12:17</span></span><br><span class="line"><span class="comment"> * @ Description: UnionFind</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindUniversal</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将 V 类型数据包装成集合形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        V value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Element</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并查集</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        HashMap&lt;V, Element&lt;V&gt;&gt; elementHashMap;</span><br><span class="line">        HashMap&lt;Element&lt;V&gt;, Element&lt;V&gt;&gt; fatherMap;</span><br><span class="line">        HashMap&lt;Element&lt;V&gt;, Integer&gt; sizeMap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历元素，将每个元素都包装成一个集合</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(List&lt;V&gt; list)</span> </span>&#123;</span><br><span class="line">            elementHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            fatherMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            sizeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (V value : list) &#123;</span><br><span class="line">                Element&lt;V&gt; element = <span class="keyword">new</span> Element&lt;&gt;(value);</span><br><span class="line">                elementHashMap.put(value, element);</span><br><span class="line">                fatherMap.put(element, element);</span><br><span class="line">                sizeMap.put(element, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给一个元素寻找这个元素所在集合的代表元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Element&lt;V&gt; <span class="title">findHead</span><span class="params">(Element&lt;V&gt; element)</span> </span>&#123;</span><br><span class="line">            Stack&lt;Element&lt;V&gt;&gt; path = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 用于存放元素</span></span><br><span class="line">            <span class="keyword">while</span> (element != fatherMap.get(element)) &#123; <span class="comment">// 如果该元素不属于</span></span><br><span class="line">                path.push(element); <span class="comment">// 如果不是代表元素入栈</span></span><br><span class="line">                element = fatherMap.get(element);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!path.empty()) &#123;</span><br><span class="line">                fatherMap.put(path.pop(), element);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 判断ab是否在集合中</span></span><br><span class="line">            <span class="keyword">if</span> (elementHashMap.containsKey(a) &amp;&amp; elementHashMap.containsKey(b)) &#123;</span><br><span class="line">                <span class="keyword">return</span> findHead(elementHashMap.get(a)) == findHead(elementHashMap.get(b));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (elementHashMap.containsKey(a) &amp;&amp; elementHashMap.containsKey(b)) &#123;</span><br><span class="line">                Element&lt;V&gt; aF = findHead(elementHashMap.get(a));</span><br><span class="line">                Element&lt;V&gt; bF = findHead(elementHashMap.get(b));</span><br><span class="line">                <span class="comment">// 判断两个元素是否在同一集合</span></span><br><span class="line">                <span class="keyword">if</span> (aF != bF) &#123;</span><br><span class="line">                    Element&lt;V&gt; maxSet = sizeMap.get(aF) &gt; sizeMap.get(bF) ? aF : bF;</span><br><span class="line">                    Element&lt;V&gt; minSet = maxSet == aF ? bF : aF;</span><br><span class="line">                    fatherMap.put(minSet, maxSet);  <span class="comment">// 将小集合的父亲变为大集合，实现合并操作</span></span><br><span class="line">                    sizeMap.put(maxSet, sizeMap.get(maxSet) + sizeMap.get(minSet));</span><br><span class="line">                    sizeMap.remove(minSet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        UnionFindSet&lt;Integer&gt; u1 = <span class="keyword">new</span> UnionFindSet&lt;&gt;(list);</span><br><span class="line">        u1.union(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        u1.union(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Out</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>findHead 函数调用的次数越多 平均时间复杂度越接近 O(1)</p></blockquote><hr><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><blockquote><p>先看下暴力方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(String text, String pattern)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tlen = text.length();</span><br><span class="line">    <span class="keyword">int</span> plen = pattern.length();</span><br><span class="line">    <span class="keyword">int</span> ti = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 但凡有一个下标越界都退出</span></span><br><span class="line">    <span class="keyword">while</span> (pi &lt; plen &amp;&amp; ti &lt; tlen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.charAt(ti) == pattern.charAt(pi)) &#123;</span><br><span class="line">            ti++;</span><br><span class="line">            pi++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ti -= pi - <span class="number">1</span>;   <span class="comment">// 退回到下一个位置</span></span><br><span class="line">            pi = <span class="number">0</span>;         <span class="comment">// 匹配串回到 0 位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是匹配串越界了一定是匹配成功</span></span><br><span class="line">    <span class="keyword">return</span> pi == plen ? ti - pi : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力解法就不多说了，文本串一个一个位置滑动</p><blockquote><p>KMP解法为什么快</p><p>其实是在暴力解法中文本串中一个一个位置滑动的基础上进行了加速，可以实现跳跃的滑动</p></blockquote><blockquote><p>先看一个概念</p><p>==<strong>某一位置前缀和后缀最大匹配长度</strong>==</p><p>​        即该位置前的前缀和后缀最大匹配长度，但长度并不包括该位置前面的全部</p><p>​        如 <strong>ababc</strong> </p><p>​        c 位置的前缀后缀最大匹配长度为 2 (前缀：ab、后缀：ab)</p><p>​        而不是 4（前缀：abab、后缀：abab）,不包括该位置前面全部字符串</p><p>​        如果包括的话那么每个字符位置的前缀后缀的最大匹配长度就是前面的长度</p></blockquote><p>例子</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321224649111.png" alt="image-20210321224649111" style="zoom:80%;" /><ul><li>位置 0 前面没有信息 —— 0</li><li>位置 1 —— 0</li><li>位置 2 —— 0</li><li>位置 3 —— 0</li><li>位置 4 —— 1 （前缀：a、后缀：a）</li><li>位置 5 —— 2 （前缀：ab、后缀：ab）</li><li>位置 6 —— 3 （前缀：abc、后缀：abc）</li></ul><blockquote><p>然后引入 next 数组</p><p>其实就是上面说的 前缀和后缀的最大匹配长度</p></blockquote><p>例子：求法看上面</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321230656826.png" alt="image-20210321230656826"></p><blockquote><p>然后看 KMP 是如何加速的</p></blockquote><ol><li><p>绿色的为最大前缀和后缀标识，表示 Y 位置前缀后缀的最大匹配长度为 4</p><p>当匹配到 XY 位置发现不匹配<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321232427259.png" alt="image-20210321232427259"></p><ul><li><p>按照暴力匹配的话文本串跳到 i + 1 位置，模式串跳到 0 位置，然后开始新的一轮比较<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321232355173.png" alt="image-20210321232355173"></p></li><li><p>如果是KMP的话，那么直接滑动到如图位置，然后从 X 位置和 j 位置开始比较即可（本质就是 从 i + 5 的位置和 0 位置开始比较）</p><p>但是由于后缀和前缀相等，所以 <strong>i + 5 —— X</strong> 的位置和 <strong>0 —— j</strong> 的位置必然匹配，所以直接从 <strong>X 和 j</strong> 位置开始比对<br>所以就加速了整个比对的过程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321233101322.png" alt="image-20210321233101322"></p></li><li><p>如果 X 和 j 又不匹配呢<br>如果 next[j] = 3</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210326165602600.png" alt="image-20210326165602600" style="zoom:80%;" /></li><li><p>如果 X 和 j-1 又不匹配呢</p><p>重复上述过程</p><p>最坏的结果就是滑动到 0 和 X 比较</p></li></ul><blockquote><p>这里有个问题需要证明：为什么文本串的 <strong>i~K</strong> 的任何位置都配不出模式串</p><p>假设 <strong>i~K</strong> 中有位置 <strong>M</strong> 可以匹配出模式串</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210326170416982.png" alt="image-20210326170416982"  /><p>则 M<del>(X-1) 必然与 0</del>(j+2) 完全匹配 则下图椭圆区域必然完成一致</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210326215627490.png" alt="image-20210326215627490" style="zoom:80%;" /><p>那么看 next[Y] 是不是就有问题了，next[Y] 本来是 4 但是你又找到了一个比 4 更长的前缀后缀匹配</p><p>矛盾，因为 原next[Y] 不可能计算出错。</p><p>所以 <strong>i~K</strong> 位置不可能与匹配串匹配成功。</p></blockquote></li></ol><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> String;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/20 - 15:18</span></span><br><span class="line"><span class="comment"> * @ Description: String</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    KMP</span></span><br><span class="line"><span class="comment">    O(N)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndexOf</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text.length() &lt; pattern.length() || text.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] str1 = text.toCharArray();   <span class="comment">// 文本串</span></span><br><span class="line">        <span class="keyword">char</span>[] str2 = pattern.toCharArray();    <span class="comment">// 匹配串</span></span><br><span class="line">        <span class="keyword">int</span>[] next = getNextArray(str2);    <span class="comment">// next 数组</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i1 &lt; str1.length &amp;&amp; i2 &lt; str2.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[i1] == str2[i2]) &#123; <span class="comment">// 如果字符相等两者同时移动到下一个字符</span></span><br><span class="line">                i1++;</span><br><span class="line">                i2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next[i2] == -<span class="number">1</span>) &#123;    <span class="comment">// str2 中比对的位置已经无法往前跳了</span></span><br><span class="line">                i1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i2 = next[i2];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只要是 i2 越界了，那么一定匹配成功</span></span><br><span class="line">        <span class="comment">// 但是 i1 越界不一定匹配失败，因为 i1 i2 可能同时越界</span></span><br><span class="line">        <span class="keyword">return</span> i2 == str2.length ? i1 - i2 : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    next 数组</span></span><br><span class="line"><span class="comment">    O(M)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNextArray(<span class="keyword">char</span>[] str2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str2.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[str2.length];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> cn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; next.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str2[i - <span class="number">1</span>] == str2[cn]) &#123;</span><br><span class="line">                next[i++] = ++cn;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn &gt; <span class="number">0</span>) &#123;   <span class="comment">// cn 位置和 i - 1 不匹配，继续向前找</span></span><br><span class="line">                cn = next[cn];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next[i++] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data struct one</title>
      <link href="2021/03/08/data%20struct%20one/"/>
      <url>2021/03/08/data%20struct%20one/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h1><blockquote><p>补充：<strong>荷兰国旗问题</strong></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/lh8vMWGk1rK4a5w.png" alt="image-20210309142159296"></p><blockquote><p>分析</p></blockquote><blockquote><p>问题一：</p></blockquote><ol><li><p>用一个变量 left 标记 &lt;= num 的右边界</p></li><li><p>此时遍历数组 arr 会出现两种情况</p><ul><li><p><strong>arr[i] &lt;= num</strong>：</p><p>  arr[i] 和小于等于部分右边界下标的后一个数交换，然后 <strong>小于等于区域右扩，i++</strong></p></li><li><p><strong>arr[i] &gt; num</strong>：<strong>区域不变, i++</strong></p></li></ul></li><li><p>直到越界，如下图例子</p></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/i2LAlygNdtOhFfo.png" alt="image-20210309153016991"></p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/pW8oNVivCxd7TDX.png" alt="image-20210309154030699" style="zoom:80%;" /><blockquote><p>问题二：和问题一类似</p></blockquote><ol><li>arr[i] &lt; num，arr[i] 和 &lt; 区域下一个交换，**&lt; 区域右阔，i++**</li><li>arr[i] = num，<strong>i++</strong></li><li>arr[i] &gt; num，arr[i] 和 &gt; 区域前一个交换，**&gt; 区域左扩，i++**</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/Pxviqz3pXRC9eTU.png" alt="image-20210309155223731"></p><hr><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><blockquote><p>时间复杂度：O(N*logN)</p><p>空间复杂度：O(N)</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/8 - 15:05</span></span><br><span class="line"><span class="comment"> * @ Description: Sort</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间复杂度分析</span></span><br><span class="line"><span class="comment"> *  T(N) = a * T(N/b) + O(N^d)</span></span><br><span class="line"><span class="comment"> *  T(N) = 2 * T(N/2) + O(N)</span></span><br><span class="line"><span class="comment"> *  log(a,b) == d   -&gt;  O(N) = O(N*logN)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(N)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意 R 是数组最后一个下标，不是下标加一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = L + ((R - L) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        process(arr, L, mid);   <span class="comment">// 左边排序</span></span><br><span class="line">        process(arr, mid + <span class="number">1</span>, R);   <span class="comment">// 右边排序</span></span><br><span class="line">        merge(arr, L, mid, R);  <span class="comment">// 整合</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这里 R 是数组最后一个下标，不是下标加一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> M, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = L;</span><br><span class="line">        <span class="keyword">int</span> right = M + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= M &amp;&amp; right &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[left] &lt;= arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= M) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[L + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">new</span> Random().nextInt(<span class="number">51</span>) + <span class="number">50</span>]; <span class="comment">// 数组大小区间 [50, 100]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>) + <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr.length);</span><br><span class="line">        process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210308172742987.png" alt="image-20210308172742987"></p><h3 id="小和问题-code"><a href="#小和问题-code" class="headerlink" title="小和问题-code"></a>小和问题-code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort.Merge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools.Asserts;</span><br><span class="line"><span class="keyword">import</span> tools.Times;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/8 - 18:16</span></span><br><span class="line"><span class="comment"> * @ Description: Sort.Merge</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小和问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallSum</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 小和问题求解函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">smallSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归过程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> left = mergeSort(arr, l, mid);  <span class="comment">// 左边小和</span></span><br><span class="line">        <span class="keyword">int</span> right = mergeSort(arr, mid + <span class="number">1</span>, r); <span class="comment">// 右边小和</span></span><br><span class="line">        <span class="keyword">int</span> sum = merge(arr, l, mid, r);    <span class="comment">// 左右合并求小和</span></span><br><span class="line">        <span class="keyword">return</span> left + right + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左右两边排序并返回此次左右两边的小和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>];    <span class="comment">// 辅助数组</span></span><br><span class="line">        <span class="keyword">int</span> left = l;</span><br><span class="line">        <span class="keyword">int</span> right = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果左边不越界并且右边不越界</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m &amp;&amp; right &lt;= r) &#123;</span><br><span class="line">            res += arr[left] &lt; arr[right] ? arr[left] * (r - right + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">            help[i++] = arr[left] &lt; arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面两个 while 循环只会进入其一</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= r) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[l + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力求解小和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                    res += arr[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> testSum = <span class="number">100000</span>;   <span class="comment">// 测试的次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Times测试时间工具</span></span><br><span class="line">        Times.test(<span class="string">&quot;小和计算&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> test = <span class="number">0</span>; test &lt; testSum; test++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">100</span>;  <span class="comment">// 数组的大小</span></span><br><span class="line">                <span class="keyword">int</span>[] arr0 = <span class="keyword">new</span> <span class="keyword">int</span>[sum];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr0.length; i++) &#123;</span><br><span class="line">                    arr0[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span>[] arr1 = Arrays.copyOf(arr0, arr0.length);</span><br><span class="line">                Asserts.test(force(arr0) == smallSum(arr1));</span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr1));</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;递归求小和：&quot; + smallSum(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;暴力求小和：&quot; + force(arr1));</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序对数量-code"><a href="#逆序对数量-code" class="headerlink" title="逆序对数量-code"></a>逆序对数量-code</h3><blockquote><p>和上面求小和问题是差不多的，这是下面的微小区别</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/2sKCDQa5nhqUbSX.png" alt="image-20210309134627796" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort.Merge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools.Asserts;</span><br><span class="line"><span class="keyword">import</span> tools.Times;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/9 - 12:30</span></span><br><span class="line"><span class="comment"> * @ Description: Sort.Merge</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序对数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> L = mergeSort(arr, l, mid);</span><br><span class="line">        <span class="keyword">int</span> R = mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">int</span> sum = merge(arr, l, mid, r);</span><br><span class="line">        <span class="keyword">return</span> L + R + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = l;</span><br><span class="line">        <span class="keyword">int</span> right = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m &amp;&amp; right &lt;= r) &#123;</span><br><span class="line">            ans += arr[left] &gt; arr[right] ? r - right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 大-&gt;小排序 并且 相等要先移右边</span></span><br><span class="line">            help[i++] = arr[left] &gt; arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把未排好的排好</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= r) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[l + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力求解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> testSum = <span class="number">10000000</span>;</span><br><span class="line">        Times.test(<span class="string">&quot;逆序数&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> test = <span class="number">0</span>; test &lt; testSum; test++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">int</span>[] arr0 = <span class="keyword">new</span> <span class="keyword">int</span>[sum];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">                    arr0[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">51</span>) + <span class="number">50</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span>[] arr1 = Arrays.copyOf(arr0, arr0.length);</span><br><span class="line">                Asserts.test(reverse(arr0) == force(arr1));</span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr1));</span></span><br><span class="line"><span class="comment">//                System.out.print(force(arr0) + &quot;_&quot; + reverse(arr1) + &#x27;\n&#x27;);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_notes</title>
      <link href="2021/03/04/Linux-notes/"/>
      <url>2021/03/04/Linux-notes/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>韩顺平教育</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304215343.png" alt="image-20210304215341910"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304220107.png" alt="image-20210304220106965"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304220132.png" alt="image-20210304220132272"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304220440.png" alt="image-20210304220440770"></p><ul><li><p>Linux运维工程师：服务器规划、调试优化、市场键控、故障处理、数据备份恢复、日志分析……</p></li><li><p>Linux嵌入式工程师：linux下驱动开发、嵌入式系统程序开发（C/C++）</p></li><li><p>Linux应用领域：</p><ul><li>服务器：C/C++、pup、java、python、go</li><li>嵌入式：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、物联网……</li></ul></li></ul><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><p>Linux主要发行版：Ubuntu、Redhat、CentOS、Debain(蝶变)、Fedora、SuSE、OpenSUSE(示意图)</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304224741.png" alt="image-20210304224741723"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304230914.png" alt="image-20210304230914566"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304231439.png" alt="image-20210304231438980"></p><h2 id="VM及安装-CentOS"><a href="#VM及安装-CentOS" class="headerlink" title="VM及安装 CentOS"></a>VM及安装 CentOS</h2><blockquote><p>几个注意点</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105738.png" alt="image-20210305105738436"></p><p>选择安装位置：分三个区：boot、swap、根分区</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305104544.png" alt="image-20210305104544675"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305104808.png" alt="image-20210305104808328"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105330.png" alt="image-20210305105330925"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105346.png" alt="image-20210305105346170"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105304.png" alt="image-20210305105304329"></p><h3 id="网络的三种模式"><a href="#网络的三种模式" class="headerlink" title="网络的三种模式"></a>网络的三种模式</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305115323.png" alt="image-20210305115323751"></p><h3 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h3><ol><li><p>直接将装好的系统文件夹拷贝即可，然后VM中打开这个文件即可</p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305120039.png" alt="image-20210305120039055" style="zoom: 67%;" /></li><li><p>用VM的克隆：克隆时候需要把需要克隆的系统关闭</p><p> 其实就是拷贝，克隆的文件可以直接在其他电脑上使用</p></li></ol><h3 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305121414.png" alt="image-20210305121414682"></p><h3 id="虚拟机迁移和删除"><a href="#虚拟机迁移和删除" class="headerlink" title="虚拟机迁移和删除"></a>虚拟机迁移和删除</h3><ol><li>迁移：直接剪切</li><li>删除：VM删除、直接删除文件</li></ol><h3 id="install-vmtools"><a href="#install-vmtools" class="headerlink" title="install vmtools"></a>install vmtools</h3><p>Root用户下安装</p><p>用于管理母机和本机的共享文件夹</p><p><strong>但是在实际开发中，文件的上传和下载是要使用远程方式完成的</strong></p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305122824.png" alt="image-20210305122824870" style="zoom: 67%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305122904.png" alt="image-20210305122904629"></p><ul><li><p>然后终端进去 opt 目录解压这个文件</p></li><li><p>解压</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305124016.png" alt="image-20210305124016565"></p></li><li><p>安装：一路回车</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305124336.png" alt="image-20210305124336736"></p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305124745.png" alt="image-20210305124745341"></p><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305130642.png" alt="image-20210305130642545"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305131545.png" alt="image-20210305131544873"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305130751.png" alt="image-20210305130751013"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305131309.png" alt="image-20210305131308926"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305131740.png" alt="image-20210305131739967"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305134101.png" alt="image-20210305134050861"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305134118.png" alt="image-20210305134118352"></p><hr><h1 id="实操篇"><a href="#实操篇" class="headerlink" title="实操篇"></a>实操篇</h1><h2 id="远程登录Linux"><a href="#远程登录Linux" class="headerlink" title="远程登录Linux"></a>远程登录Linux</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305141710.png" alt="image-20210305141709946"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305141915.png" alt="image-20210305141915359"></p><h3 id="XShell"><a href="#XShell" class="headerlink" title="XShell"></a>XShell</h3><blockquote><p>下载安装后查看 Linux 的 ip</p><p>然后 XShell 链接</p></blockquote><ul><li><p>新建</p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305145719.png" alt="image-20210305145719046" style="zoom:67%;" /></li><li><p>这里填写 Linux 系统的用户名或者Root</p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305144045.png" alt="image-20210305144044969"></p><ul><li><p>填写对应用户的密码</p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305150019.png" alt="image-20210305150019458" style="zoom: 67%;" /></li></ul><h3 id="XFTP"><a href="#XFTP" class="headerlink" title="XFTP"></a>XFTP</h3><ul><li><p>新建</p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305151629.png" alt="image-20210305151629821" style="zoom: 80%;" /></li><li><p>同样用户名和密码</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305151704.png" alt="image-20210305151704267"></p></li></ul><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305160146.png" alt="image-20210305160145888"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305160524.png" alt="image-20210305160524700"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305162930.png" alt="image-20210305162930087"></p><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now// 立刻关机</span><br><span class="line">shutdown -h 1// 一分钟后关机</span><br><span class="line">shutdown // 和上面一行默认是1分钟关机</span><br><span class="line">halt // 关机</span><br><span class="line">reboot// 重启</span><br><span class="line">sync// 将内存数据同步到磁盘中</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305164021.png" alt="image-20210305164021233"></p><h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305164704.png" alt="image-20210305164704721"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><blockquote><p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305224157.png" alt="image-20210305224156958"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd用户名// 添加用户</span><br></pre></td></tr></table></figure><p>这样会自动创建一个和用户名同名的家目录，存放在 </p><p><strong>/home/用户名</strong></p><blockquote><p>如果想指定家目录的位置则如下例子</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/test 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示用户名的家目录存在放在 /home/<span class="built_in">test</span>/ 下</span></span><br></pre></td></tr></table></figure><h3 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p>注意：如果不写用户名是在当前登录账户更改密码，也就是当前的 root 账户</p><blockquote><p>pwd    // 显示当前绝对路径</p></blockquote><h3 id="删除用户：两种"><a href="#删除用户：两种" class="headerlink" title="删除用户：两种"></a>删除用户：两种</h3><ol><li><p>删除用户，但是保留该用户的家目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名</span><br></pre></td></tr></table></figure></li><li><p>删除用户以及家目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure></li></ol><h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - 用户名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305214029.png" alt="image-20210305214028575"></p><h3 id="查看当前登录用户信息"><a href="#查看当前登录用户信息" class="headerlink" title="查看当前登录用户信息"></a>查看当前登录用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">who am i</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305214816.png" alt="image-20210305214816288"></p><p>即使切换了用户，查看也是显示最先登录的用户信息</p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><blockquote><p>系统可以对有共性/权限的多个用户进行统一的管理</p></blockquote><ol><li><p>新增组：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure></li><li><p>删除组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure></li><li><p>增加用户的时候直接加上组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -g 用户组 用户名</span><br><span class="line">如新增一个用户 zwj 并制定到 wudang 组里面去</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure></li><li><p>修改用户的组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 要放入的组 用户名</span><br><span class="line">如将 wudang组的 zwj 修改到 mojiao组里面去</span><br><span class="line">step1: groupadd mojiao</span><br><span class="line">step2: usermod -g mojiao zwj</span><br></pre></td></tr></table></figure></li></ol><h3 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305221428.png" alt="image-20210305221428757"></p><ol><li><p>passwd文件：</p><p> 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305222840.png" alt="image-20210305222840801"></p><p> Shell解释：</p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305224803.png" alt="image-20210305224803109" style="zoom: 50%;" /></li><li><p>shadow文件：</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305223408.png" alt="image-20210305223408094"></p><p> 给 king 设置密码在打开看下：此时有了加密口令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305223540.png" alt="image-20210305223540346"></p></li><li><p>group文件</p><p> 创建用户的时候如果没有之指定组的情况下，会创建一个和用户名相同的组</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305223857.png" alt="image-20210305223857100"></p></li></ol><blockquote><p>1.如果组里面由用户则不能删除该组</p></blockquote><h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306111601.png" alt="image-20210306111601488"></p><blockquote><p>EX：从运行级别 5 到 3（无图形界面）</p><p>远程登录也可以切换运行级别</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306111747.png" alt="image-20210306111747183"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306111807.png" alt="image-20210306111807496"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306112725.png" alt="image-20210306112725437"></p><p>即：</p><ul><li><p>查看运行级别：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306113318.png" alt="image-20210306113318875"></p></li><li><p>改变运行级别</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default 运行级别</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306113623.png" alt="image-20210306113623337"></p></li></ul><blockquote><p>重启之后</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306113749.png" alt="image-20210306113749455"></p><blockquote><p>接下来的每次重启都是进去 <strong>运行级别3</strong></p></blockquote><blockquote><p>注：如果切到无图形化界面（运行级别3）登入不进去root，别使用数字小键盘输入密码（没解锁）</p></blockquote><h3 id="找回-Root-密码"><a href="#找回-Root-密码" class="headerlink" title="找回 Root 密码"></a>找回 Root 密码</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306114720.png" alt="image-20210306114720030"></p><ol><li><p>在启动界面按 “e”</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115133.png" alt="image-20210306115133787"></p></li><li><p>找到这一行，后面加上 </p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init=/bin/sh</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115416.png" alt="image-20210306115415954"></p></li><li><p>然后 Ctrl + X 进入 <strong>单用户模式</strong></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115716.png" alt="image-20210306115716957"></p></li><li><p>然后在光标闪烁的位置输入下面命令，然后回车</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115946.png" alt="image-20210306115946548"></p></li><li><p>然后输入下面命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p> 然后回车输入密码，然后回车后在此输入密码即可</p><p> 显示 passwd…..的样式表示密码修改成功</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306120301.png" alt="image-20210306120301149"></p></li><li><p>然后，在光标闪烁的位置输入下面命令并回车</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /.autorelabel</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306120716.png" alt="image-20210306120716723"></p></li><li><p>接着在光标闪烁的位置输入下面命令并回车，等待系统自动修改密码，时间可能有点长，完成后，<strong>系统会自动重启</strong>，新的密码生效</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec /sbin/init</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306121042.png" alt="image-20210306121042837"></p></li></ol><blockquote><p>远程是无法修改 ROOT 密码的</p></blockquote><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><ol><li><p>man</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306122022.png" alt="image-20210306122022393"></p></li><li><p>help</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306122220.png" alt="image-20210306122220652"></p></li></ol><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><ol><li><p><strong>pwd</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">pwd// 绝对路径</span><br></pre></td></tr></table></figure></li><li><p><strong>ls</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ls// 显示文件</span><br><span class="line">ls -a// 显示文件包括隐藏文件</span><br><span class="line">ls -l// 列表显示</span><br><span class="line">ls -al// 列表显示包括隐藏文件</span><br></pre></td></tr></table></figure></li><li><p><strong>cd</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> 参数</span></span><br><span class="line">cd ~// 回到当前用户的家目录</span><br><span class="line">cd ..// 回到上一级目录</span><br><span class="line">cd /// 回到根目录</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306123636.png" alt="image-20210306123636827"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306123837.png" alt="image-20210306123837454"></p></li><li><p><strong>mkdir</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：mkdir [选项] 要创建的目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个目录</span></span><br><span class="line">mkdir /home/dog// 在home目录下创建dog目录此时要求home目录存在，不存在创建不成功</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建多级目录</span></span><br><span class="line">mkdir -p /homg/animal/tiger // 此时animal不存在也可以创建</span><br></pre></td></tr></table></figure></li><li><p><strong>rmdir</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rmdir</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：rmdir [选项] 要删除的目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一个空目录</span></span><br><span class="line">rmdir /home/dog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一个非空目录</span></span><br><span class="line">rm -rf /home/animal// -r递归删除 -f强制删除不提示</span><br></pre></td></tr></table></figure></li><li><p><strong>touch</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> touch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：touch 文件名称</span></span><br></pre></td></tr></table></figure></li><li><p><strong>cp</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：cp [选项] <span class="built_in">source</span> dest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项：</span></span><br><span class="line">-r 递归复制整个文件夹</span><br><span class="line"> cp 待拷贝文件或目录 目标目录</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306144150.png" alt="image-20210306144150611"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307104508202.png" alt="image-20210307104508202"></p></li><li><p><strong>rm</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：rm [选项] 要删除的文件或目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r : 递归删除整个文件夹</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-f : 强制删除不提示</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306144822.png" alt="image-20210306144822657"></p></li><li><p><strong>mv</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> - 重命名：mv oldNameFile newNameFile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> - 移动文件：mv 需要移动的文件 新目录</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306150040.png"></p></li><li><p><strong>cat</strong> 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：cat [选项] 要查看的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项：</span> </span><br><span class="line">-n : 显示行号</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306150602.png" alt="image-20210306150602105"></p></li><li><p><strong>more</strong>指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306150832.png" alt="image-20210306150832346"></p></li><li><p><strong>less</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306151312.png" alt="image-20210306151312166"></p></li><li><p><strong>echo</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306151712.png" alt="image-20210306151712696"></p></li><li><p><strong>head</strong> 指令：默认显示文章前 10 行内容</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306151803.png" alt="image-20210306151803333"></p></li><li><p><strong>tail</strong> 指令（可用于查看日志）：默认显示文章尾部 10 行内容</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306152608.png" alt="image-20210306152608431"></p></li><li><p>输出重定向 &gt; 、追加 &gt;&gt; </p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306154519.png" alt="image-20210306154519310" style="zoom:67%;" /></li><li><p><strong>ln</strong> 指令：类似 win 下的快捷方式</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306155745.png" alt="image-20210306155744984" style="zoom:67%;" /></li><li><p><strong>history</strong> 指令</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306160338.png" alt="image-20210306160338094" style="zoom:80%;" /></li></ol><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><ol><li><p><strong>date</strong> 指令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210306161041315.png" alt="image-20210306161041315" style="zoom:80%;" /><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306161315.png" alt="image-20210306161315365"  /></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306161315.png" alt="image-20210306161315365"></p></li><li><p><strong>cal</strong> 指令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306162743.png" alt="image-20210306162743111"></p></li></ol><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><ol><li><p><strong>find</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307092050298.png" alt="image-20210307092050298"></p></li><li><p><strong>locate</strong> 指令</p><blockquote><p>先执行    updatedb</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307093152625.png" alt="image-20210307093152625"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307093006554.png" alt="image-20210307093006554"></p></li><li><p><strong>which</strong> 指令</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307093239429.png" alt="image-20210307093239429" style="zoom:80%;" /></li><li><p><strong>grep</strong> 指令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307094109097.png" alt="image-20210307094109097"></p></li></ol><h3 id="压缩解压类"><a href="#压缩解压类" class="headerlink" title="压缩解压类"></a>压缩解压类</h3><ol><li><p><strong>gzip、gunzip</strong> 指令：用于解压缩文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307095058029.png" alt="image-20210307095058029"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307113211890.png" alt="image-20210307113211890"></p></li><li><p><strong>zip、unzip</strong> 指令：可压缩文件和目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 小结</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不指定路径写法,压缩的和解压的文件都保存在当前用户所在的目录</span></span><br><span class="line">zip -r 要压缩的目录</span><br><span class="line">unzip 要解压的xxx.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定路径写法</span></span><br><span class="line">zip -r 指定目录/xxx.zip 要压缩的目录</span><br><span class="line">unzip -d 要解压到的目录 要解压的xxx.zip</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果要压缩 /home/TEST 目录下的东西，不包含home</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这样写的话会把home也压缩进去，包含了home</span></span><br><span class="line">zip -r 存放的目录/xxx.zip /home/TEST</span><br><span class="line"><span class="meta">#</span><span class="bash"> 正确做法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先进去到/home目录下，下面这样压缩就不会把home也压进去</span></span><br><span class="line">zip -r 存放的目录/xxx.zip TEST</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307101003499.png" alt="image-20210307101003499"></p><blockquote><p>当一个文件夹里面有文件的时候，压缩的时候要使用 <strong>zip -r xxx.zip 要压缩的文件夹</strong></p><p>不使用 -<strong>r</strong> 就会只是压缩一个目录，里面的东西进不去</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307114913350.png" alt="image-20210307114913350"></p></li><li><p><strong>tar</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307101914850.png" alt="image-20210307101914850"></p></li></ol><h2 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h2><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><ul><li>每一个用户必须属于一个组，不能独立于组外</li><li>每一个文件有三个概念<ul><li>所有者：一般是创建者</li><li>所在组：这个文件属于哪一个组，那么这个组里面的用户就对这个文件拥有一定的权限</li><li>其他组：不包含该文件的组称为其他组，其他组也对该文件有一定的权限</li></ul></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315143039233.png" alt="image-20210315143039233"></p><h3 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件/目录 所有者"></a>文件/目录 所有者</h3><ol><li><p>查看文件的所有者</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315144306094.png"></p></li><li><p>修改文件所有者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315144819594.png" alt="image-20210315144819594"></p></li></ol><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315145114126.png" alt="image-20210315145114126"></p><h3 id="文件-目录-所在组"><a href="#文件-目录-所在组" class="headerlink" title="文件/目录 所在组"></a>文件/目录 所在组</h3><blockquote><p>查看文件/目录所在的组：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><blockquote><p>修改文件所在组：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp 组名 文件名</span><br></pre></td></tr></table></figure><blockquote><p>EX：修改文件所在组，目录同理</p></blockquote><ol><li>先创建一个组 <strong>game</strong></li><li>然后使用 <strong>root</strong> 用户创建文件 <strong>SuperMary.txt</strong></li><li>查看这个文件属于哪个组 -&gt; root</li><li>chgrp game SuperMary.txt</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315152901935.png" alt="image-20210315152901935"></p><h3 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h3><p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其它组</p><h3 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h3><blockquote><p>查看用户所在组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315153902204.png" alt="image-20210315153902204"></p><blockquote><p>查看组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否有mojiao这个组</span></span><br><span class="line">cat /etc/group | grep mojiao</span><br></pre></td></tr></table></figure><p>没有组则没有输出</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315153730082.png" alt="image-20210315153730082"></p><blockquote><p>改变用户所在组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 新组名 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变该用户登录的初始目录。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明：用户需要有进入到新目录的权限</span></span><br><span class="line">usermod -d 目录名 用户名</span><br></pre></td></tr></table></figure><h3 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree</title>
      <link href="2021/03/03/Tree/"/>
      <url>2021/03/03/Tree/</url>
      
        <content type="html"><![CDATA[<hr>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二下资料推荐-仅个人推荐</title>
      <link href="2021/02/28/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E8%AE%A1%E7%A7%91/"/>
      <url>2021/02/28/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E8%AE%A1%E7%A7%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>仅仅个人推荐，具体看个人风格喜好</p><p>更新中……..</p></blockquote><hr><h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h1><h4 id="宋浩：链接点我"><a href="#宋浩：链接点我" class="headerlink" title="宋浩：链接点我"></a>宋浩：<a href="https://www.bilibili.com/video/BV1ot411y7mU?from=search&seid=2168626853685641685">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213650.png" alt="image-20210228213649383"></p><h4 id="小元老师：链接点我"><a href="#小元老师：链接点我" class="headerlink" title="小元老师：链接点我"></a>小元老师：<a href="https://www.bilibili.com/video/BV1jx411j7D2?from=search&seid=8435947249358168956">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213725.png" alt="image-20210228213724547"></p><h4 id="张宇：链接点我"><a href="#张宇：链接点我" class="headerlink" title="张宇：链接点我"></a>张宇：<a href="https://www.bilibili.com/video/BV1ht4y127Di?from=search&seid=2924702569977120632">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213743.png" alt="image-20210228213742651"></p><h4 id="汤家凤："><a href="#汤家凤：" class="headerlink" title="汤家凤："></a>汤家凤：</h4><blockquote><p>B站找不到了，百度网盘(/手动滑稽)</p></blockquote><blockquote><p>基础：</p></blockquote><p>​    链接：<a href="https://pan.baidu.com/s/16N6dx9X3jiKVyieJ5j8G1g">https://pan.baidu.com/s/16N6dx9X3jiKVyieJ5j8G1g</a><br>​    提取码：1502 </p><blockquote><p>强化</p></blockquote><p>​    链接：<a href="https://pan.baidu.com/s/1iuARPXy7AzHdrVROBg2bjQ">https://pan.baidu.com/s/1iuARPXy7AzHdrVROBg2bjQ</a><br>​    提取码：1502 </p><h4 id="链接点我"><a href="#链接点我" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1D741147G5?from=search&seid=2924702569977120632">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213610.png" alt="image-20210228213608583"></p><hr><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h4 id="链接点我-1"><a href="#链接点我-1" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV18741137LS?from=search&seid=11596163788937283321">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214110.png" alt="image-20210228214107983"></p><h4 id="链接点我-2"><a href="#链接点我-2" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV18y4y1i73U?from=search&seid=8655198875770633733">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214443.png" alt="image-20210228214442389"></p><h4 id="链接点我-3"><a href="#链接点我-3" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1Zt411s7M5?from=search&seid=10029919934495247865">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214539.png" alt="image-20210228214538027"></p><h4 id="链接点我-4"><a href="#链接点我-4" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1d4411v7u7?from=search&seid=5595939272444640769">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214631.png" alt="image-20210228214629527"></p><hr><h1 id="算法设计与分析"><a href="#算法设计与分析" class="headerlink" title="算法设计与分析"></a>算法设计与分析</h1><blockquote><p>这个课内容连接性没那么强，可以单独搜课看，如动态规划DP、分治、贪心等都可以单独搜到</p></blockquote><h4 id="链接点我-5"><a href="#链接点我-5" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1SK4y1h7Fr?from=search&seid=8036636488986225083">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214748.png" alt="image-20210228214747175"></p><h4 id="这个课算法有点全，可以挑书上的内容看：链接点我"><a href="#这个课算法有点全，可以挑书上的内容看：链接点我" class="headerlink" title="这个课算法有点全，可以挑书上的内容看：链接点我"></a>这个课算法有点全，可以挑书上的内容看：<a href="https://www.bilibili.com/video/BV1b54y1s74e?from=search&seid=15547804202715834535">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214837.png" alt="image-20210228214835847"></p><h4 id="左神（左程云）的课比较进阶：链接点我"><a href="#左神（左程云）的课比较进阶：链接点我" class="headerlink" title="左神（左程云）的课比较进阶：链接点我"></a>左神（左程云）的课比较进阶：<a href="https://www.bilibili.com/video/BV16K4y157vm?from=search&seid=16946141245414692079">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214929.png" alt="image-20210228214927659"></p><hr><h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><blockquote><p>暂时还没</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WXY</title>
      <link href="2021/02/26/WXY/"/>
      <url>2021/02/26/WXY/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7a27f90f4aefc7c66f6821a94f56db0f85bd3f3fa81a2ed3ca927445087403a3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> wxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些设置</title>
      <link href="2021/02/25/%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/02/25/%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="状态栏显秒"><a href="#状态栏显秒" class="headerlink" title="状态栏显秒"></a>状态栏显秒</h1><ol><li><p>打开注册表 regedit</p></li><li><p>找到路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced</span><br></pre></td></tr></table></figure></li><li><p>新建 <strong>DWORD(32位)值(D)</strong> 并命名为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ShowSecondsInSystemClock</span><br></pre></td></tr></table></figure><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210312124805158.png" alt="image-20210312124805158" style="zoom:80%;" /></li><li><p>然后修改值为 1 </p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210312125115087.png" alt="image-20210312125115087"></p></li><li><p>然后重新打开 <strong>Windows资源管理器</strong> 生效</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210312125254917.png" alt="image-20210312125254917"></p></li></ol><h1 id="共享文件夹一些问题"><a href="#共享文件夹一些问题" class="headerlink" title="共享文件夹一些问题"></a>共享文件夹一些问题</h1><ol><li><p>在控制面板打开了网络共享功能</p></li><li><p>然后去 <strong>计算机管理</strong> 设置 <strong>guest</strong> 账户密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210313122903788.png" alt="image-20210313122903788"></p><blockquote><p>然后在 win7 的 Administrator 账户下进去出现如下情况</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210313123030495.png" alt="image-20210313123030495"></p><blockquote><p>刚开始以为是 Administrator 账户的原因，换了一个账户也是同样的情况</p></blockquote></li><li><p>解决方法</p><ul><li>Guest 的账户已禁用不打勾</li></ul><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210313130748374.png" alt="image-20210313130748374" style="zoom:80%;" /></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Topic-LinkedList</title>
      <link href="2021/02/22/Topic%20LinkedList/"/>
      <url>2021/02/22/Topic%20LinkedList/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>面试时链表解题方法论</p><ol><li>对于笔试：不用太在乎空间复杂度，一切为了时间复杂度</li><li>对于面试：时间复杂度依然放在第一位，但是一定要找到空间最省的方法</li></ol><p>重要技巧</p><ul><li>额外数据结构记录（哈希表、队列、栈等）</li><li>快慢指针</li></ul></blockquote><hr><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode : 相交链表的一系列问题    </button><div class="hide-content"><p>==</p><h1 id="Topic-相交链表的一系列问题"><a href="#Topic-相交链表的一系列问题" class="headerlink" title="Topic-相交链表的一系列问题"></a>Topic-相交链表的一系列问题</h1><blockquote><p>题目：给定一个可能有环也可能无环的单链表，头结点 head1 和 head2。实现一个函数，如果两个链表相交，请返回相交的第一个节点。如果不想交，返回 null</p><p>要求：如果两个链表长度之和为 N，时间复杂度达到 O(N)，额外空间复杂度达到O(1)</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>相交的第一个节点是指都指向同一个节点（地址相同的节点）</p></li><li><p>由于单链表不确定是否有环，所以首先要做出判断</p></li><li><p>一共有3中可能</p><ol><li><p>head1, head2    都无环</p><ul><li><p>遍历链表求的尾节点和长度</p></li><li><p>比较尾节点是否相同，不同则不相交，相同继续下面</p></li><li><p>然后让长链表先走长度差值( |len1 - len2| )，然后两者一起走</p></li><li><p>之后两者相交的节点就是第一个相交的节点</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302180033.png" alt="image-20210302180031417" style="zoom: 50%;" /></li></ul></li><li><p>head1, head2     中一个为环一个不为环</p><p> 没有这种可能</p></li><li><p>head1, head2    都有环，且入环节点为 loop1,loop2</p><ul><li><p>如果 loop1 == loop2，那么将loop1和loop2看成尾节点，因为共用环环长度一样，回到第一种情况</p></li><li><p>如果 loop1 != loop2，如何区分第一三种</p><ul><li>loop1 继续遍历一圈，看是否能遇到 loop2</li><li>没遇到则是第一种情况，返回 null</li><li>遇到则是第三者情况，返回 loop1 或 loop2。loop1 和 loop2 都是第一个相交节点</li></ul><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302180752.png" alt="image-20210302180748867" style="zoom:50%;" /></li></ul></li></ol></li></ul><h3 id="判断是否有环"><a href="#判断是否有环" class="headerlink" title="判断是否有环"></a>判断是否有环</h3><blockquote><p>要如何知道一个单链表有环并且进一步知道入环节点？</p></blockquote><p>可用<strong>快慢指针</strong>确定单链表是否有环</p><ol><li><p>slow慢指针，fast快指针，都让它们指向单链表 head</p></li><li><p>快指针一次走两步，慢指针一次走一步</p></li><li><p>如果有环的情况下，快指针会先进入环，但此时不知道哪个是入环节点</p><p> 如果无环快指针会有指向 null 的情况</p></li><li><p>如有环，慢指针后来进入环，然后快慢指针都在环中。所以他们两个必定会相遇</p><ul><li>并且慢指针最多走  N(环的节点数) - 1 步(&lt;1圈) 就可与快指针相遇</li><li>快指针最多走小于两圈即可相遇</li></ul></li><li><p>相遇则表示该单链表是有环</p></li></ol><blockquote><p>那么如何找到入环节点</p></blockquote><p><strong>在上面 快慢指针在环中的某个地方相遇，然后将快指针指向 head，然后快慢指针每次都只走一步，下一个相遇的节点就是入环节点</strong></p><p>证明：</p><ol><li><p>先看下快慢指针的追赶</p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302155911.png" alt="image-20210302155910059" style="zoom: 67%;" /><p> 此时以 fast 为原点，向右为正，设 slow 走了 k 步相遇，初始 fast slow 相距 n 个节点（不包括本身）</p><p> 追上只需要满足 2k + n + 1 = k </p><p> k = n + 1 (也就是快慢指针的间距数)</p><p> 所以追上的步数 = 相距数</p></li><li><p>未完待续</p></li></ol><blockquote><p>code</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断单链表是否有环，有返回入环节点，无返回 null</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">getLoopNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode fast = head.next.next;</span><br><span class="line">    ListNode slow = head.next;</span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;  <span class="comment">// 相遇跳出</span></span><br><span class="line">        <span class="comment">// 遍历到末尾都还不相遇</span></span><br><span class="line">        <span class="keyword">if</span> (fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast = head;    <span class="comment">// 快指针重新指向头结点</span></span><br><span class="line">    <span class="comment">// 都走一步 相遇的节点即为入环节点</span></span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol><li><p>都无环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都无环情况</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">noLoop</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">    ListNode cur1 = head1;</span><br><span class="line">    ListNode cur2 = head2;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cur2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        len--;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不相交</span></span><br><span class="line">    <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 相交</span></span><br><span class="line">    <span class="comment">// cur1 指向长链表   cur2 指向短链表</span></span><br><span class="line">    cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">    cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">    len = Math.abs(len);</span><br><span class="line">    <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>都有环</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都有环</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">bothLoop</span><span class="params">(ListNode head1, ListNode loop1, ListNode head2, ListNode loop2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 相交并且相交点不在环上</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">        ListNode cur1 = head1;</span><br><span class="line">        ListNode cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">            len--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        len = Math.abs(len);</span><br><span class="line">        <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 相交且在环上 或 不相交</span></span><br><span class="line">        ListNode tmp = loop1.next;</span><br><span class="line">        <span class="keyword">while</span> (tmp != loop1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp == loop2) &#123; <span class="comment">// 相交且在环上</span></span><br><span class="line">                <span class="keyword">return</span> loop1;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不相交</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最后合并</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一起处理三种情况</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode loop1 = getLoopNode(head1);</span><br><span class="line">    ListNode loop2 = getLoopNode(head2);</span><br><span class="line">    <span class="comment">// 都无环</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == <span class="keyword">null</span> &amp;&amp; loop2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> noLoop(head1, head2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 都有环</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 != <span class="keyword">null</span> &amp;&amp; loop2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> bothLoop(head1, loop1, head2, loop2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有一个无环或有环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试Code"><a href="#测试Code" class="headerlink" title="测试Code"></a>测试Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: minghuifan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/2 - 16:13</span></span><br><span class="line"><span class="comment"> * @ Description: LinkedList</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">intersectLinkedList_</span>相交链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断单链表是否有环，有返回入环节点，无返回 null</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">getLoopNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode fast = head.next.next;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;  <span class="comment">// 相遇跳出</span></span><br><span class="line">            <span class="comment">// 遍历到末尾都还不相遇</span></span><br><span class="line">            <span class="keyword">if</span> (fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;    <span class="comment">// 快指针重新指向头结点</span></span><br><span class="line">        <span class="comment">// 都走一步 相遇的节点即为入环节点</span></span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都无环情况</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">noLoop</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        ListNode cur1 = head1;</span><br><span class="line">        ListNode cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不相交</span></span><br><span class="line">        <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相交</span></span><br><span class="line">        <span class="comment">// cur1 指向长链表   cur2 指向短链表</span></span><br><span class="line">        cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        len = Math.abs(len);</span><br><span class="line">        <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都有环</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">bothLoop</span><span class="params">(ListNode head1, ListNode loop1, ListNode head2, ListNode loop2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相交并且相交点不在环上</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">            ListNode cur1 = head1;</span><br><span class="line">            ListNode cur2 = head2;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                len++;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">                len--;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">            cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">            len = Math.abs(len);</span><br><span class="line">            <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 相交且在环上 或 不相交</span></span><br><span class="line">            ListNode tmp = loop1.next;</span><br><span class="line">            <span class="keyword">while</span> (tmp != loop1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp == loop2) &#123; <span class="comment">// 相交且在环上</span></span><br><span class="line">                    <span class="keyword">return</span> loop1;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一起处理三种情况</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode loop1 = getLoopNode(head1);</span><br><span class="line">        ListNode loop2 = getLoopNode(head2);</span><br><span class="line">        <span class="comment">// 都无环</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == <span class="keyword">null</span> &amp;&amp; loop2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noLoop(head1, head2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 都有环</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 != <span class="keyword">null</span> &amp;&amp; loop2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bothLoop(head1, loop1, head2, loop2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有一个无环或有环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head1 = <span class="keyword">null</span>;</span><br><span class="line">        head1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head1.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head1.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head1.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head1.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        head1.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line"><span class="comment">//        head1.next.next.next.next.next.next = new ListNode(7);</span></span><br><span class="line">        head1.next.next.next.next.next.next = head1.next.next.next;</span><br><span class="line"></span><br><span class="line">        ListNode head2 = <span class="keyword">null</span>;</span><br><span class="line">        head2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head2.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head2.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head2.next.next.next = head1.next;</span><br><span class="line"><span class="comment">//        head2.next.next.next = new ListNode(4);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next = new ListNode(5);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next.next = new ListNode(6);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next.next.next = new ListNode(7);</span></span><br><span class="line">        System.out.println(getIntersectionNode(head1, head2).val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ol><li><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表</a></li></ol><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302194418.png" alt="image-20210302194416667" style="zoom:80%;" /><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302193429.png" alt="image-20210302193428117" style="zoom: 67%;" /><ol start="2"><li><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></li></ol><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302193725.png" alt="image-20210302193724527" style="zoom: 67%;" /><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302194231.png" alt="image-20210302194230558" style="zoom: 67%;" /><ol start="3"><li><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302195203.png" alt="image-20210302195159580" style="zoom:80%;" /> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302195143.png" alt="image-20210302195138072" style="zoom:67%;" /></li></ol></div></div></p><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode:判断一个链表是否为回文结构    </button><div class="hide-content"><p>==</p><h1 id="Topic-判断一个链表是否为回文结构"><a href="#Topic-判断一个链表是否为回文结构" class="headerlink" title="Topic-判断一个链表是否为回文结构"></a>Topic-判断一个链表是否为回文结构</h1><p>题目：给定一个单链表头结点 head，请判断该链表是否为回文结构</p><p>例子：1-&gt;2-&gt;1，返回true；1-&gt;2-&gt;2-&gt;1，返回true；1-&gt;2-&gt;3，返回false。</p><p>要求：如果链表长度为N，时间复杂度达到 O(N)，额外空间复杂度达到 O(1)</p><h3 id="分析：三种常见方法"><a href="#分析：三种常见方法" class="headerlink" title="分析：三种常见方法"></a><strong>分析：三种常见方法</strong></h3><ul><li><p>压入栈中，然后遍历同时弹栈，看节点内容是否想等</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210217172005.png" alt="image-20210217172004608"></p></li><li><p>和第一种一样不过只让链表后半部分压栈，然后遍历比对</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210217171849.png" alt="image-20210217171843199"></p></li><li><p>第三种：<br>  step1：先用快慢指针（slow、fast）找到中点（偶数为对称轴前一个，奇数即为中点）</p><p>  step2：然后将后面的链表反转：</p><p>  ​            1）偶数时：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6<br>  ​            2）奇数时：1 -&gt; 2 -&gt; 3 -&gt; 4 &lt;- 5 &lt;- 6 &lt;- 7<br>  step3：然后分别遍历左右链表比对即可得出结果<br>  step4：别忘了将链表复原</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210217193140.png" alt="image-20210217191654589"></p></li></ul><h4 id="法一：链表全部压栈"><a href="#法一：链表全部压栈" class="headerlink" title="法一：链表全部压栈"></a>法一：链表全部压栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把整个链表压栈，然后遍历链表和弹栈结果是否一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    ListNode tmp = head;</span><br><span class="line">    <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(tmp);</span><br><span class="line">        tmp = tmp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; stack.pop().val == head.val) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head == <span class="keyword">null</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="法二：一半压栈"><a href="#法二：一半压栈" class="headerlink" title="法二：一半压栈"></a>法二：一半压栈</h4><p>如何找到中点：快慢指针 /slow/fast，条件如何取。有三种常见初始状态（但至少要两个节点）</p><ol><li><strong>slow = fast = head</strong>：都指向头结点</li><li><strong>slow = head; fast = head.next;</strong> ：慢指向头结点，快指向第二节点</li><li><strong>slow = head.next; fast = head;</strong> ：慢指向第二节点，快指向头结点</li></ol><blockquote><p>然后依次讨论判断的条件是 ==<strong>fast.next!= null &amp;&amp; fast.next.next != null</strong>==</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = fast = head; 时</span><br><span class="line"></span><br><span class="line">EX1: 1 2开始都指向第 1</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX2: 1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向2</span><br><span class="line">指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴前一个</span><br><span class="line"></span><br><span class="line">EX4: 1 2 3</span><br><span class="line">fast可以走1步，slow指向2</span><br><span class="line">指向中点位置</span><br><span class="line"> </span><br><span class="line">EX5: 1 2 3 4 5</span><br><span class="line">fast可以走2步，slow指向3</span><br><span class="line">指向中点位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走3步，slow指向4</span><br><span class="line">指向中点位置</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = head; fast = head.next; 时</span><br><span class="line"></span><br><span class="line">EX1:链表：1 2slow指向1，fast指向2</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">然后此时指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX2:链表：1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向2</span><br><span class="line">也是指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴前一个</span><br><span class="line"></span><br><span class="line">EX4:链表：1 2 3</span><br><span class="line">fast可以走0步，slow指向1</span><br><span class="line">指向中点前一个位置</span><br><span class="line"> </span><br><span class="line">EX5:链表：1 2 3 4 5</span><br><span class="line">fast可以走1步，slow指向2</span><br><span class="line">指向中点前一个位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">指向中点位置前一个位置</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = head.next; fast = head; 时</span><br><span class="line"> </span><br><span class="line">EX1:链表：1 2slow指向2，fast指向1</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">然后此时指向对称轴后一个</span><br><span class="line"></span><br><span class="line">EX2:链表：1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向3</span><br><span class="line">也是指向对称轴后一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴后一个</span><br><span class="line"></span><br><span class="line">EX4:链表：1 2 3</span><br><span class="line">fast可以走1步，slow指向3</span><br><span class="line">指向中点后一个位置</span><br><span class="line"> </span><br><span class="line">EX5:链表：1 2 3 4 5</span><br><span class="line">fast可以走2步，slow指向4</span><br><span class="line">指向中点后一个位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走3步，slow指向5</span><br><span class="line">指向中点后一个位置</span><br></pre></td></tr></table></figure><blockquote><p>最后得出结论：判断条件是 ==<strong>fast.next!= null &amp;&amp; fast.next.next != null</strong>==</p><ol><li><p>slow = fast = head;</p><p>偶数：对称轴前一个</p><p>奇数：中点</p></li><li><p>slow = head; fast = head.next;</p><p>偶数：对称轴前一个</p><p>奇数：中点前一个</p></li><li><p>slow = head.next; fast = head; </p><p>偶数：对称轴后一个</p><p>奇数：中点后一个</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 很容易得出，我们需要后一半压栈所以选择第三种快慢指针方案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome2</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时slow指向中点或者对称轴的下一个</span></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(slow);</span><br><span class="line">            System.out.print(slow.val + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != stack.pop().val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="法三："><a href="#法三：" class="headerlink" title="法三："></a>法三：</h4><p>这里需要用到反转链表的模板，模板如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入 head 为链表的头结点</span></span><br><span class="line">ListNode pre = head;<span class="comment">// 即指向头结点</span></span><br><span class="line">ListNode last = head.next;<span class="comment">// 即指向头结点下一个</span></span><br><span class="line">ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">pre.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (last != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tmp = last.next;</span><br><span class="line">        last.next = pre;</span><br><span class="line">        pre = last;</span><br><span class="line">        last = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 最后循环完后的结果是 pre 指向反转的首节点，last、tmp 指向 null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 用偶数个举例，如链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome3</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step1：找到中点位置，偶数为对称轴前一个，奇数为中点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step2：反转后半部分链表</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向中点或者对称轴的前一个，也就是相当于反转部分的头结点</span></span><br><span class="line">        <span class="comment">// 即 slow 指向 3，接下来要反转后面部分得到：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6</span></span><br><span class="line">        fast = slow.next;</span><br><span class="line">        ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = slow; <span class="comment">// 指向最后一个节点（或者后部分链表的头结点）这里后面会用到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step3：将两边链表分别遍历比对</span></span><br><span class="line">        <span class="comment">// 此时slow指向反转链表的首节点，也就是原链表的最后一个</span></span><br><span class="line">        <span class="comment">// 1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6 slow 指向 6</span></span><br><span class="line">        <span class="comment">// 然后我们依次遍历两边的链表</span></span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">boolean</span> ans = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; slow != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.print(&quot;fast:&quot; + fast.val + &quot;,slow:&quot; + slow.val + &quot;\n&quot;);</span></span><br><span class="line">            <span class="keyword">if</span> (fast.val != slow.val) &#123;</span><br><span class="line">                ans = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step4：链表复原</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向 3，fast 指向 null</span></span><br><span class="line">        <span class="comment">// 如果是奇数个 slow、fast 都指向 null，所以要重新赋值</span></span><br><span class="line">        slow = tmp;</span><br><span class="line">        fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="测试-code"><a href="#测试-code" class="headerlink" title="测试 code"></a>测试 code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/2/10 - 13:19</span></span><br><span class="line"><span class="comment"> * @ Description: LinkedList</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// https://leetcode-cn.com/problems/palindrome-linked-list-lcci/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">isPalindromeLinkedList_</span>回文链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkedList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Linked List: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把整个链表压栈，然后遍历链表和弹栈结果是否一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ListNode tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(tmp);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; stack.pop().val == head.val) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head == <span class="keyword">null</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 半个链表压栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome2</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时slow指向中点或者对称轴的下一个</span></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(slow);</span><br><span class="line"><span class="comment">//            System.out.print(slow.val + &quot;_&quot;);</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != stack.pop().val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用偶数个举例，如链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome3</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step1：找到中点位置，偶数为对称轴前一个，奇数为中点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step2：反转后半部分链表</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向中点或者对称轴的前一个，也就是相当于反转部分的头结点</span></span><br><span class="line">        <span class="comment">// 即 slow 指向 3，接下来要反转后面部分得到：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6</span></span><br><span class="line">        fast = slow.next;</span><br><span class="line">        ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = slow; <span class="comment">// 指向最后一个节点（或者后部分链表的头结点）这里后面会用到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step3：将两边链表分别遍历比对</span></span><br><span class="line">        <span class="comment">// 此时slow指向反转链表的首节点，也就是原链表的最后一个</span></span><br><span class="line">        <span class="comment">// 1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6 slow 指向 6</span></span><br><span class="line">        <span class="comment">// 然后我们依次遍历两边的链表</span></span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">boolean</span> ans = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; slow != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.print(&quot;fast:&quot; + fast.val + &quot;,slow:&quot; + slow.val + &quot;\n&quot;);</span></span><br><span class="line">            <span class="keyword">if</span> (fast.val != slow.val) &#123;</span><br><span class="line">                ans = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step4：链表复原</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向 3，fast 指向 null</span></span><br><span class="line">        <span class="comment">// 如果是奇数个 slow、fast 都指向 null，所以要重新赋值</span></span><br><span class="line">        slow = tmp;</span><br><span class="line">        fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line">Linked List: </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></div></p><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode : 86.分隔链表    </button><div class="hide-content"><p>==</p><h1 id="Topic-86-分隔链表"><a href="#Topic-86-分隔链表" class="headerlink" title="Topic-86.分隔链表"></a>Topic-86.分隔链表</h1><p>链接：<a href="https://leetcode-cn.com/problems/partition-list/">分隔链表</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222183948.png" alt="image-20210222183946741"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>创建4个变量</p><p>sH/sT：指向小于给出节点的第一个/指向最后一个<br>bH/bT：指向非小于给出节点的第一个/指向最后一个</p></blockquote><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222215234.png" alt="image-20210222215233691"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">    ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">    ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的头</span></span><br><span class="line">    ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的尾</span></span><br><span class="line">    <span class="comment">// 为了每一步的尾指针的next都指向null，为后续方便</span></span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        next = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sH = head;</span><br><span class="line">                sT = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = head;</span><br><span class="line">                sT = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bH = head;</span><br><span class="line">                bT = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bT.next = head;</span><br><span class="line">                bT = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此时 sT 和 bT 两者中至少有一个不为空,因此有3种情况</span></span><br><span class="line">    <span class="comment">// 10   11   01</span></span><br><span class="line">    <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> bH;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sT.next = bH;</span><br><span class="line">        <span class="keyword">return</span> sH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="题目进阶"><a href="#题目进阶" class="headerlink" title="题目进阶"></a>题目进阶</h2><p>上面的 LeetCode 的题目等于和大于是归为一边的</p><p>进阶：将 <strong>小于 等于 大于</strong> 分别归为三段处理</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><blockquote><p>还是和刚刚一样的思路</p><p>创建六个变量</p><p>sH/sT：指向小于给出节点的第一个/指向最后一个<br>eH/eT：指向等于给出节点的第一个/指向最后一个<br>bH/bT：指向大于于给出节点的第一个/指向最后一个</p></blockquote><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partitionAdvanced</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode eH = <span class="keyword">null</span>;     <span class="comment">// 指向等于的头</span></span><br><span class="line">        ListNode eT = <span class="keyword">null</span>;     <span class="comment">// 指向等于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向大于的尾</span></span><br><span class="line">        <span class="comment">// 保证每次的sT、eT、bT的next都指向null，为了后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.val == x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    eH = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    eT.next = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一共8种情况</span></span><br><span class="line">        <span class="comment">// 000  100</span></span><br><span class="line">        <span class="comment">// 001  101</span></span><br><span class="line">        <span class="comment">// 010  110</span></span><br><span class="line">        <span class="comment">// 011  111</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> eH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = eH;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (sT != null) &#123;   // 小于部分不为空</span></span><br><span class="line"><span class="comment">//            sT.next = eH;</span></span><br><span class="line"><span class="comment">//            // 如果 eT 为空指向小于头，不为空不处理</span></span><br><span class="line"><span class="comment">//            eT = eT == null ? sT : eT;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (eT != null) &#123;   // 等于部分不为空</span></span><br><span class="line"><span class="comment">//            eT.next = bH;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return sH != null ? sH : eH != null ? eH : bH;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试-code"><a href="#测试-code" class="headerlink" title="测试 code"></a>测试 code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> * ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> * ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://leetcode-cn.com/problems/partition-list/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">partitionList_</span>分隔链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkedList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Linked List: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的尾</span></span><br><span class="line">        <span class="comment">// 为了每一步的尾指针的next都指向null，为后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时 sT 和 bT 两者中至少有一个不为空,因此有3种情况</span></span><br><span class="line">        <span class="comment">// 10   11   01</span></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bH;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sT.next = bH;</span><br><span class="line">            <span class="keyword">return</span> sH;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partitionAdvanced</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode eH = <span class="keyword">null</span>;     <span class="comment">// 指向等于的头</span></span><br><span class="line">        ListNode eT = <span class="keyword">null</span>;     <span class="comment">// 指向等于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向大于的尾</span></span><br><span class="line">        <span class="comment">// 保证每次的sT、eT、bT的next都指向null，为了后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.val == x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    eH = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    eT.next = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一共8种情况</span></span><br><span class="line">        <span class="comment">// 000  100</span></span><br><span class="line">        <span class="comment">// 001  101</span></span><br><span class="line">        <span class="comment">// 010  110</span></span><br><span class="line">        <span class="comment">// 011  111</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> eH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = eH;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (sT != null) &#123;   // 小于部分不为空</span></span><br><span class="line"><span class="comment">//            sT.next = eH;</span></span><br><span class="line"><span class="comment">//            // 如果 eT 为空指向小于头，不为空不处理</span></span><br><span class="line"><span class="comment">//            eT = eT == null ? sT : eT;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (eT != null) &#123;   // 等于部分不为空</span></span><br><span class="line"><span class="comment">//            eT.next = bH;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return sH != null ? sH : eH != null ? eH : bH;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 2));</span></span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 3));</span></span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 3));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表与指针</title>
      <link href="2021/02/18/%E9%93%BE%E8%A1%A8%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>2021/02/18/%E9%93%BE%E8%A1%A8%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a0001e16aac4ec7cbea218e1f1e4854cc3346c48c601c4a0659896c739cd3448"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是“12345678”</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA配置</title>
      <link href="2021/02/18/IDEA%E9%85%8D%E7%BD%AE/"/>
      <url>2021/02/18/IDEA%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><h3 id="设置鼠标滚轮调节字体大小"><a href="#设置鼠标滚轮调节字体大小" class="headerlink" title="设置鼠标滚轮调节字体大小"></a>设置鼠标滚轮调节字体大小</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210205192659.png" alt="image-20210205145421119"></p><h3 id="鼠标悬浮在代码有提示"><a href="#鼠标悬浮在代码有提示" class="headerlink" title="鼠标悬浮在代码有提示"></a>鼠标悬浮在代码有提示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210205192838.png" alt="image-20210205192838603"></p><h3 id="自动导包和优化多余包"><a href="#自动导包和优化多余包" class="headerlink" title="自动导包和优化多余包"></a>自动导包和优化多余包</h3><p>手动导包：Ant + Enter<br>自动导包：<img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210205193817.png" alt="image-20210205193548380"  /></p><h3 id="同一个包下的类，超过指定个数导包合并为"><a href="#同一个包下的类，超过指定个数导包合并为" class="headerlink" title="同一个包下的类，超过指定个数导包合并为 *"></a>同一个包下的类，超过指定个数导包合并为 *</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206105017.png" alt="image-20210206105012613"></p><h3 id="显示行号和方法之间分隔符"><a href="#显示行号和方法之间分隔符" class="headerlink" title="显示行号和方法之间分隔符"></a>显示行号和方法之间分隔符</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206105301.png" alt="image-20210206105259327"></p><h3 id="忽略大小写提示"><a href="#忽略大小写提示" class="headerlink" title="忽略大小写提示"></a>忽略大小写提示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206105455.png" alt="image-20210206105451278"></p><h3 id="多个类不隐藏，多行显示"><a href="#多个类不隐藏，多行显示" class="headerlink" title="多个类不隐藏，多行显示"></a>多个类不隐藏，多行显示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206110014.png" alt="image-20210206110012776"></p><h3 id="设置默认字体，大小，行间距（编辑区和控制台都会变化）"><a href="#设置默认字体，大小，行间距（编辑区和控制台都会变化）" class="headerlink" title="设置默认字体，大小，行间距（编辑区和控制台都会变化）"></a>设置默认字体，大小，行间距（编辑区和控制台都会变化）</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206110331.png" alt="image-20210206110330073"></p><h3 id="修改注释"><a href="#修改注释" class="headerlink" title="修改注释"></a>修改注释</h3><center class = "half"><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206113813.png" width = "464" /><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206114352.png" width = "464" /></center><h3 id="设置类头的文档注释信息"><a href="#设置类头的文档注释信息" class="headerlink" title="设置类头的文档注释信息"></a>设置类头的文档注释信息</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ Author: xxx</span></span><br><span class="line"><span class="comment">* @ Date: $&#123;DATE&#125; - $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* @ Description: $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">* @ Version: 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>   <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206115655.png" alt="image-20210206115654047"></p><h3 id="设置文件编码格式默认全选为-UTF-8"><a href="#设置文件编码格式默认全选为-UTF-8" class="headerlink" title="设置文件编码格式默认全选为 UTF-8"></a>设置文件编码格式默认全选为 UTF-8</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206120422.png" alt="image-20210206120420884"></p><h3 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206120752.png" alt="image-20210206120750786"></p><h3 id="导入-jar-包"><a href="#导入-jar-包" class="headerlink" title="导入 jar 包"></a>导入 jar 包</h3><center class = "half"><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206121029.png" width = "264" /><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206121157.png" width = "664" /></center><h3 id="生成序列化版本号"><a href="#生成序列化版本号" class="headerlink" title="生成序列化版本号"></a>生成序列化版本号</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206121612.png" alt="image-20210206121610845"></p><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>创建内容：Alt + Ins</li><li>main() ：psvm</li><li>复制行：Ctrl + D</li><li>删除行：Ctrl + Y</li><li>代码上/下 移动：Ctrl + Shift + Up/Dn</li><li>收缩类：Ctrl + N</li><li>生成代码：Alt + Ins (如构造器, hashcode)</li><li>百能快捷键：Alt + Enter （导包，生成变量等）</li><li>单行注释或者多行注释：Ctrl + / 、Ctrl + Shift + /</li><li>重命名：Shift + F6</li><li>for循环：fori</li><li>代码块包围：Ctrl + Alt + T</li><li>自动补全提示：Alt + /<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206124238.png" alt="image-20210206124236220"></li><li>代码一层层调用：<br>点进源码：Ctrl + 鼠标悬浮 + 点进去<br>左右回退：<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206124647.png" alt="image-20210206124646882"></li><li></li><li>显示代码结构：Alt + 7</li><li>显示导航：Alt + 1</li></ol><h1 id="Clion"><a href="#Clion" class="headerlink" title="Clion"></a>Clion</h1><h2 id="运行多个-main-函数"><a href="#运行多个-main-函数" class="headerlink" title="运行多个 main() 函数"></a>运行多个 main() 函数</h2><blockquote><p>将 <strong>CMakeLists.txt</strong> 文件写成如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file (GLOB_RECURSE files *.cpp)</span><br><span class="line">foreach (file $&#123;files&#125;)</span><br><span class="line">    string(REGEX REPLACE &quot;.+/(.+)/(.+)\\..*&quot; &quot;\\1-\\2&quot; exe $&#123;file&#125;)</span><br><span class="line">    add_executable ($&#123;exe&#125; $&#123;file&#125;)</span><br><span class="line">endforeach ()</span><br></pre></td></tr></table></figure><p>EX：</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210311173629566.png" alt="image-20210311173629566"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-butterfly-记录</title>
      <link href="2021/02/18/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>2021/02/18/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<hr><hr><h1 id="个人博客搭建-Hexo"><a href="#个人博客搭建-Hexo" class="headerlink" title="个人博客搭建 Hexo"></a>个人博客搭建 Hexo</h1><h2 id="一、创建博客"><a href="#一、创建博客" class="headerlink" title="一、创建博客"></a>一、创建博客</h2><blockquote><p>先安装 <strong>git 和 node.js</strong></p></blockquote><blockquote><p>然后在你要保持博客的路径下执行下面命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli   <span class="comment"># 安装hexo</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;<span class="comment"># 安装博客</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;<span class="comment"># 进入到安装博客的路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install<span class="comment"># 安装npm</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218112216.png" alt="image-20210218112210771"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218111819.png" alt="image-20210218111818131"></p><blockquote><p>然后进入到 xiaofanBlog/ 修改文件</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218113450.png" alt="image-20210218113449005" style="zoom:150%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218112801.png" alt="image-20210218112759252"></p><blockquote><p>然后执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ npm install hexo-deployer-git --save</span><br><span class="line">&gt;$ hexo d</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218113755.png" alt="image-20210218113752927"></p></blockquote><p>如果不行重新输入 hexo d</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218114336.png" alt="image-20210218114333983"></p><blockquote><p>上面就已经上传到了github仓库了</p><p>下面就是怎么修改主题</p></blockquote><hr><blockquote><p>如果你没有设置 git 的邮箱和用户名则在</p><p>hexo d 时会出现下面提示</p><p>只需要设置邮箱和用户名即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/tCTxUb8v7EpJXIe.png" alt="image-20210310144318638"></p><h2 id="二、修改主题"><a href="#二、修改主题" class="headerlink" title="二、修改主题"></a>二、修改主题</h2><p>从 hexo<strong>主题</strong> 官网下载主题，直接 git clone 即可</p><p>然后就是把主题放到博客文件夹 themes里面，重命名</p><p>然后在 _config.yml 中修改主题（注意名称要和 themes 里面的主题文件夹一致）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218142237.png" alt="image-20210218142059021"></p><p>保存之后用重新部署一下如图</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218142514.png" alt="image-20210218142512671"  /><p>如果出现了下面这个问题</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218142548.png" alt="image-20210218142546760" style="zoom:80%;" /><p>解决方案输入下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-pug hexo-renderer-stylus --save</span></span><br></pre></td></tr></table></figure><p>清理缓存代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure><hr><h2 id="三、主题美化"><a href="#三、主题美化" class="headerlink" title="三、主题美化"></a>三、主题美化</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n page tags</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">然后找到source/tags/index.md文件</span><br><span class="line">修改为</span><br><span class="line">---</span><br><span class="line">title: 標籤</span><br><span class="line">date: 2018-01-05 00:00:00 # 不动</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">top_img: # 图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n page categories</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">同样找到source/categories/index.md文件</span><br><span class="line">修改为</span><br><span class="line">---</span><br><span class="line">title: 分類</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="代码主题和能否Copy"><a href="#代码主题和能否Copy" class="headerlink" title="代码主题和能否Copy"></a>代码主题和能否Copy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">highlight_theme: pale night #  darker / pale night / light / ocean / mac / mac light / false</span><br><span class="line">highlight_copy: true # 能否复制</span><br><span class="line">highlight_lang: true # show the code language</span><br><span class="line">highlight_shrink: false # true 全部代碼框不展開，需点击&gt;打開false 代碼狂展開，有&gt;點擊按鈕 none 不顯示&gt;按鈕</span><br><span class="line">code_word_wrap: false # 代码换行</span><br></pre></td></tr></table></figure><h3 id="主页标签页等图片设置"><a href="#主页标签页等图片设置" class="headerlink" title="主页标签页等图片设置"></a>主页标签页等图片设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 主题配置文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> Disable all banner image</span></span><br><span class="line">disable_top_img: false # 显示顶部图为 false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 顶部图</span></span><br><span class="line">index_img: /img/背景.jpg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认的top_img，当页面的top_img 没有配置时，会显示default_top_img</span></span><br><span class="line">default_top_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 归档页面的top_img</span></span><br><span class="line">archive_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag 子页面的默认top_img</span></span><br><span class="line">tag_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag 子页面的top_img，可配置每个 tag 的 top_img</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - tag name: xxxxx</span></span><br><span class="line">tag_per_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> category 子页面的默认top_img</span></span><br><span class="line">category_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> category 子页面的top_img，可配置每个category 的top_img</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - category name: xxxxx</span></span><br><span class="line">category_per_img:</span><br></pre></td></tr></table></figure><h3 id="文章图片设置"><a href="#文章图片设置" class="headerlink" title="文章图片设置"></a>文章图片设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">cover:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  index_enable: true # 在主页</span><br><span class="line">  aside_enable: true # 在文章页</span><br><span class="line">  archives_enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> the position of cover <span class="keyword">in</span> home page (封面顯示的位置)</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> left/right/both</span></span><br><span class="line">  position: left # 图片在左边</span><br><span class="line"><span class="meta">  #</span><span class="bash"> When cover is not <span class="built_in">set</span>, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  default_cover:</span><br><span class="line">    #- https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span><br></pre></td></tr></table></figure><h3 id="文章在主页展示的字数"><a href="#文章在主页展示的字数" class="headerlink" title="文章在主页展示的字数"></a>文章在主页展示的字数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">index_post_content:</span><br><span class="line">  method: 3</span><br><span class="line">  length: 200 # 预览多少。0 就没有了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如200</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220094718.png" alt="image-20210220094717060"></p><h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><blockquote><p>直接在文章的front-matter区域里添加sticky: 1属性来把这篇文章置顶。数值越大，置顶的优先级越大。</p></blockquote><h3 id="文章主页和阅读页显示"><a href="#文章主页和阅读页显示" class="headerlink" title="文章主页和阅读页显示"></a>文章主页和阅读页显示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 主题配置</span><br><span class="line">post_meta:</span><br><span class="line">  page: # Home Page</span><br><span class="line">    date_type: both # created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 主頁是否顯示分類</span><br><span class="line">    tags: true # true or false 主頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章頁日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 文章頁是否顯示分類</span><br><span class="line">    tags: true # true or false 文章頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br></pre></td></tr></table></figure><h3 id="文章阅读页显示目录"><a href="#文章阅读页显示目录" class="headerlink" title="文章阅读页显示目录"></a>文章阅读页显示目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> toc (目錄)</span></span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  number: true</span><br><span class="line">  style_simple: false</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220104649.png" alt="image-20210220104648888"></p><blockquote><p>特定文章也可以设定是否显示目录</p><p>在文章头部添加</p><p>toc_number和toc，配置为 true 和 false</p></blockquote><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><blockquote><p>相关文章推荐的原理是根据文章tags的比重来推荐</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Related Articles</span></span><br><span class="line">related_post:</span><br><span class="line">  enable: true</span><br><span class="line">  limit: 5 # 篇数</span><br><span class="line">  date_type: created # or created or updated 文章日期顯示創建日或者更新日</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文章描点"><a href="#文章描点" class="headerlink" title="文章描点"></a>文章描点</h3><blockquote><p>开启文章锚点后，当你在文章页进行滚动时，文章链接会根据标题ID进行替换<br>(注意:每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> anchor</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> when you scroll <span class="keyword">in</span> post, the URL will update according to header id.</span></span><br><span class="line">anchor: true</span><br></pre></td></tr></table></figure><h3 id="文章编辑按钮"><a href="#文章编辑按钮" class="headerlink" title="文章编辑按钮"></a>文章编辑按钮</h3><blockquote><p>在文章标题旁边显示一个编辑按钮，点击会跳转到对应的链接去。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post edit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Easily browse and edit blog <span class="built_in">source</span> code online.</span></span><br><span class="line">post_edit:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> url: https://github.com/755400668/755400668.github/edit/main/<span class="built_in">source</span>/</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> For example: https://github.com/jerryc127/butterfly.js.org/edit/main/<span class="built_in">source</span>/</span></span><br><span class="line">  url: https://github.com/755400668/755400668.github/edit/main/source/</span><br></pre></td></tr></table></figure><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: true # 显示中文网址</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure><p>如果想要某偏文章不显示版权，在文章标题添加<strong>copyright: false</strong> 即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220103922.png" alt="image-20210220103920494"></p><h3 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sponsor/reward</span></span><br><span class="line">reward:</span><br><span class="line">  enable: true</span><br><span class="line">  QR_code:</span><br><span class="line">    - img: /img/wechat.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: wechat</span><br><span class="line">    - img: /img/alipay.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: alipay</span><br></pre></td></tr></table></figure><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Avatar (頭像)</span></span><br><span class="line">avatar:</span><br><span class="line">  img: /img/wechat.gif</span><br><span class="line">  effect: false # 转圈</span><br></pre></td></tr></table></figure><h3 id="网站内容是否可以复制"><a href="#网站内容是否可以复制" class="headerlink" title="网站内容是否可以复制"></a>网站内容是否可以复制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> copy settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span></span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line">    enable: true</span><br><span class="line">    limit_count: 500</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220110231.png" alt="image-20210220110230870"></p><h3 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Footer Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2021</span><br><span class="line">  custom_text: 愿世间美好与你环环相扣</span><br><span class="line">  copyright: true # Copyright of theme and framework</span><br></pre></td></tr></table></figure><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dark mode</span></span><br><span class="line">darkmode:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Toggle Button to switch dark/light mode</span></span><br><span class="line">  button: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: 1  Following System Settings, <span class="keyword">if</span> the system doesn<span class="string">&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: <span class="literal">false</span></span></span><br><span class="line">  autoChangeMode: 1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220110817.png" alt="image-20210220110816979"></p><h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Read Mode (閲讀模式)</span></span><br><span class="line">readmode: true</span><br></pre></td></tr></table></figure><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bottom right button (右下角按鈕)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Change font size</span></span><br><span class="line">change_font_size: true</span><br></pre></td></tr></table></figure><h3 id="访问人数"><a href="#访问人数" class="headerlink" title="访问人数"></a>访问人数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> busuanzi count <span class="keyword">for</span> PV / UV <span class="keyword">in</span> site</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 訪問人數</span></span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> aside (側邊欄)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line"></span><br><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # 右边显示</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 头像卡片</span></span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Github</span><br><span class="line">      link: https://github.com/755400668</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 公告卡片</span></span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: 欢迎来到灰灰爱吃小云朵的博客</span><br><span class="line"></span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 分类卡片</span></span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 标签卡片</span></span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: false</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br></pre></td></tr></table></figure><h3 id="访问人数-1"><a href="#访问人数-1" class="headerlink" title="访问人数"></a>访问人数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> busuanzi count <span class="keyword">for</span> PV / UV <span class="keyword">in</span> site</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 訪問人數</span></span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br></pre></td></tr></table></figure><h3 id="网站运行时间"><a href="#网站运行时间" class="headerlink" title="网站运行时间"></a>网站运行时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 02/18/2021</span><br></pre></td></tr></table></figure><h3 id="Tag-hide"><a href="#Tag-hide" class="headerlink" title="Tag-hide"></a>Tag-hide</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220112432.png" alt="image-20210220112431535"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220112517.png" alt="image-20210220112516336"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220112533.png" alt="image-20210220112530047"></p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitalk</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  client_id: aa776ef94071498f6753</span><br><span class="line">  client_secret: 1cbad93b480c8980863bbfcf1fd8926c2fdd9863</span><br><span class="line">  repo: 755400668.github.io</span><br><span class="line">  owner: 755400668</span><br><span class="line">  admin: 755400668</span><br><span class="line">  language: zh-CN # en, zh-CN, zh-TW, es-ES, fr, ru</span><br><span class="line">  perPage: 10 # Pagination size, with maximum 100.</span><br><span class="line">  distractionFreeMode: false # Facebook-like distraction free mode.</span><br><span class="line">  pagerDirection: last # Comment sorting direction, available values are last and first.</span><br><span class="line">  createIssueManually: false # Gitalk will create a corresponding github issue for your every single page automatically</span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后主题配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="UI颜色"><a href="#UI颜色" class="headerlink" title="UI颜色"></a>UI颜色</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> theme_color:</span></span><br><span class="line">  enable: true</span><br><span class="line">  main: &quot;#49B1F5&quot;</span><br><span class="line">  paginator: &quot;#00c4b6&quot;</span><br><span class="line">  button_hover: &quot;#FF7242&quot;</span><br><span class="line">  text_selection: &quot;#00c4b6&quot;</span><br><span class="line">  link_color: &quot;#99a9bf&quot;</span><br><span class="line">  meta_color: &quot;#858585&quot;</span><br><span class="line">  hr_color: &quot;#A4D8FA&quot;</span><br><span class="line">  code_foreground: &quot;#F47466&quot;</span><br><span class="line">  code_background: &quot;rgba(27, 31, 35, .05)&quot;</span><br><span class="line">  toc_color: &quot;#00c4b6&quot;</span><br><span class="line">  blockquote_padding_color: &quot;#49b1f5&quot;</span><br><span class="line">  blockquote_background_color: &quot;#49b1f5&quot;</span><br></pre></td></tr></table></figure><h3 id="图片加载动画"><a href="#图片加载动画" class="headerlink" title="图片加载动画"></a>图片加载动画</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lazyload (圖片懶加載)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/verlok/lazyload</span></span><br><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  post: /img/loading1.gif</span><br></pre></td></tr></table></figure><h3 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Website Background (設置網站背景)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> can <span class="built_in">set</span> it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line">background:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 页脚显示和首页一样</span></span><br><span class="line">footer_bg: true</span><br></pre></td></tr></table></figure><h3 id="鼠标聚集几何图形"><a href="#鼠标聚集几何图形" class="headerlink" title="鼠标聚集几何图形"></a>鼠标聚集几何图形</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> canvas_nest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &#x27;0,0,255&#x27; #color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(note: use &#x27;,&#x27; to separate.)</span><br><span class="line">  opacity: 0.7 # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  zIndex: -1 # z-index property of the background, default: -1.</span><br><span class="line">  count: 199 # the number of lines, default: 99.</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h3 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line">click_heart:</span><br><span class="line">  enable: true</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h3 id="页面美化"><a href="#页面美化" class="headerlink" title="页面美化"></a>页面美化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default display mode (網站默認的顯示模式)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> light (default) / dark</span></span><br><span class="line">display_mode: light</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Beautify (美化頁面顯示)</span></span><br><span class="line">beautify:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> post 只在文章頁生效</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> site 在全站生效</span></span><br><span class="line">  field: sist # site/post</span><br><span class="line">  title-prefix-icon: &#x27;\f0c1&#x27;</span><br><span class="line">  title-prefix-icon-color: &#x27;#F47466&#x27;</span><br></pre></td></tr></table></figure><h3 id="主页打字"><a href="#主页打字" class="headerlink" title="主页打字"></a>主页打字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the subtitle on homepage (主頁subtitle)</span></span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Typewriter Effect (打字效果)</span></span><br><span class="line">  effect: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> loop (循環打字)</span></span><br><span class="line">  loop: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>調用第三方服務</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="built_in">source</span>: <span class="literal">true</span> <span class="comment"># 關閉調用</span></span></span><br><span class="line">  source: 1 # 調用搏天api的隨機語錄（簡體）</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 2  調用一言網的一句話（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 3  調用一句網（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 4  調用今日詩詞（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> subtitle 會先顯示 <span class="built_in">source</span> , 再顯示 sub 的內容</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="built_in">source</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果有英文逗號<span class="string">&#x27; , &#x27;</span>,請使用轉義字元 &amp;<span class="comment">#44;</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果有英文雙引號<span class="string">&#x27; &quot; &#x27;</span>,請使用轉義字元 &amp;quot;</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  sub: </span><br></pre></td></tr></table></figure><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-offline --save</span><br></pre></td></tr></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wordcount (字數統計)</span></span><br><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><h3 id="图片放大模式"><a href="#图片放大模式" class="headerlink" title="图片放大模式"></a>图片放大模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lightbox (圖片大圖查看模式)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can only choose one, or neither (只能選擇一個 或者 兩個都不選)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> medium-zoom</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line">medium_zoom: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> fancybox</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://fancyapps.com/fancybox/3/</span></span><br><span class="line">fancybox: true</span><br></pre></td></tr></table></figure><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Snackbar (Toast Notification 彈窗)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> position 彈窗位置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可選 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line">snackbar:</span><br><span class="line">  enable: true</span><br><span class="line">  position: bottom-left</span><br><span class="line">  bg_light: &#x27;#ffc0cb&#x27; # The background color of Toast Notification in light mode</span><br><span class="line">  bg_dark: &#x27;#121212&#x27; # The background color of Toast Notification in dark mode</span><br></pre></td></tr></table></figure><h3 id="修改背景"><a href="#修改背景" class="headerlink" title="修改背景"></a>修改背景</h3><ol><li><p>引入一个新的 CSS 文件</p></li><li><p>使用 js 文件</p><p> 但是会在一定程度上延缓网页的加载时间，且修改复杂</p></li></ol><p><strong>下面使用第一种方案</strong></p><ol><li><p>\themes\hexo-theme-butterfly\source\css<br> 目录下新建 <strong>background.css</strong> </p><blockquote><p>或者你可以在 css 目录下创建一个自己写的新文件夹如（mycss），然后在该目录下创建<strong>background.css</strong> </p></blockquote></li><li><p>编辑<br> butterfly 主题的背景 div 的 id 是 <strong>web_bg</strong> </p><ul><li><p>修改为图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">  /* 背景图像的地址（url括号里）  */</span><br><span class="line">  background: url();</span><br><span class="line">  /* 背景图像不重复 */</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  /* 背景图像大小 */</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background-repeat 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-repeat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background-size 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size</span></span><br></pre></td></tr></table></figure></li><li><p>修改为渐变背景（如下几种）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 蓝红色渐变</span><br><span class="line">#web_bg &#123;</span><br><span class="line">  &#x2F;* webkit内核 5.1 - 6.0 *&#x2F;</span><br><span class="line">  background: -webkit-linear-gradient(left, red, blue);</span><br><span class="line">  &#x2F;* Opera 11.1 - 12.0 *&#x2F;</span><br><span class="line">  background: -o-linear-gradient(right, red, blue);</span><br><span class="line">  &#x2F;* Firefox 3.6 - 15 *&#x2F;</span><br><span class="line">  background: -moz-linear-gradient(right, red, blue);</span><br><span class="line">  &#x2F;* 标准的语法 *&#x2F;</span><br><span class="line">  background: linear-gradient(to right, red, blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">    background: linear-gradient(102.7deg,#fddaff 8.2%,#dfadfc 19.6%,#adcdfc 36.8%,#adfcf4 73.2%,#caf8d0 90.9%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 紫蓝色渐变</span></span><br><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">    background: linear-gradient(to right bottom, rgb(0, 255, 240), rgb(92, 159, 247) 40%, rgb(211, 34, 255) 80%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 图片滤镜渐变</span></span><br><span class="line"><span class="meta">#</span><span class="bash">web_bg&#123;</span></span><br><span class="line">    background-image: url(&quot;https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png&quot;), linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)), url(&quot;https://ae01.alicdn.com/kf/H21b5f6b8496141a1979a33666e1074d9x.jpg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更多的渐变网址</p><p><a href="https://webgradients.com/">https://webgradients.com/</a></p><p><a href="https://www.grabient.com/">https://www.grabient.com/</a></p></blockquote></li></ul></li><li><p>最后将文件引入</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Inject</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Insert the code to head (before <span class="string">&#x27;&lt;/head&gt;&#x27;</span> tag) and the bottom (before <span class="string">&#x27;&lt;/body&gt;&#x27;</span> tag)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/mycss/background.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221120248.png" alt="image-20210221120247170"></p></li></ol><blockquote><p>如果没有生效的话修改如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># 主题配置文件</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># Website Background (設置網站背景)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">background: <span class="string">&quot;#efefef&quot;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><blockquote><p>同样的和上面修改背景一样，新建一个css文件如我的</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221122105.png" alt="image-20210221122103774"></p><blockquote><p>下面在某博主上面看到两种样式</p></blockquote><ul><li><p>渐变</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/* 页脚footer */</span><br><span class="line">/* 渐变色滚动动画 */</span><br><span class="line">@-webkit-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-moz-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">footer &#123;</span></span><br><span class="line">    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);</span><br><span class="line">    background-size: 400% 400%;</span><br><span class="line">    -webkit-animation: Gradient 10s ease infinite;</span><br><span class="line">    -moz-animation: Gradient 10s ease infinite;</span><br><span class="line">    animation: Gradient 10s ease infinite;</span><br><span class="line">    -o-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    border-top-left-radius: 10px;</span><br><span class="line">    border-top-right-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">footer:before &#123;</span></span><br><span class="line">    background-color: rgba(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>半透明</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">footer &#123;</span></span><br><span class="line">    background: rgba(255,255,255,.15);</span><br><span class="line">    color: #000;</span><br><span class="line">    border-top-right-radius: 20px;</span><br><span class="line">    border-top-left-radius: 20px;</span><br><span class="line">    backdrop-filter: saturate(100%) blur(5px)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer::before &#123;</span></span><br><span class="line">    background: rgba(255,255,255,.15)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer <span class="comment">#footer-wrap &#123;</span></span></span><br><span class="line">    color: var(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer <span class="comment">#footer-wrap a &#123;</span></span></span><br><span class="line">    color: var(--font-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后引入即可</p></blockquote></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221122344.png" alt="image-20210221122343300"></p><h3 id="手机侧边栏默认不展开"><a href="#手机侧边栏默认不展开" class="headerlink" title="手机侧边栏默认不展开"></a>手机侧边栏默认不展开</h3><blockquote><p>新建 js 文件即可，然后引入</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221124518.png" alt="image-20210221124517652"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221124539.png" alt="image-20210221124538405"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var mobile_sidebar_menus = document.getElementById(&quot;mobile-sidebar-menus&quot;);</span><br><span class="line">var menus_item_child = mobile_sidebar_menus.getElementsByClassName(</span><br><span class="line">    &quot;menus_item_child&quot;</span><br><span class="line">);</span><br><span class="line">var menus_expand = mobile_sidebar_menus.getElementsByClassName(&quot;menus-expand&quot;);</span><br><span class="line">for (var i = 0; i &lt; menus_item_child.length; i++) &#123;</span><br><span class="line">    menus_item_child[i].style.display = &quot;none&quot;;</span><br><span class="line">    menus_expand[i].className += &quot; menus-closed&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入clustrmaps访问者地图"><a href="#加入clustrmaps访问者地图" class="headerlink" title="加入clustrmaps访问者地图"></a>加入clustrmaps访问者地图</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221175024.png" alt="image-20210221175020256"></p><blockquote><p><a href="https://clustrmaps.com/">clustrmaps.com</a></p><p>注册账号或直接登录</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221175157.png" alt="image-20210221175156007"></p><blockquote><p>填写你的网址然后会看到代码，一种是JS一种是HTML的，这里我选用HTML的</p></blockquote><p>先在主题配置文件加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">card_maps: true</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221181520.png" alt="image-20210221181519652"></p><p>然后在 </p><p>themes\hexo-theme-butterfly\layout\includes\widget</p><p>路径下创建一个文件 如 <strong>card_maps.pug</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-map</span><br><span class="line">    .card-content</span><br><span class="line">        .item-headline</span><br><span class="line">            i.fa.fa-map-marker(aria-hidden=&quot;true&quot;)</span><br><span class="line">            span= _p(&#x27;足迹&#x27;)</span><br><span class="line">    # 这里是你复制过来的代码</span><br><span class="line">    &lt;a href=&#x27;https://clustrmaps.com/site/1bgca&#x27;  title=&#x27;Visit tracker&#x27;&gt;&lt;img src=&#x27;//clustrmaps.com/map_v2.png?cl=ffffff&amp;w=300&amp;t=tt&amp;d=Ti7plTQaKk8zjpyoUXfK29uCDrIzNldAuvoLvSLy1bU&amp;ct=ffffff&amp;co=2d78ad&#x27;/&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221181857.png" alt="image-20210221181856529"></p><p>然后在 widget/ 目录下找得到 index.png 加上下面代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_maps</span><br><span class="line">    !=partial(&#x27;includes/widget/card_maps&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221182140.png" alt="image-20210221182139515"></p><h3 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h3><ol><li><p>首先去 leadcloud 国际版注册一个账号<a href="https://leancloud.app/">Leadcloud国际版</a> 。</p></li><li><p>然后创建应用</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222103608.png" alt="image-20210222103607671"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222103806.png" alt="image-20210222103804648"></p></li><li><p>创建class</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104008.png" alt="image-20210222104007668"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104130.png" alt="image-20210222104129170"></p></li><li><p>找到用户栏添加用户</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104218.png" alt="image-20210222104217236"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104320.png" alt="image-20210222104319685"></p></li><li><p>然后修改访问权限</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104638.png" alt="image-20210222104636441"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104744.png" alt="image-20210222104743842"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104849.png" alt="image-20210222104848202"></p><blockquote><p>把 _User 的权限全部设置为指定用户但不添加，就是为了没有用户可以修改，防止别人通过 id 和 key 篡改我们用户数据</p><p>即上一步添加用户就是这么个作用</p><p>Leancloud的配置就告一段落了</p></blockquote></li><li><p>然后在主题配置文件中填写 Leancloud 信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> valine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  appId:  # leancloud application app id</span><br><span class="line">  appKey:  # leancloud application app key</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: monsterid # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: zh-CN # i18n: zh-CN/zh-TW/en/ja</span><br><span class="line">  placeholder: Please leave your footprints # valine comment input placeholder (like: Please leave your footprints)</span><br><span class="line">  guest_info: nick,mail # valine comment header info (nick/mail/link)</span><br><span class="line">  recordIP: false # Record reviewer IP</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  bg: # valine background</span><br><span class="line">  emojiCDN: # emoji CDN</span><br><span class="line">  enableQQ: true # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">  requiredFields: nick,mail # required fields (nick/mail)</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最后不要忘记打开这个</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222165836.png" alt="image-20210222165835011"></p></li></ol><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>然后在文章的头部写上，如下例子</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222165511.png" alt="image-20210222165510117"></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识汇编</title>
      <link href="2021/02/18/%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96/"/>
      <url>2021/02/18/%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h1 id="初识汇编"><a href="#初识汇编" class="headerlink" title="初识汇编"></a>初识汇编</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>语言</p><p>进制</p><p>进制如何运算</p><p>二进制（量子计算）</p><p>数据宽度</p><p>有符号数和无符号数</p><p>原码反码补码</p><p>位运算</p><p>位运算计算</p><p>汇编（OD）</p><p>寄存器</p><p>内存</p><p>汇编指令</p><p>内存复制</p><p>堆栈指令</p><p>汇编如何写函数</p><p>堆栈传参</p><p>堆栈平衡</p><p>外挂</p><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>什么是机器语言？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目前主流的电子计算机</span></span><br><span class="line">状态：0 1</span><br><span class="line">加0100 0000</span><br><span class="line">减0100 1000</span><br><span class="line">乘0100 1000 0100 1000</span><br><span class="line">除0100 1000 1100 1000</span><br></pre></td></tr></table></figure><p>上述为机器语言，通过助记符 -&gt; 得到汇编语言，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加INC-编译器-&gt; 0100 0000</span><br><span class="line">减DEC 0100 1000</span><br><span class="line">乘MUL 0100 1000 0100 1000</span><br><span class="line">除DIV 0100 1000 1100 1000</span><br></pre></td></tr></table></figure><p>汇编只是用于助记机器语言</p><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><blockquote><p>测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一进制 1 - 20</span></span><br><span class="line">1</span><br><span class="line">1 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">.........</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三进制</span></span><br><span class="line">012</span><br><span class="line">101112</span><br><span class="line">202122</span><br><span class="line">100101102</span><br><span class="line">110111112</span><br><span class="line">120121122</span><br><span class="line">200201202</span><br><span class="line">210211212</span><br><span class="line">220221222</span><br><span class="line">100010011002</span><br><span class="line">101010111012</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 七进制</span></span><br><span class="line">0123456</span><br><span class="line">10111213141516</span><br><span class="line">20212223242526</span><br><span class="line">3031...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加密解密：进制的加密</p><p>数字量一大，总有规律</p><blockquote><p>进制的运算</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 八进制计算</span></span><br><span class="line">2 + 3 = 5</span><br><span class="line">2 * 3 = 6</span><br><span class="line">4 + 5 = 11</span><br><span class="line">4 * 5 = 24</span><br><span class="line"></span><br><span class="line">277 + 333 = 632</span><br><span class="line">276 * 54 = 20250</span><br><span class="line">273 - 54 = 217</span><br><span class="line">234 / 4 = 47</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论：无论什么进制，本事都有一套完美的运算体系，都可以通过列表的方式计算出来</p><blockquote><p>二进制</p></blockquote><p>计算机使用二进制 0 1 转态！ 电子！ </p><p>物理极限：摩尔定理！追求语言的极限！并发语言！软操作！</p><p><strong>量子计算机</strong>：一旦民用，目前的安全系统不再有用，爆破几分钟的事</p><p>可以实现量子计算的机器</p><p>传统计算机：集成电路：0 1     硅晶片</p><p>量子计算机的单位：昆比特</p><p>光子：正交偏振方向</p><p>磁场：电子的自旋方向</p><p>21世纪    计算力    快到尽头了</p><p>量子计算机    -&gt;    提高计算机的计算力</p><p>量子比特，量子叠加态，量子纠缠，量子并行原理</p><p>为什么要学习理解二进制？</p><p>寄存器、内存、位！底层的每一个位都是有含义的。</p><p>汇编高级：了解程序深层！操作系统的内核</p><h2 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h2><p> C C++ Java 都需要定义数据的类型。计算机底层需要我们给这些数据定义宽度</p><p>位    0 1<br>字节    0 - 0XFF<br>字    0 - 0XFFFF<br>双字    0 - 0XFFFFFFFF</p><h2 id="有符号数和无符号数"><a href="#有符号数和无符号数" class="headerlink" title="有符号数和无符号数"></a>有符号数和无符号数</h2><p>数据都是有宽度的，每个数据代表什么意思？</p><p>规则</p><p><strong>二进制解码增加一个规则</strong></p><ul><li><p>无符号数规则</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001 1010十六进制：0x9A十进制：154</span><br></pre></td></tr></table></figure></li><li><p>有符号数规则</p><p>  最高位是符号位：1（负数）0（正数）</p></li></ul><h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><p><strong>编码规则</strong> ：有符号位的编码规则</p><ul><li>原码：最高位是符号位</li><li>反码：<ul><li>正数：反码和原码相同</li><li>负数：符号位一定是1，其余对原码取反</li></ul></li><li>补码：<ul><li>正数：补码和原码相同</li><li>负数：符号位一定是1，反码 +1</li></ul></li></ul><blockquote><p>例子</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果是正数，都是一样的</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码0000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码0000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码0000 0001</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是负数</span></span><br><span class="line">-1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码1000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码1111 1110</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码1111 1111</span></span><br><span class="line">-7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码1000 0111</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码1111 1000</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码1111 1001</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个二进制数，需要了解它是有符号数还是无符号数</p><p>如一个 32 位机器</p><p>FFFF FFFF</p><ul><li>有符号表示 -1</li><li>无符号表示 4,294,967,295</li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>2 * 8 最高效的计算方式   -&gt;  2&lt;&lt;3</p><p>很多调试器，需要通过位来判断 CPU 状态</p><ol><li><p>与运算（and &amp;）串行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">1001 0000</span><br></pre></td></tr></table></figure></li><li><p>或运算（or |）并行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">1111 1001</span><br></pre></td></tr></table></figure></li><li><p>异或运算（xor ^）不同为1</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">0110 1001</span><br></pre></td></tr></table></figure></li><li><p>非运算（单目运算符 not ~）</p><p> 0 就是 1，1 就是 0</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1101 1000</span><br><span class="line">0010 0111</span><br></pre></td></tr></table></figure></li><li><p>位运算（移动位，左移 * 2，右移 / 2）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 00011</span><br><span class="line">0000 00102</span><br><span class="line">0000 01004</span><br><span class="line">0000 10008</span><br></pre></td></tr></table></figure><p> 左移：shl    &lt;&lt;</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 # 所以二进制位全部左移若干位，高位丢弃，低位补0</span><br></pre></td></tr></table></figure><p> 右移：shr    &gt;&gt;</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 # 所以二进制位全部左移若干位，低位丢弃，高位补补0或1（正数补0，负数补1）</span><br></pre></td></tr></table></figure></li></ol><h2 id="位运算的加减乘除"><a href="#位运算的加减乘除" class="headerlink" title="位运算的加减乘除"></a>位运算的加减乘除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 计算机怎么操作 4 + 5？</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">----------计算机不会直接加</span><br><span class="line">0000 1001</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是计算机怎么计算的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一步， 异或：如果没有进位，异或直接就可以出结果</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">---------</span><br><span class="line">0000 0001</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：与运算（判断进位，如果与运算结果为0，则没有进位）</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">---------</span><br><span class="line">0000 0100</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步，将与运算的结果，左移一位</span></span><br><span class="line">0000 1000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第四步：异或</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">---------</span><br><span class="line">0000 1001</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第五步：与运算（判断进位，如果与运算结果为0，没有进位）</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">---------</span><br><span class="line">0000 0000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所以最终结果就是与运算为0的上一个异或运算的值</span></span><br></pre></td></tr></table></figure><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器：</p><p>存储数据：CPU -&gt; 内存 -&gt; 硬盘</p><p>32位 CPU：8    16    32</p><p>64位 CPU：8    16    32    64</p><p><strong>通用寄存器</strong></p><p>32位的通用寄存器只有 8 个</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210209165542.png" alt="image-20210209165541692"></p><p>存值的范围    0 - FFFFFFFF</p><p>对于二进制来说，直接修改值</p><p><strong>计算机如果像寄存器存值</strong></p><p><strong>mov 指令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov 存的地址,存的数</span><br><span class="line">mov 存的地址1,存的地址1</span><br></pre></td></tr></table></figure><p>可以将数字写入寄存器，可以将寄存器中的值写到寄存器</p><p><strong>不同的寄存器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">32位16位8位</span><br><span class="line">EAX AX AL</span><br><span class="line">ECX CX CL</span><br><span class="line">EDX DX DL</span><br><span class="line">EBX BX BL</span><br><span class="line">ESP SP AH</span><br><span class="line">EBP BP CH</span><br><span class="line">ESI SI DH</span><br><span class="line">EDI DI BH</span><br></pre></td></tr></table></figure><p>8位：L低8位，H高8位</p><p>除了这些通用寄存器之外，那么其他的寄存器都有自己特定的功能！</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>寄存器很小，不够用，所以把数据放到内存中</p><p>每个应用程序都有4GB的内存空间，空头支票</p><p>程序真正运行的时候，才会用到物理内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1B = 8bit</span><br><span class="line">1kb = 1024B</span><br><span class="line">1MB = 1024KB</span><br><span class="line">1GB = 1024MB</span><br><span class="line">4GB = 4096M = 4096 * 1024 * 1024B = 2^(12+10+10) = 2^32</span><br></pre></td></tr></table></figure><p><strong>内存地址</strong></p><p>存一个数：占用的大小，数据宽度！存到哪里？</p><p>计算机中内存地址很多，空间很大，每个空间分配一个地址，名字</p><p>如32位系统：0x00000000 - 0xFFFFFFFF</p><p>32位：寻址能力！4GB</p><p>FFFFFFFF + 1 = 100000000，最大的值</p><p>位是怎么限制内存大小的</p><p>100000000 内存地址 * 8 = 位：800000000</p><p>转换为10进制 /8 ：4,294,967,296字节</p><p>按照规则 /1024 ，最终即为 4GB</p><p><strong>内存如何存值</strong></p><p>数据宽度：    byte    word    dwrod</p><p>不是任意的地址都可以写东西，申请使用的。只有程序申请过的内存才可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 汇编如何向内存中写值</span></span><br><span class="line">mov 数据宽度 内存地址,值</span><br><span class="line">mov byte/word/dword/qword,-1</span><br><span class="line"></span><br><span class="line">eg:mov byte ptr ds:[0xFFFFFFFF],1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 传递的值的大小一定要和数据宽度相等</span></span><br></pre></td></tr></table></figure><p><strong>内存有多种写法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds:[0x0090FFFF+4]内存地址偏移</span><br><span class="line">ds:[eax]寄存器</span><br><span class="line">ds:[eax+4]寄存器偏移</span><br><span class="line"><span class="meta">#</span><span class="bash"> 数组[]</span></span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;]数组</span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;+4]数组偏移</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-个人记录</title>
      <link href="2021/02/18/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95%EF%BC%89/"/>
      <url>2021/02/18/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a><strong>Git</strong> 使用</h1><blockquote><h3 id="Git是目前世界上最先进的分布式版本控制系统。"><a href="#Git是目前世界上最先进的分布式版本控制系统。" class="headerlink" title="Git是目前世界上最先进的分布式版本控制系统。"></a><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></h3></blockquote><hr><h2 id="一、安装方面"><a href="#一、安装方面" class="headerlink" title="一、安装方面"></a>一、安装方面</h2><ol><li><p>安装 git </p><p>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a> </p></li></ol><p>  <strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p><p>  <strong>Git CMD：</strong>Windows风格的命令行</p><p>  <strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><blockquote><p><strong>基本 Linux 命令</strong></p><ul><li><p>cd ：改变目录。</p></li><li><p>cd . . 回退到上一个目录，直接 cd 进入默认目录</p></li><li><p>pwd : 显示当前所在的目录路径。</p></li><li><p>ls(ll):  都是列出当前目录中的所有文件, ll更为详细。</p></li><li><p>touch :文件</p></li><li><p>vi ：新建文件并编辑</p></li><li><p>rm:  删除文件</p></li><li><p>mkdir:  新建文件夹。</p></li><li><p>rm -r :  删除文件夹</p></li><li><p>mv 移动文件/ 文件重命名，必须保证文件和目标文件夹在同一目录下。</p></li><li><p>reset：重新初始化终端/清屏。</p></li><li><p>clear：清屏。</p></li><li><p>history：查看命令历史。</p></li><li><p>help：帮助。</p></li><li><p>exit：退出。</p></li><li><p>#：表示注释</p></li></ul></blockquote><ol start="2"><li><p><strong>Git</strong> 配置</p><p>查看配置：<strong>git config -l</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208163207.png" alt="image-20210208163206086"></p><p>查看不同级别的配置文件：</p></li></ol><ul><li>系统 config ：<strong>git config –system –list</strong></li><li>用户 <strong>global</strong> ：<strong>git config –global –list</strong></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208163639.png"></p><pre><code>  git 相关配置文件：    - Git\etc\gitconfig ：Git 安装目录下的 gitconfig            –system 系统级别  - C:\Users\用户名\.gotconfig ：只适用于当前登录用户的配置     –global 全局</code></pre><ol start="4"><li><p><strong>设置用户名与邮箱</strong></p><ul><li>法一单独配置：引号要不要都可以 如：<br>  git config –global user.name “MingHuifan”<br>  git config –global user.email “<a href="mailto:&#x78;&#x78;&#120;&#x78;&#x78;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;">&#x78;&#x78;&#120;&#x78;&#x78;&#64;&#x71;&#x71;&#46;&#x63;&#111;&#109;</a>“</li><li>法二文件写：<br>  git config –global –edit  会进入.gitconfig文件编辑，把name和email写进去 :wq 退出并保存<br>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208165404.png" alt="image-20210208165359679"></li></ul></li><li><p>生成 <strong>SSH</strong> 公钥</p><p> 设置本机绑定 SSH 公钥，实现免密登录</p><p> 在 <strong>C:\Users\用户名\ .ssh 目录</strong></p><p> 如果没有则用：<strong>ssh -keygen</strong> 生成，一路回车即可</p><p> 然后进去 <strong>C:\Users\用户名\ .ssh</strong> 目录 有一个 <strong>.pub</strong> 后缀的文件，这是公钥</p></li><li><p>在 <strong>gitee</strong> 设置公钥，github 一样</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208175338.png" alt="image-20210208175337489"></p></li></ol><blockquote><p><strong>然后就是如何使用 git push 到 github 或者 gitee 上了</strong></p></blockquote><h2 id="二、操作方面"><a href="#二、操作方面" class="headerlink" title="二、操作方面"></a>二、操作方面</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208223330.png" alt="image-20210208223324255"></p><hr><p>前序工作已经完成，接下来是如何操作</p><ol><li><p>在 <strong>github</strong> 上创建一个仓库（<strong>Repository</strong>）</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208175930.png" alt="image-20210208175929149"></p></li><li><p>然后克隆到本地</p><p> <img src= "/img/loading2.gif" data-lazy-src="C:\Users\FanMingHui\AppData\Roaming\Typora\typora-user-images\image-20210208180153826.png" alt="image-20210208180153826"></p></li><li><p>然后下载到你的本地仓库</p><ul><li><p>右键选择 <strong>git Bash Here</strong>  —&gt;  <strong>git clone + [url]</strong> </p><p>  然后就会有一个 <strong>.git</strong> 的目录</p></li><li><p>可以下载到你的项目路径中，然后就可以用命令操作了</p></li><li><p>或者复制到其他的路径中，**.git**文件绑定了你的远程仓库，所以只要复制到任何地方都可以</p><ul><li>考虑一种情况：我从远程仓库下载并保存在 E:\A\ 目录下那么 A 目录下就有 .git （该文件绑定了一个远程仓库），我就可以操作本地仓库 A ，然后我在把 .git 文件复制到 E:\B\ 目录下，那么我是不是可以将两个的文件叠加的上床到远程仓库中<br>  其实并不能，并且两个路径不可以同时使用 <strong>git</strong> ，只能使用一个文件路径下的 <strong>git</strong></li></ul></li></ul></li><li><p>几个命令</p><blockquote><ul><li>git add .</li><li>git commit -m 说明</li><li>git push</li><li>git pull</li><li>git rm -r –cached filePath : 清除缓存-指定路径</li><li>git rm -r –cached . ：清除缓存-清除全部缓存</li><li>git clone</li><li>git remote add origin SSH地址：链接远程仓库地址</li><li>git remote remove origin：移除远程仓库地址</li><li>git remove -v：查看远程仓库地址</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
