<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Window-硬链接与软链接</title>
      <link href="2021/11/17/%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
      <url>2021/11/17/%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<hr><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211117105424.png" alt="image-20211117105424293"></p><h1>软链接</h1><blockquote><p>创建方式</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mklink /d <span class="string">&quot;old_file&quot;</span> <span class="string">&quot;new_old&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mklink <span class="string">&quot;old_file&quot;</span> <span class="string">&quot;new_old&quot;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Window </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验四：RIP与OSPF动态路由配置</title>
      <link href="2021/11/15/%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9ARIP%E4%B8%8EOSPF%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/"/>
      <url>2021/11/15/%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9ARIP%E4%B8%8EOSPF%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1>实验四：RIP与OSPF动态路由配置</h1><blockquote><p>按照书上内容配置：</p><ul><li>RIP：P220 ~ P227【RIP协议排错】也要做</li><li>OSPF：P235 ~ P244</li></ul></blockquote><blockquote><p>两个协议配置，放到一个 <strong>Word</strong> 文档里就行</p><p>还有实验文件（pkt）用一个也行，上面是 RIP 下面是 OSPF，如图所示</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116003758.png" alt="image-20211116003758313"></p><h2 id="实验内容">实验内容</h2><ol><li><p>RIP动态路由协议</p><ul><li><p>配置RIP协议</p></li><li><p>学会查看路由表</p></li><li><p>观察RIP协议路由更新活动</p></li><li><p>测试RIP协议健壮性</p></li><li><p>RIP协议排错</p></li></ul></li><li><p>OSPF动态路由协议</p><ul><li><p>配置OSPF协议</p></li><li><p>查看OSPF协议三张表</p></li><li><p>监控OSPF协议的活动</p></li><li><p>验证OSPF协议的健壮性</p></li><li><p>OSPF协议配置排错</p></li></ul></li></ol><h2 id="RIP-协议配置">RIP 协议配置</h2><blockquote><p>首先做第一个动态路由协议 <strong>RIP</strong></p></blockquote><blockquote><p>由于前面做了 3 次实验了，这里省略一些细节，直接在图上标注好<code>各个网段</code>以及<code>各个接口的IP地址</code>和<code>子网掩码</code></p></blockquote><ol><li><p>根据拓扑图搭建好框架</p><blockquote><p>路由器可选：<code>PT-Router</code></p><p>交换机可选：<code>2950T</code></p><p>路由器相连可选不带时钟频率的线<code>Serial DTE</code></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115140421.png" alt="image-20211115140421576"></p></li><li><p>然后根据上图写好的各个接口的 IP 地址以及子网掩码给路由器和 PC 配置好（交换机不用配置）</p><p>注意：PC 主机要设置网关，这里的网关就是路由器与交换机相连的那个出口：比如 PC1 的网关就是路由器1 fa0/0 的 IP 地址</p><blockquote><p>配置前先给路由器重命名，以免混淆。当然不命名也行（/滑稽）</p></blockquote><p>初次打开直接输入 <code>no</code> 跳过一些设置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115095100.png" alt="image-20211115095100681"></p><p><code>下面演示一个路由器，其他自行配置，不要手误了（/滑稽）</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115095655.png" alt="image-20211115095655405"></p></li><li><p>给每个路由器配置 RIP 协议</p><p>前面只是给各个接口分配了 IP 地址，以及给 PC 主机设置了网关等信息，易知，两台 PC 是不能通信的</p><p>提示目的主机不可到达</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115133339.png" alt="image-20211115133338983"></p><p>接下配置 RIP 协议使之任意终端设备都能通信</p><ul><li><p>R1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115134347.png" alt="image-20211115134347163"></p></li><li><p>R2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115135622.png" alt="image-20211115135622226"></p></li><li><p>R3</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115141341.png" alt="image-20211115141341477"></p></li><li><p>R4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115135743.png" alt="image-20211115135743194"></p></li><li><p>R5</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115141135.png" alt="image-20211115141135133"></p></li></ul></li><li><p>查看路由表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看整张路由表</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> show ip route</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只查看RIP协议路由表</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> show ip route rip</span></span><br></pre></td></tr></table></figure><p>查看 R1 的整张路由表</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115142220.png" alt=""></p><p>仅仅查看 R1 路由器 RIP 协议学到的路由</p><p>可以发现除了 R1 的直连网段，其他的网段都通过 RIP 协议学习到了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115185020.png" alt="image-20211115185013615"></p><p>下面查看其他路由器的通过 RIP 协议学到的路由</p><p>通过分析路由表可以知道，每个路由器通往其他网段的路由都有了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115190236.png" alt="image-20211115190236121"></p></li><li><p>测试两台电脑是否可通信</p><p>PC1 ping PC2 可通信</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115190541.png" alt="image-20211115190541660"></p></li><li><p>观察 RIP 协议路由更新活动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 观察 RIP 协议路由更新活动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> debug ip rip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭诊断输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> undebug all</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115192709.png" alt="image-20211115192709546"></p><blockquote><p>记得用 undebug all 命令关闭，不然一直会输出信息</p></blockquote></li><li><p>测试 RIP 协议健壮性</p><p>动态路由会随着网络的变化重新生成到各个网络的路由，当最佳路径没有了，就会从备用路径中重新选择一个最佳路径。</p><p>下面测试一下 PC1 到 PC2 的数据包路径</p><p>在 PC1 上，用<code>tracert 192.168.3.1</code>命令跟踪到 PC2 的数据包路径，可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R2-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115193628.png" alt="image-20211115193628626"></p><blockquote><p>接下来用一个方法观察路由表更新过程</p></blockquote><p>先在 R3 上启用 RIP 协议诊断</p><p>然后用 <code>shutdown</code>命令关闭 R2 左边的接口（物理断开一样的）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115200612.png" alt="image-20211115200611946"></p><p>然后将高亮部分的路由记录通过 RIP 协议的合并规则合并后即可得到最新的路由表，192.168.1.0 网段是无法到达的</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115200923.png" alt="image-20211115200923520"></p><blockquote><p>再次测试从 PC1 到 PC2 的数据包路径</p></blockquote><p>可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R4-&gt;R5-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115201649.png" alt="image-20211115201649965"></p></li><li><p>RIP 协议排错</p><blockquote><p>先把 R2 左边的接口开启，因为上一步关闭了</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115202151.png" alt="image-20211115202151036"></p><p>下面查看路由器的 RIP 协议配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115202624.png" alt="image-20211115202624232"></p><p>如果我们在配置 R1 路由器的 RIP 协议时，network 少写了一个 192.168.0.0，其他路由器就不能学习到到该网段的路由</p><p>下面取消添加到 192.168.0.0 的网段，该网段不再参与 RIP 协议</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115203257.png" alt=""></p><p>然后再 R3 路由器上查看 RIP 协议学到的路由，可以看到已经没有到 192.168.0.0/24 网段的路由了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115203604.png" alt="image-20211115203604373"></p></li></ol><h2 id="OSPF-协议配置">OSPF 协议配置</h2><ol><li><p>拓扑图和 RIP 的一样</p><blockquote><p>我这里是直接复制 RIP 协议的，然后把 RIP 协议关闭一下就行了</p><p>关闭 RIP 协议如下图，剩下的 R2、R3、R4、R5 都要关闭 RIP 协议</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115232558.png" alt="image-20211115232558349"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115232618.png" alt="image-20211115232618411"></p></li><li><p>配置 OSPF 协议</p><blockquote><p>OSPF 配置方法</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116004230.png" alt="image-20211116004230498"></p><p>下面对 R1 ~ R5 进行 OSPF 配置</p><ul><li><p>R1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115233546.png" alt="image-20211115233546464"></p></li><li><p>R2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115233649.png" alt="image-20211115233649852"></p></li><li><p>R3</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115233815.png" alt="image-20211115233815413"></p></li><li><p>R4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115233909.png" alt="image-20211115233909607"></p></li><li><p>R5</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115233957.png" alt="image-20211115233957472"></p></li></ul></li><li><p>查看 OSPF 协议三张表</p><blockquote><p>邻居表、链路状态数据库表、路由表</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115234824.png" alt="image-20211115234824587"></p><ul><li><p>邻居表</p><p>查看 R1 的邻居表</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115235202.png" alt="image-20211115235202386"></p></li><li><p>链路状态数据库表</p><p>查看 R1 的链路状态数据库表</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211115235457.png" alt="image-20211115235457606"></p></li><li><p>路由表</p><p>查看 R1 的路由表（OSPF 生成的）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116000420.png" alt="image-20211116000420936"></p></li></ul></li><li><p>监控 OSPF 的活动</p><blockquote><p>前面 RIP 协议是观察路由更新活动</p></blockquote><p>下面对 OSPF 进行监控，有两个选项，adj 似乎没啥输出信息，就只查看 events 信息</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116000743.png" alt="image-20211116000743655"></p><p>查看 events 信息（事件信息）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116001412.png" alt="image-20211116001412096"></p></li><li><p>验证 OSPF 协议健壮性</p><p>当网络的链路状态发送改变后，OSPF协议会迅速通过泛洪更新链路状态，每个路由器单独计算到各个网段的路由</p><p>下面验证 OSPF 协议的健壮性</p><p>测试一下 PC1 到 PC2 的数据包路径，可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R2-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116003035.png" alt="image-20211116003035134"></p><p>然后关闭 R1 与 R2 之间的链路：只需要把 R2 左边接口<code>shutdown</code>即可（或者把 R1 右边接口 shutdown）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116003334.png" alt="image-20211116003334528"></p><p>再测试一下 PC1 到 PC2 的数据包路径，可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R4-&gt;R5-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116003520.png" alt="image-20211116003520756"></p><p>做完之后重新把 R2 左边接口打开</p></li><li><p>OSPF 协议配置排错</p><p>如果配置了网络中的路由器使用 OSPF 协议，但是查看路由表发现有些网段没有通过 OSPF 学习到，就需要检查路由器接口是否配置了正确的 IP 地址和子网掩码，要是串口还要检查是否配置了时钟频率。进行了这些常规检查，还要检查 OSPF 协议的配置。</p><p>输入 <code>show ip protocols</code>能够显示动态路由协议的配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116001831.png" alt="image-20211116001831536"></p><p>由于这里我们添加的是一个比较大的网段<code>192.168.0.0/16</code>所以这里只有一条 Networks，如果是单独添加就不止一条</p><p>总之出现问题之后可以先看下 OSPF 配置是否正确</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验三：子网划分与静态路由</title>
      <link href="2021/10/31/%E5%AE%9E%E9%AA%8C%E4%B8%89%E2%80%94%E2%80%94%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E4%B8%8E%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/"/>
      <url>2021/10/31/%E5%AE%9E%E9%AA%8C%E4%B8%89%E2%80%94%E2%80%94%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E4%B8%8E%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1>实验三：子网划分与静态路由</h1><h2 id="实验步骤">实验步骤</h2><ol><li><p>根据拓扑图搭建框架</p><blockquote><p>路由器选择 <code>PT-Router</code></p><p>交换机选择 <code>2950T</code></p><p>路由器之间连接线可选择带时钟频率的<code>Serial DCE</code>线或者不带时钟频率的线<code>Serial DTE</code></p><p>带时钟频率的线多一步设置频率，不带时钟频率的线不用设置</p><p>下面的配置都是针对我这种连线方式进行（比如我中间路由器左边用 Se2/0 口，右边用 Se3/0 口），如你的连线方式不同，找到对应接口配置即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103002408.png" alt="image-20211103002408658"></p></li><li><p>子网划分</p><blockquote><p>该拓扑图中一共有 5 个区域（见下图）</p><p>N1 区域有 100 台电脑</p><p>N2 区域有 50 台电脑</p><p>N3 区域有 25 台电脑</p><p>N4 区域为两端路由器，包括 2 个地址</p><p>N5 区域为两端路由器，包括 2 个地址</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103003222.png" alt="image-20211103003222616"></p><p>现我们有一个 C 类地址 192.168.1.0 255.255.255.0，需要给这 5 个区域分配不同的网段</p><ul><li><p>N1 100 台电脑可分配 128 个可用地址给它</p></li><li><p>N2 50 台电脑可分配 64 个可用地址给它</p></li><li><p>N3 25 台电脑可分配 32 个可用地址给它</p></li><li><p>N4 和 N5 都只有两个地址，可分配 2 个可用地址给它</p></li></ul><p>根据上面分析，我们可以把地址写出来理解一下怎么分给这 5 个区域</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">我们现在拥有 256 个地址</span><br><span class="line">256 个地址如下，前面三段用十进制表示，最后一段用二进制表示</span><br><span class="line"></span><br><span class="line">        ==========以下4个地址给-&gt;N4===========</span><br><span class="line">        192.168.1.00000000  --&gt; 192.168.1.0</span><br><span class="line">        192.168.1.00000001  --&gt; 192.168.1.1</span><br><span class="line">        192.168.1.00000010  --&gt; 192.168.1.2</span><br><span class="line">        192.168.1.00000011  --&gt; 192.168.1.3</span><br><span class="line">        ===================================</span><br><span class="line">        ==========以下4个地址给-&gt;N5===========</span><br><span class="line">        192.168.1.00000100  --&gt; 192.168.1.4</span><br><span class="line">        192.168.1.00000101  --&gt; 192.168.1.5</span><br><span class="line">        192.168.1.00000110  --&gt; 192.168.1.6</span><br><span class="line">        192.168.1.00000111  --&gt; 192.168.1.7</span><br><span class="line">        ===================================</span><br><span class="line">        192.168.1.00001000  --&gt; 192.168.1.8</span><br><span class="line">        192.168.1.00001001  --&gt; 192.168.1.9</span><br><span class="line">        ..............</span><br><span class="line">        ==========以下32个地址给-&gt;N3==========</span><br><span class="line">        192.168.1.00100000  --&gt; 192.168.1.32</span><br><span class="line">        192.168.1.00100001  --&gt; 192.168.1.33</span><br><span class="line">        192.168.1.00100010  --&gt; 192.168.1.34</span><br><span class="line">        ..............</span><br><span class="line">        192.168.1.00111110  --&gt; 192.168.1.62</span><br><span class="line">        192.168.1.00111111  --&gt; 192.168.1.63</span><br><span class="line">        ====================================</span><br><span class="line">        ..............</span><br><span class="line">        ===========以下64个地址给-&gt;N2==========</span><br><span class="line">        192.168.1.01000000  --&gt; 192.168.1.64</span><br><span class="line">        192.168.1.01000001  --&gt; 192.168.1.65</span><br><span class="line">        192.168.1.01000010  --&gt; 192.168.1.66</span><br><span class="line">        ..............</span><br><span class="line">        192.168.1.01111110  --&gt; 192.168.1.126</span><br><span class="line">        192.168.1.01111111  --&gt; 192.168.1.127</span><br><span class="line">        =====================================</span><br><span class="line">        ..............</span><br><span class="line">        ===========以下128个地址-&gt;N1===========</span><br><span class="line">        192.168.1.10000000  --&gt; 192.168.1.128</span><br><span class="line">        192.168.1.10000001  --&gt; 192.168.1.129</span><br><span class="line">        192.168.1.10000010  --&gt; 192.168.1.130</span><br><span class="line">        ..............</span><br><span class="line">        192.168.1.11111111  --&gt; 192.168.1.252</span><br><span class="line">        192.168.1.11111111  --&gt; 192.168.1.253</span><br><span class="line">        192.168.1.11111110  --&gt; 192.168.1.254</span><br><span class="line">        192.168.1.11111111  --&gt; 192.168.1.255</span><br><span class="line">        =====================================</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103130326.png" alt="image-20211103130326207"></p><blockquote><p>补充常用二进制对应十进制数</p></blockquote><table><thead><tr><th style="text-align:center">二进制</th><th style="text-align:center">十进制</th></tr></thead><tbody><tr><td style="text-align:center"><code>1000 0000</code></td><td style="text-align:center"><code>128</code></td></tr><tr><td style="text-align:center"><code>1100 0000</code></td><td style="text-align:center"><code>192</code></td></tr><tr><td style="text-align:center"><code>1110 0000</code></td><td style="text-align:center"><code>224</code></td></tr><tr><td style="text-align:center"><code>1111 0000</code></td><td style="text-align:center"><code>240</code></td></tr><tr><td style="text-align:center"><code>1111 1000</code></td><td style="text-align:center"><code>248</code></td></tr><tr><td style="text-align:center"><code>1111 1100</code></td><td style="text-align:center"><code>252</code></td></tr><tr><td style="text-align:center"><code>1111 1110</code></td><td style="text-align:center"><code>254</code></td></tr><tr><td style="text-align:center"><code>1111 1111</code></td><td style="text-align:center"><code>255</code></td></tr></tbody></table><p>这样就实现了地址的分配，然后进行子网划分，每一段地址表示一个子网，因此可得到下表</p><table><thead><tr><th style="text-align:center">区域</th><th style="text-align:center">网段</th><th style="text-align:center">子网掩码</th><th style="text-align:center">CIDR值</th></tr></thead><tbody><tr><td style="text-align:center">N1</td><td style="text-align:center"><code>191.168.1.0</code></td><td style="text-align:center"><code>255.255.255.252</code></td><td style="text-align:center"><code>/30</code></td></tr><tr><td style="text-align:center">N2</td><td style="text-align:center"><code>191.168.1.4</code></td><td style="text-align:center"><code>255.255.255.252</code></td><td style="text-align:center"><code>/30</code></td></tr><tr><td style="text-align:center">N3</td><td style="text-align:center"><code>191.168.1.32</code></td><td style="text-align:center"><code>255.255.255.224</code></td><td style="text-align:center"><code>/27</code></td></tr><tr><td style="text-align:center">N4</td><td style="text-align:center"><code>191.168.1.64</code></td><td style="text-align:center"><code>255.255.255.192</code></td><td style="text-align:center"><code>/26</code></td></tr><tr><td style="text-align:center">N5</td><td style="text-align:center"><code>191.168.1.128</code></td><td style="text-align:center"><code>255.255.255.128</code></td><td style="text-align:center"><code>/25</code></td></tr></tbody></table></li><li><p>规划好给各个接口分配什么 IP 地址</p><ul><li>经过上面的分析，划分了 5 个子网，现在将他们填写到图上便于后续分配 IP 地址给各个接口</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103134258.png" alt="image-20211103134258370"></p><ul><li><p>到这一步已经知道了每个区域的 IP 地址范围，但是有个细节就是：主机号全为 ‘0’ 和全为 ‘1’ 的地址不可分配，一个是网络地址，一个是广播地址</p><p>下面举例说明</p><blockquote><p>N1</p><p>N1 网段的子网掩码为 255.255.255.128</p><p>第四段写为为二进制   255.255.255.10000000</p><p>子网掩码为 1 的位表示网络位，为 0 的位表示会主机位</p><p>所以该网段的主机位为后面 7 位，也就是黄色框住的</p><p>所以当主机位全为 ‘0’ 时 IP 地址为 192.168.1.128</p><p>​                  全为 ‘1’ 时 IP 地址为 192.168.1.255</p><p>那么这两个 IP 地址都不可以分配给接口使用</p><p>可分配 IP：192.168.1.129 ~ 192.168.1.254</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103135032.png" alt="image-20211103135032205"></p><blockquote><p>N2</p><p>同理，黄色区域为主机位</p><p>不可以分配 IP 为：192.168.1.64 和 192.168.1.127</p><p>可分配 IP：192.168.1.65 ~ 192.168.1.126</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103135833.png" alt="image-20211103135833752"></p><blockquote><p>N3、N4、N5 如图</p><p>黄色为主机号，两个红色 IP 不可分配</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103140116.png" alt="image-20211103140115961"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103140231.png" alt="image-20211103140231174"></p></li><li><p>知道每个网段都有两个地址（主机号全为 0 和 1）不可以分配后，先规划好各个接口分配哪个 IP</p><p>我的分配思路：每个网段的可分配 IP 的前两个给 PC 主机，最后一个给路由器与交换机的接口，当然 N4 和 N5 只有两个可用 IP 刚好分配给两个接口</p><p>具体如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103141455.png" alt="image-20211103141455327"></p></li></ul></li><li><p>给每个接口分配 IP 地址</p><blockquote><p>先配路由器，从左到右依次改名为：R1、R2、R3</p></blockquote><ul><li><p>R1：配置两个接口：fa0/0、se2/0</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103142516.png" alt="image-20211103142516419"></p></li><li><p>R2：配置三个接口：fa0/0、se2/0、se3/0，并且给 se2/0 和 se3/0 设置时钟频率为 64000</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103211757.png" alt="image-20211103211756978"></p></li><li><p>R3：配置两个接口：fa0/0、se2/0</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103142905.png" alt="image-20211103142905214"></p></li></ul><blockquote><p>然后手动配置 PC IP地址、子网掩码和网关，网关就是连接的路由器的那个接口 IP</p></blockquote><ul><li><p>PC1 和 PC2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103144040.png" alt="image-20211103144040545"></p></li><li><p>PC3 和 PC4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103144255.png" alt="image-20211103144255822"></p></li><li><p>PC5 和 PC6</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103144414.png" alt="image-20211103144413997"></p></li></ul></li><li><p>测试在同一个子网的 PC 是连通的，在不同子网是不连通的</p><blockquote><p>同一子网测试通信</p><p>PC1 ping PC2 通</p><p>R1 ping PC1 和 PC2 通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103144752.png" alt="image-20211103144752789"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103145049.png" alt="image-20211103145049348"></p><blockquote><p>不同子网测试通信</p><p>PC1 ping PC3、PC5 均不通</p><p>R1 ping PC3、PC5 均不通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103144849.png" alt="image-20211103144849240"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103145240.png" alt="image-20211103145239959"></p><blockquote><p>路由器之间 ping，R1 和 R2 通、R1 和 R3 不通、R2 和 R3 通</p></blockquote></li><li><p>配置静态路由表达到全部可通信</p><blockquote><p>配置路由表双向都要配，不然配一方的话，数据能传过去，但是对方发送数据传不过来</p></blockquote><ul><li><p>R1：需要配置两条静态路由，一条是针对 N2 子网，一条是针对 N3 子网</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103151857.png" alt="image-20211103151857290"></p></li><li><p>R2：也需要两条，一条是针对 N1 子网，一条是针对 N3 子网</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103152436.png" alt="image-20211103152435965"></p></li><li><p>R3：也需要两条，一条是针对 N1 子网，一条是针对 N2 子网</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103181331.png" alt="image-20211103152719177"></p></li></ul><blockquote><p>由于 N1 子网设备向 N2 和 N3 子网设备通信都是通过 R2 的 se2/0 转发出去，那么可以使用<code>默认路由</code>简化添加路由表的条目</p><p>同理，N3 子网也可以设置默认路由</p><p>但是 R2 不可以设置默认路由，因为它连接了两个路由，必须指定通往子网的下一跳</p></blockquote><ul><li><p>对 R1 路由器配置：先删除原先配置的两条路由记录，再添加默认路由</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103182252.png" alt="image-20211103182252734"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103182542.png" alt="image-20211103182542512"></p></li><li><p>对 R3 路由器配置：先删除原先配置的两条路由记录，再添加默认路由</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103182918.png" alt="image-20211103182918491"></p></li></ul></li><li><p>配置好路由表之后，测试任何两台 PC 主机都是连通的</p><blockquote><p>PC1 ping PC3 和 PC5 均通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103152906.png" alt="image-20211103152906451"></p><blockquote><p>PC3 ping PC1 和 PC5 均通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103153004.png" alt="image-20211103153004479"></p><blockquote><p>PC5 ping PC1 和 PC3 均通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103153103.png" alt="image-20211103153103230"></p></li><li><p>最后整理一下拓扑图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211103184120.png" alt="image-20211103184120562"></p></li></ol><h2 id="补充知识">补充知识</h2><ol><li><p>IP 地址分类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">A 类地址：为高位为 0</span><br><span class="line"></span><br><span class="line">网络号全零不可用</span><br><span class="line">00000000 00000000 00000000 00000000 --&gt; 0.0.0.0</span><br><span class="line">00000000 00000000 00000000 00000001 --&gt; 0.0.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">00000000 11111111 11111111 11111110 --&gt; 0.255.255.254</span><br><span class="line">00000000 11111111 11111111 11111111 --&gt; 0.255.255.255</span><br><span class="line">==================可用地址区间=====================</span><br><span class="line">00000001 00000000 00000000 00000000 --&gt; 1.0.0.0</span><br><span class="line">00000001 00000000 00000000 00000001 --&gt; 1.0.0.1可用的最小IP</span><br><span class="line">00000001 00000000 00000000 00000010 --&gt; 1.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########################私有地址########################</span></span></span><br><span class="line">00001010 00000000 00000000 00000000 --&gt;  10.0.0.0</span><br><span class="line">00001010 00000000 00000000 00000001 --&gt;  10.0.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">00001010 11111111 11111111 11111101 --&gt;  10.255.255.253</span><br><span class="line">00001010 11111111 11111111 11111110 --&gt;  10.255.255.254</span><br><span class="line">00001010 11111111 11111111 11111111 --&gt;  10.255.255.255</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################</span></span></span><br><span class="line">.... .... .... ....</span><br><span class="line">01111110 11111111 11111111 11111101 --&gt; 126.255.255.253</span><br><span class="line">01111110 11111111 11111111 11111110 --&gt; 126.255.255.254可用的最大IP</span><br><span class="line">01111110 11111111 11111111 11111111 --&gt; 126.255.255.255</span><br><span class="line">=======================================================</span><br><span class="line">网络号为127的作为保留网段</span><br><span class="line">01111111 00000000 00000000 00000000 --&gt; 127.0.0.0</span><br><span class="line">01111111 00000000 00000000 00000001 --&gt; 127.0.0.1</span><br><span class="line">01111111 00000000 00000000 00000010 --&gt; 127.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line">01111111 11111111 11111111 11111101 --&gt; 127.255.255.253</span><br><span class="line">01111111 11111111 11111111 11111110 --&gt; 127.255.255.254</span><br><span class="line">01111111 11111111 11111111 11111111 --&gt; 127.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">B 类地址：最高位为 10</span><br><span class="line">10000000 00000000 00000000 00000000 --&gt; 128.0.0.0</span><br><span class="line">10000000 00000000 00000000 00000001 --&gt; 128.0.0.1可用的最小IP</span><br><span class="line">10000000 00000000 00000000 00000010 --&gt; 128.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########################私有地址########################</span></span></span><br><span class="line">10101100 00010000 00000000 00000000 --&gt; 172.16.0.0</span><br><span class="line">10101100 00010000 00000000 00000001 --&gt; 172.16.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">10101100 00011111 11111111 11111101 --&gt; 172.31.255.253</span><br><span class="line">10101100 00011111 11111111 11111110 --&gt; 172.31.255.254</span><br><span class="line">10101100 00011111 11111111 11111111 --&gt; 172.31.255.255</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################</span></span></span><br><span class="line">.... .... .... ....</span><br><span class="line">10111111 11111111 11111111 11111101 --&gt; 191.255.255.253</span><br><span class="line">10111111 11111111 11111111 11111110 --&gt; 191.255.255.254 可用的最大IP</span><br><span class="line">10111111 11111111 11111111 11111111 --&gt; 191.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C 类地址：最高位为 110</span><br><span class="line">11000000 00000000 00000000 00000000 --&gt; 192.0.0.0</span><br><span class="line">11000000 00000000 00000000 00000001 --&gt; 192.0.0.1可用的最小IP</span><br><span class="line">11000000 00000000 00000000 00000010 --&gt; 192.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########################私有地址########################</span></span></span><br><span class="line">11000000 10101000 00000000 00000000 --&gt; 192.168.0.0</span><br><span class="line">11000000 10101000 00000000 00000001 --&gt; 192.168.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">10101100 10101000 11111111 11111101 --&gt; 192.168.255.253</span><br><span class="line">10101100 10101000 11111111 11111110 --&gt; 192.168.255.254</span><br><span class="line">10101100 10101000 11111111 11111111 --&gt; 192.168.255.255</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################</span></span></span><br><span class="line">.... .... .... ....</span><br><span class="line">11011111 11111111 11111111 11111101 --&gt; 223.255.255.253</span><br><span class="line">11011111 11111111 11111111 11111110 --&gt; 223.255.255.254 可用的最大IP</span><br><span class="line">11011111 11111111 11111111 11111111 --&gt; 223.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D 类地址：最高位为 1110</span><br><span class="line">11100000 00000000 00000000 00000000 --&gt; 224.0.0.0</span><br><span class="line">11100000 00000000 00000000 00000001 --&gt; 224.0.0.1可用的最小IP</span><br><span class="line">11100000 00000000 00000000 00000010 --&gt; 224.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line">11101111 11111111 11111111 11111101 --&gt; 239.255.255.253</span><br><span class="line">11101111 11111111 11111111 11111110 --&gt; 239.255.255.254 可用的最大IP</span><br><span class="line">11101111 11111111 11111111 11111111 --&gt; 239.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E 类地址：剩下的</span><br><span class="line">11110000 00000000 00000000 00000000 --&gt; 240.0.0.0</span><br><span class="line">11110000 00000000 00000000 00000001 --&gt; 240.0.0.1可用的最小IP</span><br><span class="line">11110000 00000000 00000000 00000010 --&gt; 240.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line">11111111 11111111 11111111 11111101 --&gt; 255.255.255.253</span><br><span class="line">11111111 11111111 11111111 11111110 --&gt; 255.255.255.254可用的最大IP</span><br><span class="line">11111111 11111111 11111111 11111111 --&gt; 255.255.255.255</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211102184039.png" alt="image-20211102184031999"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验二：vlan 配置以及 vlan 间通信</title>
      <link href="2021/10/22/vlan%E9%85%8D%E7%BD%AE/"/>
      <url>2021/10/22/vlan%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1>实验二：vlan 配置以及 vlan 间通信</h1><blockquote><p>步骤如下</p></blockquote><ol><li><p>根据拓扑图搭建好框架</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022202203.png" alt="image-20211022202203068"></p><blockquote><p><code>FastEthernet</code>是百兆以太网口</p><p><code>GigbitEthernet</code>是千兆以太网口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211026165350.png" alt="image-20211026165343027"></p><p>后面的配置中需要知道每台 PC 主机连接到交换机的接口编号，如果没有，到设置中打开</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022191330.png" alt="image-20211022191330941"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022191421.png" alt="image-20211022191421852"></p></li><li><p>配置 vlan</p><ul><li><p>step1：对各个主机划分不同 <code>vlan</code> ，根据此实验要求，vlan 划分见下表</p><table><thead><tr><th>主机名称</th><th>处于哪一个 vlan</th></tr></thead><tbody><tr><td>PC0</td><td>vlan 1</td></tr><tr><td>PC1</td><td>vlan 1</td></tr><tr><td>PC2</td><td>vlan 2</td></tr><tr><td>PC3</td><td>vlan 3</td></tr><tr><td>PC4</td><td>vlan 4</td></tr><tr><td>PC5</td><td>vlan 2</td></tr></tbody></table></li><li><p>step2：将 PC 主机划分到所处的 vlan 中</p><blockquote><p>在进行 vlan 划分之前，可以先把信息填写到拓扑图上，这样更清晰</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022202238.png" alt="image-20211022202238519"></p><blockquote><p>先对左边交换机进行 vlan 划分的配置</p><p>先改名为 S1 （为了区分并记忆）</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022192712.png" alt="image-20211022192712089"></p><blockquote><p>用命令 <code>show vlan</code> 查看交换机 vlan 配置</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022193147.png" alt="image-20211022193147034"></p><blockquote><p>可以看到交换机的各个接口默认处于 vlan 1</p><p>因此交换机连接的 PC0 和 PC1 接口不用进行 vlan 配置（它们所处的交换机接口默认为 vlan 1）</p><p>下面将 PC2 配置到 valn 2 上</p></blockquote><p>先创建 vlan 2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022193420.png" alt="image-20211022193420756"></p><p>然后把 PC2 划分（设置）到 vlan 2 中</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022194406.png" alt="image-20211022194406603"></p><blockquote><p>经过上面的演示知道怎么创建 vlan 和划分 vlan，下面简单对右边交换机配置下</p></blockquote><p>先创建 vlan 2、vlan 3、vlan 4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022200844.png" alt="image-20211022200844669"></p><p>然后根据拓扑图上的注释对各个 PC 主机划分到对应 vlan 中</p><p><code>PC3(fa0/1) -&gt; vlan 3</code></p><p><code>PC4(fa0/2) -&gt; vlan 4</code></p><p><code>PC5(fa0/3) -&gt; vlan 2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022202734.png" alt="image-20211022202734764"></p></li></ul></li><li><p>vlan 划分好了，现在给每个 vlan 分配网段，以及给每个 PC 主机静态分配 IP地址</p><blockquote><p>下面表格一些高亮的数字：<code>91、92、93、94</code> 就是<strong>分配给大家的网段，每个人都不同，使用自己的数字分配即可</strong></p></blockquote><blockquote><p>同一 vlan 下的 PC 主机的 IP 需要和该 vlan 网段一致</p><p>比如 vlan 1 设置为 192.168.91.0，那么所处该 vlan 1 的 PC0 和 PC1 这两台主机的 IP 前面三位固定就是 192.168.91，最后是主机号，自己分配</p><p>这里分配 100、110、120、130、140、150，只是为了与 PC 编号对应</p></blockquote><table><thead><tr><th>主机名称</th><th>主机 IP</th><th>处于哪一个 vlan</th><th>各个 vlan 的网段</th></tr></thead><tbody><tr><td>PC0</td><td>192.168.<code>91</code>.100</td><td>vlan 1</td><td>192.168.<code>91</code>.0    255.255.255.0</td></tr><tr><td>PC1</td><td>192.168.<code>91</code>.110</td><td>vlan 1</td><td>192.168.<code>91</code>.0    255.255.255.0</td></tr><tr><td>PC2</td><td>192.168.<code>92</code>.120</td><td>vlan 2</td><td>192.168.<code>92</code>.0    255.255.255.0</td></tr><tr><td>PC3</td><td>192.168.<code>93</code>.130</td><td>vlan 3</td><td>192.168.<code>93</code>.0    255.255.255.0</td></tr><tr><td>PC4</td><td>192.168.<code>94</code>.140</td><td>vlan 4</td><td>192.168.<code>94</code>.0    255.255.255.0</td></tr><tr><td>PC5</td><td>192.168.<code>92</code>.150</td><td>vlan 2</td><td>192.168.<code>92</code>.0    255.255.255.0</td></tr></tbody></table><p>然后将这些信息填写上去，便于后续配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022205056.png" alt="image-20211022205056579"></p><p>其实 vlan 的网段并不需要设置，只是规定这个区间就是 vlan 1，那个区间就是 vlan 2 …</p><p>只需要对 PC 设置 IP 地址，下面演示一个，剩余 5 个自行配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022205729.png" alt="image-20211022205728897"></p></li><li><p>都设置好了之后，验证不同 vlan 间的计算机不能通信</p><blockquote><p>如果没有配错的话，现在只有 PC0 和 PC1 是可通信的，因为他们同属一个 vlan，并连接在一个交换机上</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022210403.png" alt="image-20211022210403839"></p></li><li><p>实现不同 vlan 间通信</p><ul><li><p>step1：在三层交换机上也要创建相应的 vlan （vlan 2、vlan 3、vlan 4）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022210854.png" alt="image-20211022210854830"></p></li><li><p>step2：给每一个 vlan 的虚接口配置 ip 地址，该 ip 地址作为该网段的网关地址</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022213824.png" alt="image-20211022211559672"></p></li><li><p>设置好网关之后，为每台 PC 主机配置相对应的网关</p><p>可以先用 <code>show run</code>命令查看各个 vlan 的网关地址</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022214123.png" alt="image-20211022214123229"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022214110.png" alt="image-20211022214110199"></p><blockquote><p>这个也就是刚刚设置的，然后我们为每台 PC 主机设置网关，同一 vlan 网关相同</p><p>每台 PC 主机都要设置好</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022214608.png" alt="image-20211022214608236"></p></li></ul></li><li><p>交换机相连的接口工作模式设置为trunk模式，并添加容许通过的 vlan</p><blockquote><p>图中这些接口均要设置为 trunk 模式，即交换机互相连接的 4 个接口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022211839.png" alt="image-20211022211839671"></p><blockquote><p>先对 SW1交换机 的 g0/2 口设置为 trunk 工作模式</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022212301.png" alt="image-20211022212301191"></p><blockquote><p>同理，设置 SW2交换机 的 g0/2 口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022212539.png" alt="image-20211022212538975"></p><blockquote><p>同理，对 L3SW1 交换机配置 g0/1 和 g0/2 口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022213108.png" alt="image-20211022213108303"></p><blockquote><p>此时，测试各个主机是否可通信，结果还是只有 PC0 和 PC1 可通信，其他均不可</p></blockquote></li><li><p>最后，在三层交换机上启用路由功能，就可实现各个 vlan 间通信了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022213452.png" alt="image-20211022213452373"></p><blockquote><p>然后验证各个主机是否可通信，<strong>截图粘贴到 word 中</strong></p></blockquote><blockquote><p>不出意外每台主机都是可以互相通信的，如果发现不能互通，检查自己是否哪里少了步骤，或者哪里配置错误</p></blockquote></li></ol><blockquote><p>最后：交换机配置好了记得用 <code>write memory</code> 保存</p><p>不保存的话，你关闭了软件之后重新打开这个实验文件（pkt 文件），前面对交换机的配置就都没有了！！！</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211022221744.png" alt="image-20211022221744502"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vlan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wallpaper Engine 壁纸提取</title>
      <link href="2021/10/10/Wallpaper%20Engine%20%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96/"/>
      <url>2021/10/10/Wallpaper%20Engine%20%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如何把 Wallpaper Engine 壁纸提出出来？</p><p>看到一个博客说是找到 GitHub 上一个开源项目，然后本地编译，利用编译好的程序代码，然后写好脚本</p><p>具体教程 <a href="https://www.zhihu.com/question/277034435">https://www.zhihu.com/question/277034435</a></p><p>下面记录一下操作过程，使用更加简单</p></blockquote><ol><li><p>将开源项目：<a href="https://github.com/notscuffed/repkg">https://github.com/notscuffed/repkg </a> 拉取到本地</p></li><li><p>然后用 Visual Studio 打开这个箭头文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011103951.png" alt="image-20211011103944600"></p></li><li><p>执行不调试</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011104034.png" alt="image-20211011104034391"></p></li><li><p>这个目录就是一些编译后的文件，我们可以把这些文件复制到一个容易找到的地方（就放这里也可以，强迫症想换一个位置）</p><p>我是放到了 E:\Tools\pkgToPng</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011104145.png" alt="image-20211011104145407"></p></li><li><p>写一个脚本文件（.bat 文件）和编译后的文件放在一起：名称任取</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011104535.png" alt="image-20211011104535950"></p><blockquote><p>如 pkg.bat 内容如下</p></blockquote><p>两个 move 用来移动提取的壁纸到指定位置，比如我这里把壁纸就是移动到 E:\Tools\pkgToPng\photo 下</p><p>rd 是删除提取文件（因为提取文件不仅仅是一张壁纸，还有很多个文件），这里不删除也行，但是还是删除一下，占空间</p><p>然后 explorer 后面带的是需要打开的文件目录</p><p>exit 退出终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;RePKG.exe&quot; extract ./scene.pkg</span><br><span class="line">move output\materials\*.jpg E:\Tools\pkgToPng\photo</span><br><span class="line">move output\materials\*.png E:\Tools\pkgToPng\photo</span><br><span class="line">rd output /s /q</span><br><span class="line">explorer E:\Tools\pkgToPng\photo</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>然后我们把这个路径添加环境变量，便于后面用 CMD 使用该脚本</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011110534.png" alt="image-20211011110508791"></p></li><li><p>使用方法</p><p>先在 Wallpaper Engine 找到壁纸在文件管理器打开</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011105247.png" alt="image-20211011105247588"></p><p>然后在此路径下打开 CMD</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011110013.png" alt="image-20211011110013607"></p><p>之后输入上面脚本的名称，我这里是 <strong>pkg.bat</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211011110159.png" alt="image-20211011110159950"></p></li><li><p>success</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信技术[基础]</title>
      <link href="2021/09/27/%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/"/>
      <url>2021/09/27/%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<hr><h1>通信技术演变图</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211004133625.png" alt="image-20211004133625476"></p><blockquote><p>改图截取自：<a href="https://www.bilibili.com/video/BV1hE411P7k3?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1hE411P7k3?spm_id_from=333.999.0.0</a></p></blockquote><h2 id="FDD-与-TDD">FDD 与 TDD</h2><p>FDD：频分复用，上行和下行的频率不同，互不干扰，可以同时传送数据（双车道）</p><p>TDD：时分复用，上行和下行使用一样的频率，不可以同时传送数据（单车道）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211004135753.png" alt="image-20211004135753846"></p><h2 id="技术家族">技术家族</h2><p>最上面一条是 3GPP 家族、中间是高通家族，目前电信的 2G、3G 在使用这个技术，最下面是 WiMax 家族，目前手机上似乎没有涉及到该通信技术</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211004134155.png" alt="image-20211004134155591"></p><h2 id="三大运营商">三大运营商</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">2G</th><th style="text-align:center">3G</th><th style="text-align:center">4G</th></tr></thead><tbody><tr><td style="text-align:center">移动</td><td style="text-align:center">GSM、GPRS、EDGE</td><td style="text-align:center">TD-SCDMA</td><td style="text-align:center">TDD-LTE、FDD-LTE</td></tr><tr><td style="text-align:center">联通</td><td style="text-align:center">GSM、GPRS、EDGE</td><td style="text-align:center">WCDMA</td><td style="text-align:center">FDD-LTE</td></tr><tr><td style="text-align:center">电信</td><td style="text-align:center">CMDA 1x</td><td style="text-align:center">CMDA 2000</td><td style="text-align:center">FDD-LTE</td></tr></tbody></table><blockquote><p>移动现已没有了 3G（TD-SCDMA），从 18 年开始部署 FDD-LTE 技术</p></blockquote><h3 id="单卡双待、VoLTE和CSFB-技术">单卡双待、VoLTE和CSFB 技术</h3><blockquote><p>4G 的 LTE 技术只是用于上网，并不可以进行语音通话，那么当你正使用 4G 网络时候，来了一个电话要怎么接听呢？</p><p>4G 本身是不可以进行语音通话，2、3G 可以，所以我们就要将网络转变为 2/3G</p></blockquote><p><strong>CSFB</strong> 技术就是实现在接听电话的时候将 4G 网络退回到 2/3G</p><p>如果不可以回落的话，比如电信的 2/3G 使用的是高通的技术，但是 4G 使用的是 3GPP 技术，其不可以直接从 4G 到 3G，那么要打电话就要用 <strong>单卡双待</strong> 技术实现</p><p>移动：由于现在没有了 3G 所以打电话的时候网络就会回落到 2G</p><p>联通：打电话网络回落到 3G</p><p>电信：技术不同，不能直接回落到 3G，使用了 <strong>单卡双待</strong> 技术就是同时会有两个网络频段，比如通知栏（LTE\1X）</p><p>单卡双待和 CSFB 都有缺陷，后来出现了 VoLTe 技术，VoLTE 就可以不回退网络直接在 4G 网络下打电话</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络是怎样连接的</title>
      <link href="2021/09/27/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/"/>
      <url>2021/09/27/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>从在浏览器中输入网址，到屏幕上显示出网页的内容，在这个只有几秒钟的过程中，很多硬件和软件都在各自的岗位上相互配合完成了一系列的工作。本书将以探索之旅的形式，带领大家探索这一系列工作中的每一个环节。每个单独的环节都并不复杂，只要仔细阅读就一定能够理解。不过，探索之旅中出现的硬件和软件数量庞大，如果仅从微观的视角关注每一个单独的点，可能就会因为看不到整体而迷失了方向。因此，在真正出发开始探索之前，我们先来对这次探索之旅作个简单的介绍。下面的介绍中还包含一张探索之旅的路线图，万一在旅途中迷失了方向，请大家务必回来看一看这张地图</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927085209.png" alt="image-20210927085202434"></p><blockquote><p>大纲，章节目录</p></blockquote><ol><li>Web 浏览器</li><li>协议栈、网卡</li><li>集线器、交换机、路由器</li><li>接入网、网络运营商</li><li>防火墙、缓存服务器</li><li>Web 服务器</li></ol><blockquote><p>本书关键字，按照章节</p></blockquote><ol><li><p>浏览器生成消息</p><p>浏览器、Web 服务器、网址（URL）、HTTP、HTML、协议、URI、请求消息、解析器、Socket 库、DNS 服务器、域名</p></li><li><p>用电信号传输 TCP/IP 数据</p></li><li></li></ol><hr><h1>第一章 浏览器生成消息</h1><blockquote><p>qu：浏览器等网络应用程序实际上并不具备网络控制功能</p></blockquote><p>应用程序并不是自己控制网络，而是委托操作系统（协议栈）来控制网络</p><h2 id="1-1-生成-HTTP-请求消息">1.1 生成 HTTP 请求消息</h2><h3 id="1-1-1-输入网址开始">1.1.1 输入网址开始</h3><p>URL 会以 <code>http:、ftp:、file:、mailto:</code> 等作为开头，简单理解为这些开头是给浏览器一个访问方法，告诉浏览器访问的是什么服务器。比如 ”http:“ 访问 Web 服务器、”ftp:“ 访问 FTP 服务器。我们把这些开头文字理解为协议类型（HTTP 协议、FTP 协议等）</p><p>通常 URL 会包含<code>服务器的域名和要访问的文件的路径名</code>而发邮件的 URL 则包含收件人的邮件地址，此外，根据需要，URL 中还会包含用户名、密码、服务器端口号等信息。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927092730.png" alt="image-20210927092730697"></p><h3 id="1-1-2-浏览器解析-URL">1.1.2 浏览器解析 URL</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927093039.png" alt="image-20210927093039572"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927093117.png" alt="image-20210927093117912"></p><h3 id="1-1-3-省略文件名情况">1.1.3 省略文件名情况</h3><blockquote><p>浏览器的第一步工作就是对 URL 进行解析</p></blockquote><ol><li><p><a href="http://www.lab.glasscom.com/dir/">http://www.lab.glasscom.com/dir/</a></p><p>很清楚，访问 dir 目录下设置的默认文件，大多数情况是 index.html、default.htm</p></li><li><p><a href="http://www.lab.glasscom.com/">http://www.lab.glasscom.com/</a></p><p>访问 / 目录下的默认文件</p></li><li><p><a href="http://www.lab.glasscom.com">http://www.lab.glasscom.com</a></p><p>没有写目录，代表访问根目录下事先设置的默认文件</p></li><li><p><a href="http://www.lab.glasscom.com/whatisthis">http://www.lab.glasscom.com/whatisthis</a></p><p>whatisthis 后面没有 <code>/</code>很容易理解为是一个文件，其实实际上很多人会把目录后面的<code>/</code>省略不写。所以这种情况下，如果 Web 服务器上存在名为 whatisthis 的文件，就当做文件名处理，如果存在名为 whatisthis 的目录，就当做目录名来处理</p><blockquote><p>我们无法创建两个名字相同的文件和目录，因此不可能既有一个名为 whatisthis 的文件，同时又有一个名为whatisthis 的目录。只要查询一下磁盘中的文件和目录，就可以知道whatisthis 究竟是一个文件还是一个目录了，并不会产生歧义。</p></blockquote></li></ol><h3 id="1-1-4-HTTP-基本思路">1.1.4 HTTP 基本思路</h3><p>解析完 URL 之后，我们就知道应该要访问的目标在哪里了。接下来，浏览器会使用 HTTP 协议来访问 Web 服务器。</p><p>HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤，其基本思路非常简单。</p><p>首先，客户端会向服务器发送请求消息（图1.4）。请求消息中包含的内容是“对什么”和“进行怎样的操作”两个部分。其中相当于“对什么”的部分称为 URI。一般来说，URI 的内容是一个存放网页数据的文件名或者是一个 CGI 程序的文件名，例如“/dir1/file1.html” “/dir1/program1.cgi”等。不过，URI 不仅限于此，也可以直接使用“http:”开头的 URL 来作为URI。换句话说就是，这里可以写各种访问目标，而这些访问目标统称为 URI。相当于接下来“进行怎样的操作”的部分称为方法。方法表示需要让 Web 服务器完成怎样的工作，其中典型的例子包括读取 URI 表示的数据、将客户端输入的数据发送给 URI 表示的程序等。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927094234.png" alt="image-20210927094234455"></p><p>响应消息的<code>状态码</code>（<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">详情</a>）表示操作的执行结果是成功还是错误，比如找不到文件就显示 404 Not Found 的错误信息</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927095645.png" alt="image-20210927095645155"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927094951.png" alt="image-20210927094951494"></p><blockquote><p>GET 方法能够发送的数据只有几百个字节，如果表单中的数据超过这一长度，则必须使用POST 方法来发</p></blockquote><h3 id="1-1-5-生成-HTTP-请求消息">1.1.5 生成 HTTP 请求消息</h3><p>请求消息是从在浏览器顶部的地址栏中输入网址开始的，但浏览器并非只有在这一种场景下才会向Web 服务器发送请求消息。比如点击网页中的超级链接，或者在表单中填写信息后点击“提交”按钮，这些场景都会触发浏览器的工作，而选用哪种方法也是根据场景来确定的。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927101534.png" alt="image-20210927101534804"></p><ol><li>第一行：末尾要写上 HTTP 的版本号，为了表示该消息是基于哪个版本的 HTTP 规格编写的</li><li>第二行：称为 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">消息头</a>，保存一些额外的详细信息。消息头的规格中定义了很多项目，如日期、客户端支持的数据类型、语言、压缩格式、客户端和服务器的软件名称和版本、数据有效期和最后更新时间等</li><li>写完消息头之后，还需要添加一个完全没有内容的空行，然后写上需要发送的数据。这一部分称为消息体，也就是消息的主体。不过，在使用 GET 方法的情况下，仅凭方法和 URI，Web 服务器就能够判断需要进行怎样的操作，因此消息体中不需要填写任何数据。消息体结束之后，整个消息也就结束了</li></ol><blockquote><p>表单请求消息在 HTML 中的代码</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927102106.png" alt="image-20210927102106088"></p><h3 id="1-1-6-发送请求后会收到响应">1.1.6 发送请求后会收到响应</h3><p>响应消息的格式以及基本思路和请求消息是相同的（图1.5（b）），差别只在第一行上。在响应消息中，第一行的内容为<code>状态码</code>和<code>响应短语</code>，用来表示请求的执行结果是成功还是出错。状态码和响应短语表示的内容一致，但它们的用途不同。状态码是一个数字，它主要用来向程序告知执行的结果（表1.3）；相对地，响应短语则是一段文字，用来向人们告知执行的结果。</p><p>返回响应消息之后，浏览器会将数据提取出来展现在屏幕上，如果这个网页之后文字就结束了，如果里面还有图片资源，浏览器就还要给 Web 服务器发送请求消息。由于每条请求消息只能写一个 URI，即每次只能能获取一个文件，所以有多少张图片就要发送多少个请求消息。</p><p>判断所需的文件，然后获取这些文件并显示在屏幕上，这一系列工作的整体指挥也是浏览器的任务之一，而 Web 服务器却毫不知情。Web 服务器完全不关心这 4 条请求获取的文件到底是 1 个网页上的还是不同网页上的，它的任务就是对每一条单独的请求返回 1 条响应而已。</p><blockquote><p>1 条请求消息中只能写1 个URI。如果需要获取多个文件，必须对每个文件单独发送1 条请求。</p></blockquote><blockquote><p>示例：我们需要获取一张名为 sample1.htm 的网页，网页中包含一张名为 picture.jpg 的图片</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927122123.png" alt="Snipaste_2021-09-27_12-14-52"></p><h2 id="1-2-向-DNS-服务器查询-Web-服务器的-IP-地址">1.2 向 DNS 服务器查询 Web 服务器的 IP 地址</h2><h3 id="1-2-1-IP-地址的基本知识">1.2.1 IP 地址的基本知识</h3><p>生成了 HTTP 消息之后，我们就要委托操作系统的协议栈将消息发送给 Web 服务器，虽然浏览器能够解析网址生成 HTTP 消息，但是不具备将消息发送到网络的功能</p><p>但是在此之前我们还需要一个工作，就是将服务器的域名转化为 IP 地址，这样才能访问到域名所指向的服务器。</p><blockquote><p>IP 的表示方法</p></blockquote><p>32 位二进制数，每 8 个为一组（即化为十进制最大为 2^8^ - 1 = 255），习惯上转化为十进制数</p><p><code>/</code>后面为子网掩码，与 IP 地址一样是 32 位二进制数，子网掩码为 1 的部分表示网络号，子网掩码为 0 的部分表示主机号。将子网掩码按照和 IP 地址一样的方式以每 8 比特为单位用圆点分组后写在 IP 地址的右侧。</p><p>子网掩码的两种写法：</p><ol><li>10.11.12.13/255.255.255.0</li><li>10.11.12.13/24</li></ol><p>后者 24 即表示从左边数有多少个 1，3 组 8 位即有 24 个 1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210927134157.png" alt="image-20210927134157904"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003090232.png" alt="image-20211003090232749"></p><p>顺带一提，主机号部分的比特全部为 0 或者全部为 1 时代表两种特殊的含义</p><p>IP 地址的主机号</p><ul><li>全 0：表示整个子网</li><li>全 1：表示向子网上所有设备发送包，即“广播”</li></ul><h3 id="1-2-2-IP-和-子网掩码并用理由">1.2.2 IP 和 子网掩码并用理由</h3><h3 id="1-2-3-Socket-库提供查询-IP-地址的功能">1.2.3 Socket 库提供查询 IP 地址的功能</h3><blockquote><p>Socket 库是用于调用网络功能的程序组件集合</p></blockquote><blockquote><p>DNS：Domain Name System，域名服务系统。将服务器名称和 IP 地址进行关联是 DNS 最常见的用法</p><p>通过 DNS 查询 IP 地址的操作称为域名解析，因此负责执行解析（resolution）这一操作的就叫解析器（resolver）了</p><p>解析器实际上是一段程序，它包含在操作系统的 Socket 库中，Socket 库中包含很多用于发送和接收数据的程序组件</p></blockquote><p>我们电脑本地具有 DNS 客户端（DNS 解析器），可以进行更改，<a href="https://cloud.tencent.com/developer/article/1352604">全国DNS服务器IP大全</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003091159.png" alt="image-20211003091159096"></p><h3 id="1-2-4-通过解析器向-DNS-服务器发出查询">1.2.4　通过解析器向 DNS 服务器发出查询</h3><p>在编写浏览器等应用程序的时候，只要像图1.11 这样写上解析器的程序名称“gethostbyname”以及Web 服务器的域名“<a href="http://www.lab.glasscom.com">www.lab.glasscom.com</a>”就可以了，这样就完成了对解析器的调用</p><p>浏览器在向 Web 服务器发送消息时，只要从该内存地址取出 IP 地址，并将它与 HTTP 请求消息一起交给操作系统就可以了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003092104.png" alt="image-20211003092104311"></p><blockquote><p>根据域名查询IP 地址时，浏览器会使用Socket 库中的解析器。</p></blockquote><h3 id="1-2-5-解析器的内部原理">1.2.5　解析器的内部原理</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003095002.png" alt="image-20211003095002008"></p><h2 id="1-3-全世界-DNS-服务器的大接力">1.3 全世界 DNS 服务器的大接力</h2><h3 id="1-3-1-DNS-服务器的基本工作">1.3.1 DNS 服务器的基本工作</h3><p>客户端的查询方式包括 3 种信息</p><ol><li>域名：服务器、邮件服务器（邮件地址中@ 后面的部分）的名称</li><li>Class：在最早设计DNS 方案时，DNS 在互联网以外的其他网络中的应用也被考虑到了，而Class 就是用来识别网络的信息。不过，如今除了互联网并没有其他的网络了，因此Class 的值永远是代表互联网的IN</li><li>记录类型：表示域名对应何种类型的记录。例如，当类型为A 时，表示域名对应的是IP 地址；当类型为MX 时，表示域名对应的是邮件服务器。对于不同的记录类型，服务器向客户端返回的信息也会不同</li></ol><p>DNS 服务器上事先保存有前面这3 种信息对应的记录数据，如图1.14所示。DNS 服务器就是根据这些记录查找符合查询请求的内容并对客户端作出响应的</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003095544.png" alt="image-20211003095544054"></p><blockquote><p>例如，<a href="http://xn--www-eo8em63dsmaz65qi8d.lab.glasscom.com">如果要查询www.lab.glasscom.com</a> 这个域名对应的IP 地址，客户端会向 DNS 服务器发送包含以下信息的查询消息。<br>（a） 域名 = <a href="http://www.lab.glasscom.com">www.lab.glasscom.com</a><br>（b） Class = IN<br>（c） 记录类型 = A</p></blockquote><blockquote><p>DNS 服务器会从域名与IP 地址的对照表中查找相应的记录，并返回IP 地址。</p></blockquote><h3 id="1-3-2-域名的层次结构">1.3.2　域名的层次结构</h3><p>我们知道 IP 是一串以点分隔的字符串，以点分隔成多个部分，每个部分对应该层次的 DNS 服务器</p><p>比如，全国是一个最大的域，中国是全国域中的一个子集，中国的省份是中国域中的一个子集，就这样层层分隔下去</p><blockquote><p>实际上，由于一台DNS 服务器可以存放多个域的信息，因此并不是每个域名都有一台与之相对应的DNS 服务器。比如网络运营商的DNS 服务器中就存放了很多个域的信息</p></blockquote><h3 id="1-3-3-寻找相应的-DNS-服务器并获取-IP-地址">1.3.3　寻找相应的 DNS 服务器并获取 IP 地址</h3><p>根域几乎每个 DNS 服务器都保存有，只要访问任何一个 DNS 服务器都可以找到根域，来到根域然后一路找下去就可以找到需要查找的服务器 IP 了</p><blockquote><p>分配给根域DNS 服务器的 IP 地址在全世界仅有 13 个，而且这些地址几乎不发生变化，因此将这些地址保存在所有的DNS 服务器中也并不是一件难事</p><p>根域 DNS 服务器在运营上使用多台服务器来对应一个 IP 地址，因此尽管 IP 地址只有13 个，但其实服务器的数量是很多的</p></blockquote><p>下图客户端先访问最近的一台 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的DNS 服务器地址）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003100951.png" alt="image-20211003100951709"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003101439.png" alt="image-20211003101439097"></p><h3 id="1-3-4-通过缓存加快DNS-服务器的响应">1.3.4　通过缓存加快DNS 服务器的响应</h3><p>通过上面的内容，并不是每个 DNS 服务器都只管理一个域，现实中上级域和下级域可能共享在一台 DNS 服务器中</p><p>此外，有时候并不需要从最上级的根域开始查找，因为 DNS 服务器有一个缓存功能，可以记住之前查询过的域名。如果要查询的域名和相关信息已经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间</p><blockquote><p>这个缓存机制中有一点需要注意，那就是信息被缓存后，原本的注册信息可能会发生改变，这时缓存中的信息就有可能是不正确的。因此，DNS 服务器中保存的信息都设置有一个有效期，当缓存中的信息超过有效期后，数据就会从缓存中删除。而且，在对查询进行响应时，DNS 服务器也会告知客户端这一响应的结果是来自缓存中还是来自负责管理该域名的 DNS 服务器</p></blockquote><h2 id="1-4-委托协议栈发送消息">1.4 委托协议栈发送消息</h2><h3 id="1-4-1-数据收发操作概览">1.4.1　数据收发操作概览</h3><p>知道目标服务器的 IP 地址之后，浏览器就可以委托操作系统内部的协议栈向该 IP 地址的服务器发送 HTTP 请求消息了</p><p>HTTP 消息是一种数字信息（digital data），因此可以说是委托协议栈发送数字信息。收发数字信息的这一操作并不局限于浏览器，对于使用网络的应用程序都是共通的</p><p>和向DNS 服务器查询 IP 地址的操作一样，这里也需要使用 Socket 库中的程序组件。不过，查询 IP 地址只需要调用一个程序组件就可以了，而这里需要按照指定的顺序调用多个程序组件，这个过程有点复杂</p><blockquote><p>向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调用 Socket 库中的程序组件</p></blockquote><p>收发数据的操作分为若干个阶段，可以大致总结为以下4 个</p><ol><li>创建套接字（创建套接字阶段）</li><li>将管道连接到服务器端的套接字上（连接阶段）</li><li>收发数据（通信阶段）</li><li>断开管道并删除套接字（断开阶段）</li></ol><h3 id="1-4-2-创建套接字阶段">1.4.2　创建套接字阶段</h3><ul><li><p>① 调用 Socke 库名为的 socket 程序组件就可以创建一个套接字了，套接字创建完成后，协议栈会返回一个描述符，应用程序会将收到的描述符放在内存中</p><p>描述符是用来识别不同的套接字的，可以理解为给套接字进行编号</p><p>当创建套接字后，我们就可以使用这个套接字来执行收发数据的操作了。这时，只要我们出示描述符，协议栈就能够判断出我们希望用哪一个套接字来连接或者收发数据了</p><blockquote><p>应用程序是通过“描述符”这一类似号码牌的东西来识别套接字的</p></blockquote></li><li></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003151308.png" alt="image-20211003151308652"></p><h3 id="1-4-3-连接阶段：把管道接上去">1.4.3　连接阶段：把管道接上去</h3><h3 id="1-4-4-通信阶段：传递消息">1.4.4　通信阶段：传递消息</h3><h3 id="1-4-5-断开阶段：收发数据结束">1.4.5　断开阶段：收发数据结束</h3><hr><h1>第2章 用电信号传输TCP/IP 数据</h1><h2 id="2-1-创建套接字">2.1 创建套接字</h2><h3 id="2-1-1-协议栈的内部结构">2.1.1 协议栈的内部结构</h3><blockquote><p>比如我们要在两个端系统上传送数据，应用是在应用层，如何实现两个端系统在应用层进行数据收发，这就要借助传输层提供的服务</p><p>我们要传输给对方数据</p><p>第一：需要知道对方的 IP 地址以及端口号，常见的 Web 服务器端口号为 80</p><p>第二：自身的 IP 以及应用也需要传送给对方</p><p>应用层里面有应用，应用跑在某个主机上面，</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211003160316.png" alt="image-20211003160316077"></p><h3 id="2-1-2-套接字的实体就是通信控制信息">2.1.2　套接字的实体就是通信控制信息</h3><h3 id="2-1-3-调用socket-时的操作">2.1.3　调用socket 时的操作</h3><h2 id="2-2-连接服务器">2.2　连接服务器</h2><h3 id="2-2-1-连接是什么意思">2.2.1　连接是什么意思</h3><h3 id="2-2-2-负责保存控制信息的头部">2.2.2　负责保存控制信息的头部</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="2021/09/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>2021/09/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><h1>第一章 引论</h1><ol><li><p>程序编译有几个阶段？各有什么功能？</p><ul><li>词法分析：从源程序中一个个读取字符，识别一个个单词</li><li>语法分析</li><li>语义分析</li><li>中间代码生成</li><li>代码优化</li><li>目标代码生成</li></ul></li><li><p>一个经典的编译程序由哪几部分组成？各有什么功能？</p><ul><li><p>词法分析程序</p></li><li><p>语法分析程序</p></li><li><p>语义分析程序</p></li><li><p>中间代码生成程序</p></li><li><p>代码优化程序</p></li><li><p>目标代码生成程序</p></li><li><p>出错处理程序</p></li><li><p>表格管理程序</p></li></ul></li></ol><h1>第二章 文法和语言</h1><blockquote><p>考点：文法、语言、短语、直接短语、句柄</p></blockquote><h2 id="文法的直观概念">文法的直观概念</h2><p>文法是一套规则集合，描述某一特征的符号串，可以说文法是以有穷的集合刻画无穷的集合的一个工具</p><h2 id="符号和符号串">符号和符号串</h2><blockquote><p>几个概念解释：</p></blockquote><ol><li><p>字母表（符号集）：元素的非空有穷集合，字母表中的元素称为符号。以汉语为例，汉语字母表就是各种汉字、数字、标点符号的集合；以英语为例，英语字母表就是各种字母、数字、标点符号的集合…那么到了编程，字母表就可能是字母、数字、各种专用符号和保留字了。</p></li><li><p>符号串：由字母表中的符号组成的任何 <strong>有穷序列</strong> 称为符号串</p><p>如 0101010001 就是字母表 A={0,1} 上的符号串</p><p>如果符号串 x 中有 m 个符号，称其长度为 m，记为 |x|=m，|ε|=0</p><ul><li><p>符号串的头尾，固有头、固有尾</p><p>比如 x=abcd</p><p>x 的头：ε、a、ab、abc、abcd</p><p>x 的固有头：ε、a、ab、abc</p><p>x 的尾：ε、d、cd、bcd、abcd</p><p>x 的固有尾：ε、d、cd、bcd</p><p>头除去本身字符串就是固有头、尾除去本身字符串就是固有尾</p><p>以后算文法符号之间优先级会看到，好比 z=x··· 只关注它的头 x ，而对其他不予关注；z=···x··· 只关注符号 x 再某处地方出现</p></li><li><p>符号串集合：了解闭包和正闭包</p><p>有一个字母表 <strong>Σ</strong>，如何描述字母表 <strong>Σ</strong> 上的所有有穷长的符号串的集合</p><p>比如字母表 <strong>Σ={a,b}</strong>，<strong>Σ</strong> 上的所有有穷长的串的集合就是只包含有 <strong>Σ</strong> 字母表中的符号的字符串的集合，即 {ε,a,b,ab,ba,aa,bb,aab,···}，后面还有很多，只要是该符号串中的元素没有 <strong>Σ</strong> 外的字符就属于该集合。</p><p>用闭包表示这个集合 <em><em>Σ</em>={ε,a,b,ab,ba,aa,bb,aab,···}</em>*，这样就表示了 <strong>Σ</strong> 上的所有有穷长的串的集合</p><p>闭包：<em><em>Σ</em> = Σ^0 ∪ Σ^1 ∪ Σ^2 ··· ∪ Σ^n ···</em>*</p><p>正闭包(与闭包相比，单纯的少了一个 ε)：<strong>Σ+ = Σ^1 ∪ Σ^2 ··· ∪ Σ^n ···</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211116154457.png" alt="image-20211116154457804"></p></li></ul></li></ol><h2 id="文法和语言的形式定义">文法和语言的形式定义</h2><blockquote><p>定义 2.1</p></blockquote><p>文法 G 定义为四元组 (Vn, Vt, P, S)，Vn ∩ Vt = ∅</p><ul><li>Vn：非终结符集</li><li>Vt：终结符集</li><li>P：为规则 (α–&gt;β) 的集合，α∈(Vn∪Vt)* 且至少包括一个非终结符，β∈(Vn∪Vt)*</li><li>S：识别符（开始符）</li></ul><blockquote><p>两个重要的定义：定义 2.5 和 定义 2.6 P23</p></blockquote><ol><li>定义 2.5：</li><li>定义 2.6：语言就是文法描述对象的集合，也就是一切句子的集合。</li></ol><h2 id="文法的类型">文法的类型</h2><blockquote><p>G = (Vn, Vt, P, S)，P 中的产生式用 α–&gt;β 表示</p></blockquote><ol><li>0 型文法：文法的定义</li><li>1 型文法（上下文有关的）：0 型基础上，右部长度 &gt;= 左边长度 即 <code>|β| &gt;= |α|</code></li><li>2 型文法（上下文无关的）：1 型基础上，<code>左边只是一个非终结符</code></li><li>3 型文法：2 型基础上，规定右部只能是一个终结符或者一个终结符跟一个非终结符 即 文法只能是以下两种情形<ul><li><code>A--&gt;aB</code></li><li><code>A--&gt;a</code></li></ul></li></ol><blockquote><p>文法：一套规则的集合，描述某一特征的符号串，以有穷的集合刻画无穷的集合的一个工具</p></blockquote><ol><li>什么是文法？</li><li>什么是语言？</li><li>什么是句型？什么是句子？（请举例回答）</li></ol><h1>第三章 词法分析</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平时遇到的错误</title>
      <link href="2021/08/23/EROOR/"/>
      <url>2021/08/23/EROOR/</url>
      
        <content type="html"><![CDATA[<hr><h1>命令报错</h1><h3 id="命令不存在">命令不存在</h3><blockquote><p>如</p><p>‘ipconfig’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p><p>netstat: The term ‘netstat’ is not recognized as a name of a cmdlet, function, script file, or executable program.<br>Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210823114517.png" alt="image-20210823114510645"></p><blockquote><p>解决方法</p></blockquote><p>环境变量 <code>Path</code> 添加 <code>%SystemRoot%\system32</code>，然后重新启动程序</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210823115022.png" alt="image-20210823115022392"></p><blockquote><p>意外发现，我们没有添加<code>%SystemRoot%\system32</code>这个系统变量的时候，点开 <code>Path</code>是像上图那种</p><p>添加之后是会列表展开，更加的好操作</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210823115308.png" alt="image-20210823115259608"></p><h3 id="打开服务报错">打开服务报错</h3><p><strong>报错信息</strong></p><blockquote><p><strong>System error 5 has occurred.</strong></p><p><strong>Access is denied.</strong></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210823115446.png" alt="image-20210823115446056"></p><p><strong>解决方法</strong></p><p>用<code>管理员权限</code>打开终端即可（搜索到终端，直接快捷键 <code>Ctrl+Shift+Enter</code>用管理员权限打开）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210823120144.png" alt="image-20210823120144590"></p><blockquote><p>注意：因为我这里的 MySQL 的环境变量是放在了 <code>管理员的变量</code>中，所以我使用非管理员用户会报错</p></blockquote><h1>MySQL</h1><h3 id="1366-报错-中文编码问题">1366 报错 - 中文编码问题</h3><p><strong>报错信息</strong></p><blockquote><p>ERROR 1366 (HY000): Incorrect string value: ‘\xE6\x9D\x8E\xE5\x8B\x87’ for column ‘Sname’ at row 1</p></blockquote><p><strong>解决方法</strong></p><ol><li><p>先查看表的编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ SHOW FULL COLUMNS FROM table_name;</span><br><span class="line"></span><br><span class="line">-- 如</span><br><span class="line">mysql&gt; SHOW FULL COLUMNS FROM Student;</span><br><span class="line">+-------+-------------+-------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Field | Type        | Collation         | Null | Key | Default | Extra | Privileges                      | Comment |</span><br><span class="line">+-------+-------------+-------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Sno   | char(9)     | latin1_swedish_ci | NO   | PRI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sname | char(20)    | latin1_swedish_ci | YES  | UNI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Ssex  | char(2)     | latin1_swedish_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sage  | smallint(6) | NULL              | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sdept | char(20)    | latin1_swedish_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">+-------+-------------+-------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>修改编码，此处修改字符集为 utf8，校对规则为 utf8_bin（区分大小写）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ALTER TABLE table_name CONVERT TO CHARACTER SET utf8 COLLATE utf8_bin;</span><br></pre></td></tr></table></figure></li><li><p>在此查看编码是否更改完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW FULL COLUMNS FROM Student;</span><br><span class="line">+-------+-------------+-----------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Field | Type        | Collation | Null | Key | Default | Extra | Privileges                      | Comment |</span><br><span class="line">+-------+-------------+-----------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Sno   | char(9)     | utf8_bin  | NO   | PRI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sname | char(20)    | utf8_bin  | YES  | UNI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Ssex  | char(2)     | utf8_bin  | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sage  | smallint(6) | NULL      | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sdept | char(20)    | utf8_bin  | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">+-------+-------------+-----------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>插入数据的时候，如果是数字则可以不用引号（即使定义为 char）</p><p><code>引号可以为单引号，也可以为双引号</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,李勇,男,20,CS);</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;李勇&#39; in &#39;field list&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,&quot;李勇&quot;,男,20,CS);</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;男&#39; in &#39;field list&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,&quot;李勇&quot;,&quot;男&quot;,20,CS);</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;CS&#39; in &#39;field list&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,&quot;李勇&quot;,&quot;男&quot;,20,&quot;CS&quot;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">-- 单引号</span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215122,&#39;刘晨&#39;,&#39;女&#39;,19,&#39;CS&#39;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wt ssh和通过ssh连接windows</title>
      <link href="2021/08/23/wt%20ssh%E5%92%8C%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5windows/"/>
      <url>2021/08/23/wt%20ssh%E5%92%8C%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5windows/</url>
      
        <content type="html"><![CDATA[<hr><h1>Windows Terminal 连接服务器</h1><blockquote><p>小知识：本地 Windows 上传文件到 服务器上</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824094902.png" alt="image-20210824094902139"></p><blockquote><p>Windows系统 连接服务器的软件有很多，比如 CMD、Powershell、git-bash、xshell 等等工具都可以通过 ssh 连接到服务器主机</p><p>下面我通过 Windows Terminal 连接服务器并添加一个启动项</p></blockquote><ol><li><p>直接在打开终端 ssh 连接，直接终端输连接命令即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824092418.png" alt="image-20210824092411666"></p></li><li><p>添加一个启动项（好处就是不用每次都输入 ssh 的连接命令）</p><ul><li><p>打开 Windows Terminal 的 json 文件进行编辑</p></li><li><p>找到 <code>list</code>这个地方（方括号是一个是数组）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824093537.png" alt="image-20210824093536967"></p></li><li><p>我们添加一个数组元素，即一个终端，内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;ssh root@121.4.26.166&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;4f338cc5-b9f0-4707-96de-16c856dbfd87&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CentOs7&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>guid 获取方式，在终端（在使用 ssh 连接的终端比如 cmd、wt）输入<code>New-Guid</code></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824093926.png" alt="image-20210824093926276"></p></li></ul></li></ol><h1>远程连接 Windows</h1><ol><li><p>打开设置（应用版块）安装 OpenSSH 服务器</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824100631.gif" alt=""></p></li><li><p>打开 Openssh 服务</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824103235.png" alt="image-20210824103235701"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824103453.png" alt="image-20210824103453033"></p></li><li><p>查看 22 端口是否开启</p><blockquote><p>未开启</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824095433.png" alt="image-20210824095433609"></p><blockquote><p>已开启</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824103822.png" alt="image-20210824103822524"></p></li><li><p>最后通过局域网的设备 ssh 登录到 Windows</p><p>但是我登录了很多次都不知道账户和密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824111043.png" alt="image-20210824111036045"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210824111211.png" alt="image-20210824111211288"></p></li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Terminal + Git-Bash</title>
      <link href="2021/08/19/Windows%20Terminal%20%E7%BE%8E%E5%8C%96/"/>
      <url>2021/08/19/Windows%20Terminal%20%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<hr><h1>Windows Terminal</h1><h2 id="先安装PowerShell">先安装PowerShell</h2><p><a href="https://github.com/PowerShell/PowerShell/releases">https://github.com/PowerShell/PowerShell/releases</a></p><blockquote><p>64位 Windows 可下载 msi 文件</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819165308.png" alt="image-20210819165308779"></p><h2 id="安装Windows-Terminal">安装Windows Terminal</h2><blockquote><p>打开微软商店，直接搜索 <code>Windows Terminal</code> 即可下载安装</p></blockquote><h2 id="安装-posh-git、oh-my-posh">安装 posh-git、oh-my-posh</h2><blockquote><p><a href="https://github.com/JanDeDobbeleer/oh-my-posh2">https://github.com/JanDeDobbeleer/oh-my-posh2</a></p></blockquote><p>打开 <code>WindowsTerminal</code>的 <strong>Powershell</strong>窗口</p><ol><li><p><code>post-git</code>加入的 <code>-Verbose</code>显示详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Install-Module posh-git -Scope CurrentUser</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> Install-Module posh-git -Verbose -Scope CurrentUser</span></span><br></pre></td></tr></table></figure><blockquote><p>成功安装在 E:\Multimedia Data\文档\PowerShell\Modules\ 这个目录下</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819152425.png" alt=""></p></li><li><p><code>oh-my-posh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Install-Module oh-my-posh -Scope CurrentUser</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> Install-Module oh-my-posh -Verbose -Scope CurrentUser</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819152548.png" alt="image-20210819152548228"></p></li></ol><h2 id="开启插件">开启插件</h2><ol><li><p>打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> notepad <span class="variable">$PROFILE</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819152900.png" alt="image-20210819152843842"></p></li><li><p>编辑引入模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 PowerShell 主题</span></span><br><span class="line">Set-PoshPrompt -Theme agnoster</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819154229.png" alt="image-20210819154229104"></p><blockquote><p>这里我使用的是一个博主提供的内容：<a href="https://gist.github.com/LittleNewton/04132945d9b9743ba7cab780fc44a67b">https://gist.github.com/LittleNewton/04132945d9b9743ba7cab780fc44a67b</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;#</span><br><span class="line"> * FileName: Microsoft.PowerShell_profile.ps1</span><br><span class="line"> * Author: 刘 鹏</span><br><span class="line"> * Email: littleNewton6@outlook.com</span><br><span class="line"> * Date: 2020, May. 1</span><br><span class="line"> * Update: 2021, Mar. 14</span><br><span class="line"> * Copyright: No copyright. You can use this code for anything with no warranty.</span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------------- Import Modules BEGIN -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 PowerShell 主题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set-PoshPrompt -Theme ys</span></span><br><span class="line">Set-PoshPrompt -Theme nu4a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------------- Import Modules END   -------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------  Set Hot-keys BEGIN  -------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置预测文本来源为历史记录</span></span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Tab 为菜单补全和 Intellisense</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Tab&quot; -Function MenuComplete</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Ctrl+d 为退出 PowerShell</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key &quot;Ctrl+d&quot; -Function ViExit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Ctrl+z 为撤销</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置向上键为后向搜索历史记录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置向下键为前向搜索历史纪录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------  Set Hot-keys END    -------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------    Functions BEGIN   -------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Python 直接执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:PATHEXT += <span class="string">&quot;;.py&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 pip 的方法</span></span><br><span class="line">function Update-Packages &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> update pip</span></span><br><span class="line">Write-Host &quot;Step 1: 更新 pip&quot; -ForegroundColor Magenta -BackgroundColor Cyan</span><br><span class="line"><span class="meta">$</span><span class="bash">a = pip list --outdated</span></span><br><span class="line"><span class="meta">$</span><span class="bash">num_package = <span class="variable">$a</span>.Length - 2</span></span><br><span class="line">for ($i = 0; $i -lt $num_package; $i++) &#123;</span><br><span class="line"><span class="meta">$</span><span class="bash">tmp = (<span class="variable">$a</span>[2 + <span class="variable">$i</span>].Split(<span class="string">&quot; &quot;</span>))[0]</span></span><br><span class="line">pip install -U $tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> update TeX Live</span></span><br><span class="line"><span class="meta">$</span><span class="bash">CurrentYear = Get-Date -Format yyyy</span></span><br><span class="line">Write-Host &quot;Step 2: 更新 TeX Live&quot; $CurrentYear -ForegroundColor Magenta -BackgroundColor Cyan</span><br><span class="line">tlmgr update --self</span><br><span class="line">tlmgr update --all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> update Chocolotey</span></span><br><span class="line">choco outdated</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------    Functions END     -------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------   Set Alias BEGIN    -------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 编译函数 make</span></span><br><span class="line">function MakeThings &#123;</span><br><span class="line">nmake.exe $args -nologo</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name make -Value MakeThings</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 更新系统 os-update</span></span><br><span class="line">Set-Alias -Name os-update -Value Update-Packages</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 查看目录 ls &amp; ll</span></span><br><span class="line">function ListDirectory &#123;</span><br><span class="line">(Get-ChildItem).Name</span><br><span class="line">Write-Host(&quot;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name ls -Value ListDirectory</span><br><span class="line">Set-Alias -Name ll -Value Get-ChildItem</span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------    Set Alias END     -------------------------------</span></span><br></pre></td></tr></table></figure></li><li><p>重新打开 Windows Terminal ：paradox 主题如下</p><p>尝试查看配置颜色，给了一个<a href="https://ohmyposh.dev/docs/upgrading">网址</a>，打开之后告诉我们怎么更新到 V3</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819154202.png" alt="image-20210819154201873"></p><blockquote><p>更新命令，同样我们加入 Verbose 查看信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Update-Module -Name oh-my-posh -Verbose -Scope CurrentUser</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819155023.png" alt="image-20210819155023426"></p></li></ol><h2 id="主题更改">主题更改</h2><ol><li><p>查看主题</p><blockquote><p>查看主题样式、列举所有主题命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Get-PoshThemes</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819154544.png" alt="image-20210819154544468"></p></li><li><p>更改主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Set-PoshPrompt -Theme theme_name</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210819155902.png" alt=""></p></li></ol><h2 id="VsCode终端">VsCode终端</h2><blockquote><p>经过上面的美化之后，<strong>Vscode</strong> 的终端也会得以改变，但是由于 <strong>Vscode</strong> 设置的字体<strong>可能</strong>会导致乱码</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820130517.png" alt="image-20210820130517343"></p><p>我们按住 <code>Ctrl+Shift+P</code> 输入 <code>settings.json</code> 然后编辑字体样式即可，我这里用到的是一个<code>FiraCode NF</code> 字体（这个好像是系统内部的，<a href="https://github.com/ryanoasis/nerd-fonts/releases">下载链接</a>）</p><p>提供一个我的字体设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.fontFamily&quot;: &quot;Fira Code Medium, FiraCode NF, Consolas, &#x27;Courier New&#x27;, monospace&quot;,</span><br></pre></td></tr></table></figure><p>当然还有很多字体都可以，比如 <code>Hack</code> 字体（<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Hack.zip">下载链接</a>），但是我安装之后在 <code>Vscode</code>里面没有用，在 Windows Terminal 的配置文件里面就可以用，具体什么原因不清楚</p><p>下面是 Windows Terminal 的配置文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820130926.png" alt="image-20210820130926051"></p><blockquote><p>红色框表示设置终端字体类型，<code>Hack NF、FiraCode NF</code> 都可以达到特殊字符的显示</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820144905.png" alt="image-20210820144905412"></p><h1>Git bash 美化</h1><h2 id="前言">前言</h2><blockquote><p>经过上面 Vscode 的启发，能否在 IDEA 上面把终端也改成 Windows Terminal 的样式</p><p>但是通过查看 Windows Terminal 的安装路径寻找它的可执行文件，然后在 IDEA 里面设置终端的启动文件</p><p>我通过 Everything 找到了 Windows Terminal 的文件路径，把 IDEA 的终端启动文件设置为 <code>wt.exe</code> 启动</p><p>但是它打开终端是独立打开的，不在 IDEA 窗口里面打开，于是想到能不能设置为 <code>Git Bash</code>启动，然后把 Git Bash 美化一下</p></blockquote><blockquote><p>下面 IDEA 设置为了 <code>Git Bash</code> 启动了，只需要把 <strong>Git Bash</strong> 美化即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820150140.png" alt="image-20210820150140200"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820150255.png" alt="image-20210820150255075"></p><h2 id="安装-zsh">安装 zsh</h2><ol><li><p><a href="https://packages.msys2.org/package/zsh?repo=msys&amp;variant=x86_64">https://packages.msys2.org/package/zsh?repo=msys&amp;variant=x86_64</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820150548.png" alt="image-20210820150548480"></p></li><li><p>解压，这个 <code>.zst</code>文件可能解压不了，需要安装一个软件<code>peazip</code><a href="https://peazip.github.io/">https://peazip.github.io/</a></p><p>然后找到第一步下载的，选择解压即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820153632.png" alt="image-20210820153632612"></p><p>解压之后会有一个去掉了 <code>.zst</code>后缀的文件，此时我们在次解压即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820154022.png" alt="image-20210820154022279"></p></li><li><p>我们把上面解压好的文件全部移动到 <code>git</code>的安装目录下，相当于对git bash做一个补充包，比如我这里</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820154133.png" alt="image-20210820154133032"></p></li><li><p>打开 Git Bash，输入 <code>zsh</code>然后你会发现进入了 <strong>zsh</strong> 终端</p><p>提示我们没有配置文件，输入 0 创建一个就行了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820155009.png" alt="image-20210820155009359"></p></li></ol><h2 id="安装-oh-my-zsh">安装 oh my zsh</h2><ol><li><p>上面已经从进入了 zsh 终端了，执行下面命令安装 oh-my-zsh （<a href="https://ohmyz.sh/#install">给出官网</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面两个任选其一</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这里我两个链接都没用</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820155519.png" alt="image-20210820155518983"></p><p>用另外方法安装，其实就是人工手动实现上面两种安装代码方式</p><ul><li><p>首先随便在哪个地方新建文件 <code>install.sh</code></p><p>然后打开网址 <a href="https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh">https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</a> 复制里面的内容 写入<code>install.sh</code>文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod +x install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure><blockquote><p>报错了，解决方法先还未知</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820161232.png" alt="image-20210820161232838"></p><blockquote><p>提示：下面不用看了，因为写到一半发现错了</p></blockquote><hr></li><li><p>报错分析</p><p>根据上面的报错大概是说克隆仓库到本地出错，那我们查看它仓库里面的 <code>install.sh</code> 文件里面的内容</p><p>这是 <code>ohmyzsh</code>仓库 <code>install.sh</code> 的一部分代码，我想大概意思就是拉取仓库到本地，并且保存到 <code>~/.oh-my-zsh</code>下（<code>~/</code>这个目录在Windows下是用户目录，Linux 是 root）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820161551.png" alt="image-20210820161551182"></p><p>然后我验证了的确是这样的，我查看云服务器（安装了ohmyzsh）下 <code>/root/</code>目录下是否有个 <code>.oh-my-zsh</code>文件夹以及里面文件是否和仓库一致</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820162125.png" alt="image-20210820162125734"></p><blockquote><p><strong>lib</strong> 提供了核心功能的脚本库<br><strong>tools</strong> 提供安装、升级等功能的快捷工具<br><strong>plugins</strong> 自带插件的存放位置<br><strong>templates</strong> 自带模板的存放位置<br><strong>themes</strong> 自带主题文件的存放位置<br><strong>custom</strong> 个性化配置目录，自安装的插件和主题可放这里</p></blockquote></li><li><p>知道了 执行<code>install.sh</code>文件的目的是先拉取仓库到本地，我们干脆手动拉取到指定目录下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820162433.png" alt="image-20210820162432951"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820162502.png" alt="image-20210820162502045"></p><p>发现它那里写的是要拉取到<code>.oh-my-zsh</code>目录，我们只需将其改名即可</p></li><li><p>随后在 <code>install.sh</code>目录下执行该脚本看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210820162833.png" alt="image-20210820162833757"></p></li><li><p>很明显，即使执行了 <code>install.sh</code> 也没有初始化一些文件，即配置文件 <code>.zshrc</code></p><p>配置文件里面有一些东西，但是我们查看之后并没有</p><p>手动添加试试，我添加成功了，也同样开启了 zsh ，但是后面下载插件的时候会有路径上的错误，不知道怎么回事，所以这个方法不可行</p></li></ul></li></ol><h2 id="插件安装">插件安装</h2><p>待续</p><h2 id="配置">配置</h2><p>待续</p><h1>Git SDK</h1><blockquote><p>Git SDK 全称 Git for Windows SDK，基于 MSYS2（MinGW64 + Cygwin 合体增强）的仿 Linux 环境；</p><p>安装后大约会占用 4~5 GB 的磁盘空间，但是包含了完整的仿 Linux 环境：包括常用工具，完整的 GNU Complier 链以及包管理器 pacman</p></blockquote><blockquote><p>Windows 里面 Powershell 有工具 <strong>oh-my-posh</strong></p><p>Linux 里面 有 <strong>oh-my-zsh</strong></p><p>接下来在 Windows 下安装 <strong>Git SDK</strong> 模拟一个 Linux环境</p></blockquote><h2 id="下载安装">下载安装</h2><ol><li><p>方式一：直接从官网下载一个安装包，就是一个下载器，会自动从仓库克隆这个程序所需要的全部文件，但是由于下载速度很慢，不太可行</p><p><a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p></li><li><p>方式二：直接拉取仓库上的文件到本地（其实就是方式一中需要下载的文件），但是里面文件很大，大概有 5/6 GB</p><p>此时到你想保存的路径克隆下来就行</p><p><a href="https://github.com/git-for-windows/git-sdk-64">https://github.com/git-for-windows/git-sdk-64</a></p></li></ol><blockquote><p>由于我这里每次都拉取失败，这个就先到这里，具体之后需要安装的 zsh 和 oh-my-zsh 还要参考网上的教程</p></blockquote><p>待续</p>]]></content>
      
      
      
        <tags>
            
            <tag> -Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs+Nginx-rtmp-module</title>
      <link href="2021/08/18/CentOS+nginx-rtmp-module/"/>
      <url>2021/08/18/CentOS+nginx-rtmp-module/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>尝试用云服务器搭建一个<strong>Nginx+rtmp</strong>服务器来做推流服务器</p></blockquote><h1>下载</h1><blockquote><p>我这里下载的文件全部保存在<code>/opt/source</code>下</p></blockquote><ol><li><p><strong>nginx-rtmp-module</strong></p><p>下载源文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/arut/nginx-rtmp-module.git</span></span><br></pre></td></tr></table></figure></li><li><p><strong>nginx</strong>：<code>由于我原本有 nginx</code></p><p>原来有，查看nginx版本<code>rpm -qa nginx</code>，然后下载相同版本的源码</p><p>比如我这里查看之后是<code>nginx-1.16.1-3.el7.x86_64</code></p><p>那么我下载<code>1.16.1</code>版本的nginx源码，然后解压，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://nginx.org/download/nginx-1.16.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf nginx-1.16.1.tar.gz</span></span><br></pre></td></tr></table></figure></li></ol><h1>nginx添加模块</h1><blockquote><p>我下载了 <strong>nginx-rtmp-module</strong> 模块，就要把它添加到 <strong>nginx</strong> 服务器里面</p></blockquote><ol><li><p>进入到<code>cd nginx-1.16.1/</code>目录（也就是刚刚解压的 Nginx 目录）</p></li><li><p>查看原来 Nginx 的配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nginx -V</span></span><br></pre></td></tr></table></figure><p>比如我这里的配置参数如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818154143.png" alt="image-20210818154143280"></p></li><li><p>复制红色框中的内容</p><p>红色框的配置是我们原来的，这个时候只需要在后面追加上需要添加的模块</p><blockquote><p>注意更该自己存放模块的路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要在后面添加的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> --add-module=/opt/<span class="built_in">source</span>/nginx-rtmp-module</span></span><br></pre></td></tr></table></figure><p>然后配置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-stream_ssl_preread_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-google_perftools_module --with-debug --with-cc-opt=<span class="string">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#x27;</span> --with-ld-opt=<span class="string">&#x27;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#x27;</span> --add-module=/opt/<span class="built_in">source</span>/nginx-rtmp-module</span></span><br></pre></td></tr></table></figure></li><li><p>执行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure><blockquote><p>遇到了问题这一步</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818155505.png" alt="image-20210818155505108"></p><p>查看网上说没有安装其它依赖环境 <strong>pcre、zlib、openssl</strong>， 这些是解压包、ssl相关的依赖</p><p>但是我查看了下面 3 个显示有安装</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818155919.png" alt="image-20210818155919006"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install pcre pcre-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zlib zlib-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install openssl openssl-devel</span>  </span><br></pre></td></tr></table></figure><p>先不管有没有安装，尝试安装上述 3 个，安装完后在查看，好吧其实上面 3 个和我原来的不同</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818160214.png" alt="image-20210818160214054"></p><p>在尝试<code>make</code>，结果还是一样的报错</p><p><strong>然后我尝试把划线部分删除</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818162322.png" alt="image-20210818162322231"></p><p>执行完之后如下报错</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818162352.png" alt="image-20210818162352434"></p><p>上网查找方法安装如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install libxslt-devel</span></span><br></pre></td></tr></table></figure><p>然后重新<code>./configure</code>又有新报错，如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818162518.png" alt="image-20210818162517949"></p><p>查到解决方案，安装如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install perl-ExtUtils-Embed</span></span><br></pre></td></tr></table></figure><p>然后重新<code>./configure</code>又有新报错，如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818162806.png" alt="image-20210818162806934"></p><p>查到解决方案，安装如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install gperftools</span></span><br></pre></td></tr></table></figure><p>然后重新<code>./configure</code>，终于没有报错了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818163058.png" alt="image-20210818163058013"></p></li><li><p>编译完成后，会生成一个<code>objs</code>的目录</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818163430.png" alt="image-20210818163430606"></p><p><code>objs</code>目录文件如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818165618.png" alt="image-20210818165618776"></p><p>需要把箭头文件替换成原来的，使用<code>which nginx</code>查看原来的路径</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818165546.png" alt="image-20210818165546089"></p><p>把这个东西替换掉<code>/usr/sbin/nginx</code></p><p>如果替换不了就先关闭 Nginx 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop nginx.service</span></span><br></pre></td></tr></table></figure><p>替换好了之后打开 Nginx 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start nginx.service</span></span><br></pre></td></tr></table></figure><p>发现报错，启动不了服务</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818173414.png" alt="image-20210818173414713"></p><p>用 <code>systemctl status nginx.service</code>查看信息</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818173626.png" alt="image-20210818173626067"></p><p>这里说<code>ngx_mail_module.so</code>这个模块有问题，谷歌一波（手动滑稽）</p><p>最后实在找不到解决方案了，干脆重装 Nginx，先备份好配置文件</p><p>不对，想到一个方法，我们查找出错的这个模块，可以发现编译了一个新的，尝试替换原来的，看是否能解决</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818182312.png" alt="image-20210818182312373"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818182515.png" alt="image-20210818182515419"></p><p>最后打开 Nginx 服务看是否成功</p><p>发现没有任何提示，终于解决了</p></li></ol><h1>添加配置</h1><p><code>etc/nginx/nginx.conf</code>下面这个添加在 https{ } 只外</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rtmp&#123;</span><br><span class="line">    server&#123;    </span><br><span class="line">        listen 1935;  # 监听的端口  </span><br><span class="line">        chunk_size 4000;  # 数据传输块的大小</span><br><span class="line"></span><br><span class="line">        application minghui &#123;  # rtmp 推流请求路径  </span><br><span class="line">            live on;</span><br><span class="line">            hls on;   </span><br><span class="line">            hls_path /myweb/rtmp/live;</span><br><span class="line">            hls_fragment 5s;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加配置之后来到 OBS 推流，服务器对应配置文件应该如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 服务器</span></span><br><span class="line">rtmp://IP:PORT/推流请求路径</span><br><span class="line"><span class="meta">#</span><span class="bash"> 串流秘钥：自己随便设置</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210818222225.png" alt="image-20210818222218793"></p><p>开始推流之后别人想观看就通过下面这个链接，<code>Potplay、VLC</code>都可以观看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://IP:PORT/推流请求路径/串流秘钥</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="2021/08/14/CSS/"/>
      <url>2021/08/14/CSS/</url>
      
        <content type="html"><![CDATA[<hr><h1>CSS简介</h1><blockquote><p><strong>层叠样式表</strong>（英语：<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets，缩写：<strong>CSS</strong>；又称<strong>串样式列表</strong>、<strong>级联样式表</strong>、<strong>串接样式表</strong>、<strong>阶层式样式表</strong>）是一种用来为结构化文档（如<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>文档或<a href="https://zh.wikipedia.org/wiki/XML">XML</a>应用）添加样式（字体、间距和颜色等）的<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80">计算机语言</a>，由<a href="https://zh.wikipedia.org/wiki/W3C">W3C</a>定义和维护。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准， CSS3 分成多个小模块且正在标准化中。[<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90">来源请求]</a><a href="https://zh.wikipedia.org/wiki/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8#CSS3">CSS3</a>现在已被大部分现代<a href="https://zh.wikipedia.org/wiki/%E7%80%8F%E8%A6%BD%E5%99%A8">浏览器</a>支持，而下一版的<a href="https://zh.wikipedia.org/wiki/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8#CSS4">CSS4</a>仍在开发中</p><p>CSS不能单独使用，必须与<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>或<a href="https://zh.wikipedia.org/wiki/XML">XML</a>一起协同工作，为HTML或XML起装饰作用。</p><p>CSS最重要的目标是将文件的内容与它的显示分隔开来。在CSS出现前，几乎所有的HTML文件内都包含文件显示的信息，比如字体的颜色、背景应该是怎样的、如何排列、边缘、连线等等都必须一一在HTML文件内列出，有时重复列出。CSS使作者可以将这些信息中的大部分隔离出来，简化HTML文件，这些信息被放在一个辅助的，用CSS语言写的文件中。HTML文件中只包含结构和内容的信息，CSS文件中只包含样式的信息</p><p>——维基百科</p></blockquote><h1>选择器</h1><blockquote><p>作用：选择页面上的某一个或某一类元素</p></blockquote><h2 id="基本选择器">基本选择器</h2><ol><li><p><strong>标签选择器</strong>：选择某一类标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag_name &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>类选择器</strong>：选择所有 class 属性一致的标签，可以跨标签</p><p>比如 <code>&lt;h1 class=&quot;style&quot;&gt;&lt;/h1&gt;  与 &lt;h2 class=&quot;style&quot;&gt;&lt;/h2&gt;</code> 可以共存，属性不同类可以相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class_name &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>id 选择器</strong>：全局唯一</p><p>比如 <code>&lt;h1 id=&quot;style&quot;&gt;&lt;/h1&gt;  与 &lt;h2 id=&quot;style&quot;&gt;&lt;/h2&gt;</code> 不可以共存，<strong>id</strong> 名全局唯一</p><p>但是我在 Vscode 里面书写上述两个是没有报错？下面引用 W3school 对 id 选择器的描述</p><blockquote><p><strong>类选择器还是 ID 选择器？</strong></p><p>在类选择器这一章中我们曾讲解过，可以为任意多个元素指定类。前一章中类名 important 被应用到 p 和 h1 元素，而且它还可以应用到更多元素。</p><p><strong>区别 1：只能在文档中使用一次</strong></p><p>与类不同，在一个 HTML 文档中，ID 选择器会使用一次，而且仅一次。</p><p><strong>区别 2：不能使用 ID 词列表</strong></p><p>不同于类选择器，ID 选择器不能结合使用，因为 ID 属性不允许有以空格分隔的词列表。</p><p><strong>区别 3：ID 能包含更多含义</strong></p></blockquote><p><strong>区别2</strong> 中写道 <em>在一个 HTML 文档中，ID 选择器会使用一次，而且仅一次</em></p><p>但是为什么在代码中多个标签的 id 相同时，也可以显示代码效果。如图、</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210815170731.png" alt="image-20210815170724879"></p><p>网上看到的回答是：“在JS进行dom操作是就存在问题了”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id_name &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结：三者优先级：<code>id 选择器 &gt; 类选择器 &gt; 标签选择器</code></p></blockquote><h2 id="层次选择器">层次选择器</h2><ol><li><p><strong>后代选择器（descendant selector）</strong>：子代全选</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 后代名为 name2 的标签，如果 name2 里面还有标签，里面的标签也同样会选中 */</span></span><br><span class="line">name1 name2 &#123;&#125;</span><br></pre></td></tr></table></figure><p>只要是某个元素的后代均会改变</p><blockquote><p>举例说明：下面截取的是代码的主体部分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>写法一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写法二：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写法三</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>下面是三种写法的结果</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210816095836.png" align=center /><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210816102104.png" align=center/><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210816102735.png"  align=center/><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210816102930.png" alt=""></p></li><li><p><strong>子选择器</strong>：只选择一个子代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 后代名为 name2 的标签，如果 name2 里面还有标签，里面的标签也会被选中 */</span></span><br><span class="line">name1&gt;name2 &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们知道了后代选择器，子选择器就是后代选择器的弱化版本</p><p>它只会选择一代，但是也可以渗透到最里面</p></blockquote></li><li><p><strong>兄弟（弟弟）选择器</strong>：选择下面最近的一个子代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 下面一个(如果下面有多个也只会选择下面最近的一个)名为 name2 的标签，其本身 name1 不会被选择 */</span></span><br><span class="line">name1 + name2 &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意细节：</p><p>下面这个只会选中 <code>我是第一条</code></p><p>因为 <code>我是第二条</code> 上面隔了一个 <code>&lt;br&gt;</code>标签</p><p>由此可见，选择下面最近的一个子代不能隔有其他标签，若有则不会选中最近的一个子代</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.ul+li &#123;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>通用（弟弟们）选择器</strong>：选择下面的所有子代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 下面所有(如果下面有多个全部选择)名为 name2 的标签，其本身 name1 不会被选择 */</span></span><br><span class="line">name1~name2 &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>举例，和 兄弟选择器 略有不同</p><p>此时只会选中 <code>我是第一条和我是第三条</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.ul~li &#123;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第三条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结：四者能够穿甲（指能够一直延续到最里面的标签）的有：后代选择、子代选择器</p></blockquote><h2 id="结构伪类选择器">结构伪类选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>结构伪类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 选择 ul 的第一个子元素 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*顺序数,因为ul下面第一个是&lt;h1&gt;,所以不会选中*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-of-type &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*类型数*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 选择 ul 的第最后一个子元素 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*顺序数,因为ul最后一个是&lt;h1&gt;,所以不会选中*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-of-type</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*类型数*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 选中 p1：定位到父元素，选中当前的第一个元素</span><br><span class="line"><span class="css">        选择当前 <span class="selector-tag">p</span> 元素的父元素，选中父元素的第一个，并且是当前元素才生效 */</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*顺序数,因为p父类body下面第一个是&lt;h1&gt;,所以不会选中*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: deepskyblue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*类型数*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210816155940.png" alt="image-20210816155939976"></p><h2 id="属性选择器（常用）">属性选择器（常用）</h2><blockquote><p>正则表达式：</p><p><code>=</code>绝对等于</p><p><code>*=</code>包含</p><p><code>^=</code>以什么（=号后面的）开头</p><p><code>&amp;=</code>以什么（=号后面的）结尾</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp</title>
      <link href="2021/08/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2021/08/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><h1>正则表达式语法</h1><ol><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ol><h2 id="元字符">元字符</h2><ol><li><p>转义号 <code>\\</code></p><blockquote><p>匹配某些特殊字符需要用到</p><p>一个 \ 开头的字符会被当作转义字符处理</p><p>Java 的正则表达式中，两个 \\ 代表其他语言的一个 \</p></blockquote><p>需要用到转义符号的字符：<code>* + ( ) $ / \ ? [ ] ^ &#123; &#125;</code></p><p>如匹配 “(” 写成 <code>\\(</code></p><p>匹配 “.” 写成 <code>\\.</code></p></li><li><p>字符匹配符</p></li></ol><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:center">含义</th><th style="text-align:center">示例</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>[ ]</code></td><td style="text-align:center">可接受的字符列表</td><td style="text-align:center">[abcd]</td><td style="text-align:center">abcd中的任意一个字符</td></tr><tr><td style="text-align:left"><code>[^ ]</code></td><td style="text-align:center">不接受的字符列表</td><td style="text-align:center">[^abcd]</td><td style="text-align:center">除 abcd 以外的任一字符，包括数字和特殊符号</td></tr><tr><td style="text-align:left"><code>-</code></td><td style="text-align:center">连字符</td><td style="text-align:center">A-Z or [AB…Z]</td><td style="text-align:center">任意大写字母</td></tr><tr><td style="text-align:left"><code>.</code></td><td style="text-align:center">匹配除 \n 以外的任何字符。如果匹配自身，则需要使用<code>\\.</code></td><td style="text-align:center">a…b</td><td style="text-align:center">匹配以 a 开头，b 结尾，中间两个字符任意，长度为 4 的字符串</td></tr><tr><td style="text-align:left"><code>\\d</code></td><td style="text-align:center">匹配单个数字字符，等价于 <code>[0-9]</code></td><td style="text-align:center">\\d{3}(\\d)?</td><td style="text-align:center">匹配 3 或 4 个数字的字符串</td></tr><tr><td style="text-align:left"><code>\\D</code></td><td style="text-align:center">匹配单个非数字字符，等价于 <code>[^0-9]</code></td><td style="text-align:center">\\D(\\d)*</td><td style="text-align:center">匹配以单个非数字开头，后任意个数字的字符串</td></tr><tr><td style="text-align:left"><code>\\w</code></td><td style="text-align:center">匹配单个数字、大小写字母字符，等价于 <code>[0-9a-zA-Z_]</code></td><td style="text-align:center">\\d{3}\\w{4}</td><td style="text-align:center">匹配以 3 个数字开头的长度为 7 的数字字母的字符串</td></tr><tr><td style="text-align:left"><code>\\W</code></td><td style="text-align:center">匹配单个非数字、大小写字母字符，等价于<code>[^0-9a-zA-Z_]</code></td><td style="text-align:center">\\W+\\d{2}</td><td style="text-align:center">匹配以<strong>至少 1 个</strong>非数字、大小写字母字符开头，2 个数字字符结尾的字符串</td></tr><tr><td style="text-align:left"><code>\\s</code></td><td style="text-align:center">匹配任何空白字符（空格、制符表等）</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left"><code>\\S</code></td><td style="text-align:center">匹配任何非空白字符</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><blockquote><p><code>\\w</code>匹配 4 类：数字，小写字母、大写字母、包括下划线</p><p><code>abc</code>：匹配 abc 字符</p><p><code>(?!)abc</code>：匹配 abc 和 ABC 字符</p></blockquote><ol start="3"><li><p>选择匹配符</p><p>一个<code>|</code></p></li><li><p>限定符</p><p>用于限定前面的字符和组合项连续出现多少次</p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:center">含义</th><th style="text-align:center">示例</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>*</code></td><td style="text-align:center">零次或多次匹配前面的字符或子表达式</td><td style="text-align:center">zo*</td><td style="text-align:center">zo* 匹配&quot;z&quot;和&quot;zoo&quot;。* 等效于 {0,}</td></tr><tr><td style="text-align:left"><code>+</code></td><td style="text-align:center">一次或多次匹配前面的字符或子表达式</td><td style="text-align:center">zo+</td><td style="text-align:center">&quot;zo+&quot;与&quot;zo&quot;和&quot;zoo&quot;匹配，但与&quot;z&quot;不匹配。+ 等效于 {1,}</td></tr><tr><td style="text-align:left"><code>?</code></td><td style="text-align:center">零次或一次匹配前面的字符或子表达式</td><td style="text-align:center">do(es)?</td><td style="text-align:center">&quot;do(es)?“匹配&quot;do&quot;或&quot;does&quot;中的&quot;do”。? 等效于 {0,1}</td></tr><tr><td style="text-align:left"><code>&#123;n&#125;</code></td><td style="text-align:center">只能输入 n 个字符</td><td style="text-align:center">[abcd]{3}</td><td style="text-align:center">由abcd中字母组成的任意长度为 3 的字符串，eg：abc、abd、dda</td></tr><tr><td style="text-align:left"><code>&#123;n,&#125;</code></td><td style="text-align:center">指定至少 n  个匹配</td><td style="text-align:center">[abcd]{3,}</td><td style="text-align:center">由abcd中字母组成的任意长度至少为 3 的字符串，eg：abc、adbd、addaa</td></tr><tr><td style="text-align:left"><code>&#123;n,m&#125;</code></td><td style="text-align:center">指定至少 n 个但不多于 m 个匹配</td><td style="text-align:center">[abcd]{3,5}</td><td style="text-align:center">由abcd中字母组成的任意长度至少为 3 但不多于 5 的字符串（即 3|4|5个）</td></tr></tbody></table></li><li><p>定位符</p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:center">含义</th><th style="text-align:center">示例</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:left"><code>^</code></td><td style="text-align:center">指定起始字符</td><td style="text-align:center">^[0-9]+[a-z]*</td><td style="text-align:center">以至少一个数字开头，后面任意接小写字母的字符串（也可以没有小写字母字符串）</td></tr><tr><td style="text-align:left"><code>$</code></td><td style="text-align:center">指定结束字符</td><td style="text-align:center">^[0-9]-[a-z]+$</td><td style="text-align:center">以一个数字开头后连接 “-”，并以至少一个小写字母结尾的字符串</td></tr><tr><td style="text-align:left"><code>\\b</code></td><td style="text-align:center">匹配目标字符串的边界</td><td style="text-align:center">abc\b</td><td style="text-align:center">“abc123<strong>abc</strong> 4<strong>abc</strong>” 会匹配尾部两个 abc，空格分隔会识别为 2 个目标字符串</td></tr><tr><td style="text-align:left"><code>\\B</code></td><td style="text-align:center">匹配目标字符串的非边界</td><td style="text-align:center">[abcd]{3}</td><td style="text-align:center">与 <code>\\b</code>正好相反 “<strong>abc</strong>123abc 4abc” 会匹配头部一个 abc</td></tr></tbody></table></li><li><p>捕获分组</p><ul><li><p>非命名分组：根据括号个数依次编号为 1、2、3、4… 组，取组的时候用 <code>group(name)</code></p></li><li><p>命名分组</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20211002110839.png" alt="image-20211002110832346"></p><blockquote><p><code>group(int group)、group(String name)</code>  重载了，前者通过编号取，后者通过命名取</p></blockquote></li></ul></li><li><p><code>非捕获分组</code></p><table><thead><tr><th></th><th style="text-align:center"></th></tr></thead><tbody><tr><td></td><td style="text-align:center"><code>(?:pattern)</code></td></tr><tr><td></td><td style="text-align:center"><code>(?=pattern)</code></td></tr><tr><td></td><td style="text-align:center"><code>(?!pattern)</code></td></tr></tbody></table></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree[realize]</title>
      <link href="2021/07/26/Tree/"/>
      <url>2021/07/26/Tree/</url>
      
        <content type="html"><![CDATA[<hr><h1>二叉树</h1><h2 id="BinaryTree-抽象类">BinaryTree-抽象类</h2><blockquote><p>因为树有很多种，有些功能的实现都是一样的，所以把这些实现一样的单独抽取出来放在父类 <code>Tree</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;   <span class="comment">// 节点个数</span></span><br><span class="line">    <span class="keyword">protected</span> Node&lt;E&gt; root;   <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">protected</span> Comparator&lt;E&gt; comparator;   <span class="comment">// 比较器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*========================父类 Tree 的通抽象函数实现========================*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*=====================================================================*/</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*========================父类 Tree 的通用函数实现========================*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visitor.visit(node.element);</span><br><span class="line">        preorderTraversal(node.left, visitor);</span><br><span class="line">        preorderTraversal(node.right, visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorderTraversal(node.left, visitor);</span><br><span class="line">        visitor.visit(node.element);</span><br><span class="line">        inorderTraversal(node.right, visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postorderTraversal(node.left, visitor);</span><br><span class="line">        postorderTraversal(node.right, visitor);</span><br><span class="line">        visitor.visit(node.element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 层序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">levelOrderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        Node&lt;E&gt; tmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            tmp = queue.poll();</span><br><span class="line">            visitor.visit(tmp.element);</span><br><span class="line">            <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 树的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(height(node.left), height(node.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">heightIteration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heightIteration(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">heightIteration</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(node);</span><br><span class="line">        <span class="keyword">int</span> level = queue.size();   <span class="comment">// 记录每层节点数量</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Node&lt;E&gt; tmp = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add((tmp.right));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == --level) &#123;</span><br><span class="line">                height++;</span><br><span class="line">                level = queue.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为完全二叉树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public boolean isComplete() &#123;</span></span><br><span class="line"><span class="comment">//        Queue&lt;Node&lt;E&gt;&gt; queue = new ArrayDeque&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        queue.add(root);</span></span><br><span class="line"><span class="comment">//        boolean leaf = false;</span></span><br><span class="line"><span class="comment">//        while (!queue.isEmpty()) &#123;</span></span><br><span class="line"><span class="comment">//            Node&lt;E&gt; tmp = queue.poll();</span></span><br><span class="line"><span class="comment">//            if (!tmp.isLeaf() &amp;&amp; leaf) &#123;</span></span><br><span class="line"><span class="comment">//                return false;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (tmp.hasTowChildren()) &#123;</span></span><br><span class="line"><span class="comment">//                queue.add(tmp.left);</span></span><br><span class="line"><span class="comment">//                queue.add(tmp.right);</span></span><br><span class="line"><span class="comment">//            &#125; else if (tmp.left == null &amp;&amp; tmp.right != null) &#123;</span></span><br><span class="line"><span class="comment">//                return false;</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                leaf = true;</span></span><br><span class="line"><span class="comment">//                if (tmp.left != null) &#123;</span></span><br><span class="line"><span class="comment">//                    queue.add(tmp.left);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return true;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">boolean</span> leaf = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Node&lt;E&gt; tmp = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (leaf &amp;&amp; !tmp.isLeaf()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;         <span class="comment">// left != null</span></span><br><span class="line">                queue.add(tmp.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123; <span class="comment">// left == null &amp;&amp; right != null</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// left != null &amp;&amp; left == null</span></span><br><span class="line">                leaf = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*=====================================================================*/</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E element;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;E&gt; left;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;E&gt; right;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;E&gt; parent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否为叶子节点</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否度为 2</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasTowChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前驱节点">前驱节点</h2><blockquote><p>前驱节点（predecessor）：中序遍历时的前一个节点</p></blockquote><p>下面这个树用这个网址生成：<a href="http://btv.melezinek.cz/binary-search-tree.html">http://btv.melezinek.cz/binary-search-tree.html</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210811104526.png" alt="image-20210811104519401"></p><blockquote><p>中序遍历：33 35 38 39 40 44 57 59 60 61 62 67 68 76</p></blockquote><p>比如 44 的前驱节点是 中序遍历的前一个节点 即 40</p><p>40 的前驱节点是 39</p><p>38 的前驱节点是 35</p><p>57 的前驱节点是 44</p><p>33 没有前驱节点</p><p>62 的前驱节点是 61</p><h3 id="实现流程">实现流程</h3><blockquote><p>根据中序遍历的流程，先遍历目标节点的左子树，那么左子树有无会成为首个判定条件</p></blockquote><ol><li><p><code>node.left != null</code></p><blockquote><p>一直找到目标节点左子树的最右节点：<code>node.left.right.right.right......</code></p></blockquote></li><li><p><code>node.left == null</code></p><p>一直往上找：<code>node.parent.parent......</code>，直到当前节点是它父节点的右节点：（1）找到了这么一个节点，（2）找不到这么一个节点</p><ul><li>比如 57 的父节点是 59(59不是它父节点的右边)，继续往上找，然后找到 59 的父节点 62(62是它父节点的右边)，所以 57 的前驱节点就是 62 的父节点 44</li><li>比如 33 的父节点是 35(35不是它父节点的右边)，继续往上找，然后找到 44(44没有父节点了)，因此 33 没有前驱结点</li></ul><blockquote><p>总之就是一直往上找父节点，直到<code>当前节点成为了它父节点的右子树</code>，那么它父节点就是目标节点的前驱结点</p><p>如果一直往上找，当前节点都是它父节点的左子树(即找到了顶部)，那么目标节点就没有前驱节点</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前驱节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">predecessor</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;E&gt; cur = node.left;</span><br><span class="line">    <span class="comment">// 如果左子树不空</span></span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果左子树为空，一直找父节点，直到在父节点的右子树上</span></span><br><span class="line">    <span class="keyword">while</span> (node.parent != <span class="keyword">null</span> &amp;&amp; node != node.parent.right) &#123;</span><br><span class="line">        node = node.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后继节点">后继节点</h2><h3 id="实现流程-2">实现流程</h3><blockquote><p>后继节点（successor）和找前驱异曲同工，同样根据中序遍历的流程，后继节点无非就是找目标节点的后一个，那么有无右子树成为首个判定条件</p></blockquote><ol><li><p><code>node.right != null</code></p><blockquote><p>一直找到目标节点左子树的最右节点：<code>node.right.left.left.left......</code></p></blockquote></li><li><p><code>node.right == null</code></p><blockquote><p>总之就是一直往上找父节点，直到<code>当前节点成为了它父节点的左子树</code>，那么它父节点就是目标节点的后继结点</p><p>如果一直往上找，当前节点都是它父节点的右子树(即找到了顶部)，那么目标节点就没有后继节点</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后继节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">successor</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;E&gt; cur = node.right;</span><br><span class="line">    <span class="comment">// 如果右子树不为空</span></span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果右子树为空，一直找父节点，直到在父节点的左子树上</span></span><br><span class="line">    <span class="keyword">while</span> (node.parent != <span class="keyword">null</span> &amp;&amp; node != node.parent.left) &#123;</span><br><span class="line">        node = node.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>二叉搜索树</h1><h2 id="节点">节点</h2><blockquote><p>BinaryTreeInfo：是别人写的一个工具，这里是引用</p></blockquote><h1>AVL 树</h1><h2 id="概念">概念</h2><ul><li>平衡因子（Balance Factor）：某节点的左右子树的高度差</li><li>AVL 树特点：<ul><li>每个节点的平衡因子都是：-1 0 1（绝对值 小于等于 1，如果大于1，称为 ”失衡“</li><li>每个节点的左右子树高度差不超过 1</li><li>搜索、添加、删除的时间复杂度是 O(logn)</li></ul></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210812103405.png" alt="image-20210812103356952"></p><h2 id="平衡对比">平衡对比</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210812103802.png" alt="image-20210812103802671"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree - java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂度</title>
      <link href="2021/07/22/data_struct_01/"/>
      <url>2021/07/22/data_struct_01/</url>
      
        <content type="html"><![CDATA[<hr><h1>复杂度</h1><ol><li>时间复杂度</li><li>空间复杂度</li><li>忽略低阶项和所有常数项系数</li><li><code>O(1)、O(logN)、O(N)、O(N*logN)、O(N^2)、O(N^3)、O(N^k)、O(2^N)、O(3^N)、O(k^N)、O(N!)</code></li></ol><blockquote><p>额外空间复杂度</p></blockquote><p>实现一个算法流程，在实现过程中，需要开辟一些空间来完成这个算法过程</p><p>作为输入参数的空间，不算额外空间</p><p>作为输出结果的空间，也不算额外空间</p><p>好比题目要求你把这个数组拷贝一份，那么我肯定要申请数组空间，那么这个数组空间也不算额外空间，因为这是题目的需求，我不得不申请数组空间</p><blockquote><p>如何比较两个算法的好坏</p></blockquote><ol><li><p>首先比较时间复杂度</p></li><li><p>如果时间复杂度一样，按理说是比较他们的常数项，但是这个不太现实</p><p>比如冒泡排序和插入排序，时间复杂度均为 O(N^2^)，但实际上肯定插入排序好，但是插入排序时间复杂度的常数项是随着测试数据改变而变化</p><p>所以我们不能靠理论比较，直接用随机数据测试比较</p><p>为什么不理论分析？</p><p>因为不同常数时间的操作，虽然时间都是固定的，但是还是有快慢，比如，位运算的常数时间小于算术运算的常数时间，这两个运算的常数时间又小于数组寻址的时间</p><p>在者理论分析很困难，很难定量分析</p></li></ol><blockquote><p>最优解</p></blockquote><ol><li><p>时间复杂度越低越好</p></li><li><p>空间复杂度越低越好</p></li><li><p>时间复杂度相同情况，比较空间复杂度</p></li><li><p>时间空间复杂度相同情况，两者认为相同</p><p>不能因为一些局部细节比较两者好坏，即使常数时间可能有快慢，因为这个因素只决定了实现层次的优化和考虑，而和怎么解决这个问题的思想无关</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ - 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="2021/07/22/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>2021/07/22/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<hr><h1>滑动窗口</h1><blockquote><p>T1</p></blockquote><p>假设一个固定大小为 W 的窗口，依次划过 arr</p><p>返回每一次滑出状况的最大值</p><p>例如：arr = [4,3,5,4,3,3,6,7], W = 3</p><p>返回：[5,5,5,4,6,7]</p><blockquote><p>T2</p></blockquote><p>给定一个数组 arr，和一个整数 num</p><p>某个 arr 中的子数组 sub，如果想达标，必须满足：</p><p>sub 中最大值 - sub 中最小值 &lt;= num</p><p>返回 arr 中达标子数组的数量</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ - 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数(C++)</title>
      <link href="2021/07/20/%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%88C++)/"/>
      <url>2021/07/20/%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%88C++)/</url>
      
        <content type="html"><![CDATA[<hr><h1>rand()、srand()、time()、clock()</h1><h2 id="rand">rand()</h2><ol><li><p>rand()：随机函数，头文件 <code>#include &lt;cstdlib&gt;</code>有些时候不加也可以编译</p></li><li><p>看 rand() 函数原型</p><p>用户未设定随机数种子时，系统默认的随机数种子为1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">rand</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next / <span class="number">65535</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产生的数范围 <code>[0, RAND_MAX)</code> ，<strong>RAND_MAX</strong> 是一个符号常量</p><ul><li>在 Windows 上是 2^15^-1 = 32,768 - 1【0x7FFF】</li><li>在 Linux 上是 2^31^-1 = 2,147,483,648 - 1 【0x7FFFFFFF】</li></ul></li><li><p>rand() 产生的是伪随机数字，每次执行时是相同的</p><p>想要每次结果都不同就要将种子时刻发生变化，我们通过 <code>srand()</code>函数传参来改变它的 next 大小</p></li></ol><h2 id="srand">srand()</h2><ol><li><p>它会改变 <strong>rand()</strong> 函数中的参数 <strong>next</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因此可以通过传入一个 无符号整数 改变 next 值，但是这样比较麻烦，每次都要用户输入</p><p>可以选择时间作为参数传入</p></li></ol><h2 id="time">time()</h2><p>详细查看：<a href="https://www.runoob.com/cplusplus/cpp-date-time.html">C++ 日期 &amp; 时间</a></p><ol><li><p>time(nullptr) 返回的是一个 无符号整数，值为 从<code>1970年到当前时间的秒数</code></p></li><li><p>运行下面代码将会得到当前的 年 时 秒</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> times = time(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span> / <span class="number">365</span> + <span class="number">1970</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 年</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times / <span class="number">60</span> % <span class="number">60</span> &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 时</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times % <span class="number">60</span> &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 秒</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="clock">clock()</h2><blockquote><p>直接返回毫秒</p></blockquote><h1>随机数生成</h1><ol><li><p><code>rand()</code>生成 <code>[0, RAND_MAX)</code> 的数</p><ul><li>rand() % mod：<code>[0, mod)</code></li><li>rand() % mod + k：<code>[k, mod+k)</code></li></ul></li><li><p>有了上面两条就可以推出很多公式了</p><ul><li><p><code>[0, a)</code>随机数：<code>rand() % a</code></p></li><li><p><code>[a, b)</code>随机数：<code>(rand() % (b - a)) + a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b) --&gt; [0, b-a)+a --&gt; rand() % (b-a) + a </span><br></pre></td></tr></table></figure></li><li><p><code>(a, b]</code>随机数：<code>(rand() % (b - a)) + a + 1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a, b] --&gt; (0, b-a]+a --&gt; [1, b-a+1)+a --&gt; [0, b-a)+(a+1) --&gt; (rand()%(b-a))+a+1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">(a, b] --&gt; [a+1, b+1) --&gt; [0, b-a)+(a+1) --&gt; (rand()%(b-a))+a+1</span><br></pre></td></tr></table></figure></li><li><p><code>[a, b]</code>随机数：<code>(rand() % (b + 1 - a)) + a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b] --&gt; [a, b+1) --&gt; [0, b+1-a)+a --&gt; (rand()%(b+1-a))+a</span><br></pre></td></tr></table></figure></li><li><p><code>(a, b)</code>随机数：<code>(rand() % (b - a - 1)) + a + 1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a, b) --&gt; [a+1, b) --&gt; [0, b-a-1)+(a+1) --&gt; rand()%(b-a-1)+a+1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>浮点随机数（左右边界值是否可取没那么重要了）</p><ul><li><p><code>[0, 1)</code>浮点随机：<code>rand() / double(RAND_MAX)</code></p></li><li><p><code>[0, a)</code>浮点随机：<code>rand() / double(RAND_MAX) * a</code></p></li><li><p><code>(a, b)</code>浮点随机：<code>(rand() / double(RAND_MAX)) * (b - a) + a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a, b) --&gt; 0~1之间浮点数 * (a, b) --&gt; rand()/double(RAND_MAX)*(b-a)+a</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="2021/07/19/Maven/"/>
      <url>2021/07/19/Maven/</url>
      
        <content type="html"><![CDATA[<hr><h1>Maven 理解</h1><p>当你正在开发两个项目（A和B），如果 A 项目要使用 B 项目的某一个功能（某个一类）。那么最直接的方法就是将 B项目打包成 jar包，然后在导入 A项目中，这样 A项目就可以使用 B项目里面的功能了。</p><p>但是上面这样做非常的麻烦，如果 B项目修复了Bug，A又要重新导入 B项目的 jar包。</p><p>回到大局，如果我们需要很多外部 jar包（依赖），一个个手动导入也不是办法</p><blockquote><p>而 Maven就是为了解决项目依赖的问题</p></blockquote><p>Maven 有一个 <code>pom.xml</code> 文件，这个文件就是解决依赖的关键。通过编写该文件，Maven 会根据 <strong>pom.xml</strong>文件内容下载你需要的 jar包并放在本地的一个仓库。</p><p>那么 Maven项目和我们用 IDEA创建的普通 java项目有什么区别，本质没什么区别，个人理解为在普通 java项目上面添加了一个自动解决依赖关系的工具（Maven）</p><h1>Maven 安装配置</h1><ol><li><p>检查 JDK版本 1.7及以上</p></li><li><p><a href="https://maven.apache.org/download.cgi">Maven下载</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719095352.png" alt="image-20210719095300325"></p><p>这里有 4 种类型的文件</p><ol><li>首先明白 bin 和 src 的区别<ul><li>bin：代表二进制class文件（由java文件编译而成）</li><li>src：代表源码（java源码）</li></ul></li><li>zip 和 tar.gz<ul><li>zip：适用于 Windows</li><li>tar.gz：适用于 Linux、MacOs</li></ul></li></ol><p>因此 Windows 平台下下载 <code>bin.zip</code></p></li><li><p>配置 Maven 的环境变量</p><ul><li><p>添加一个变量名 <code>MAVEN_HOME</code> （看个人喜好，也可直接添加到 path 中）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719100440.png" alt="image-20210719100334510"></p></li><li><p>添加到 path</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719100620.png" alt="image-20210719100620673"></p></li></ul></li><li><p>检查是否配置成功</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719100755.png" alt="image-20210719100755505"></p></li></ol><h1>切换源和仓库位置</h1><blockquote><p>配置好了 Maven环境之后，也简单介绍了 <code>pom.xml</code>文件的作用，项目会根据这个文件下载一些 jar包并且保存到本地一个目录下</p><p>但是默认源是国外，网速可能不好，所以可以切换为国内的 阿里源</p><p>同时也可以把 jar包的存储路径放到合适的位置</p></blockquote><p>找到 Maven项目路径 --&gt; conf --&gt;  <code>settings.xml</code></p><ol><li><p>切换为阿里源</p><p>这里看到知乎上一篇文章，按照他这个改 <a href="https://zhuanlan.zhihu.com/p/71998219">将maven源改为国内阿里云镜像</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>central repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>apache snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云阿帕奇仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719112145.png" alt="image-20210719112144976"></p></li><li><p>改变 jar包仓库位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719104309.gif" alt="21_07_19_10：42：42__"></p></li></ol><h1>创建 Maven项目</h1><blockquote><p>修改好 源 和 仓库位置，下面就创建项目</p></blockquote><ol><li><p>首先配置 IDEA 环境</p><p>全局配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719105546.png" alt="image-20210719105546263"></p><p>找到你自己的 Maven目录和仓库位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719110350.gif" alt="21_07_19_11：03：04__"></p></li><li><p>创建 Maven项目（java项目）</p><ul><li><p>选择 <strong>quickstart</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719110715.png" alt="image-20210719110715733"></p></li><li><p>设置 <strong>GroupId Artifactld</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719111026.png" alt="image-20210719111026668"></p></li><li><p>这一步就是配置了的 Maven环境和项目的参数，在确定一遍是否有错误</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719111133.png" alt="image-20210719111133203"></p></li><li><p>最后你可以设置项目保存的位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719111254.png" alt="image-20210719111254200"></p></li><li><p>进来之后选择箭头指向</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719111404.png" alt="image-20210719111404280"></p><p>过了一段时间下载好之后你就会发现仓库里面的一些 jar 文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719113329.png" alt="image-20210719113329494"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719112709.png" alt="image-20210719112709362"></p></li></ul></li><li><p>编译项目（使用IDEA的界面操作等同于在终端输入命令）举例添加编译命令</p><ul><li><p>编辑命令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719113714.png" alt="image-20210719113714663"></p></li><li><p>添加一条命令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210719113942.gif" alt="21_07_19_11：39：00__"></p></li><li><p>还可以添加打包命令等等</p></li></ul></li></ol><h1>Maven项目结构</h1><blockquote><p>Maven默认约定了一套目录结构，在通过Maven创建了项目以后，项目的目录结构就是以这套目录结构作为模板创建的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;basedir&#125;</span></span><br><span class="line">|-- pom.xml</span><br><span class="line">|-- src</span><br><span class="line">||-- main</span><br><span class="line">||`-- java</span><br><span class="line">||`-- resources</span><br><span class="line">||`-- filters</span><br><span class="line">|`-- test</span><br><span class="line">||`-- java</span><br><span class="line">||`-- resources</span><br><span class="line">||`-- filters</span><br><span class="line">|`-- it</span><br><span class="line">|`-- assembly</span><br><span class="line">|`-- site</span><br><span class="line">`-- LICENSE.txt</span><br><span class="line">`-- NOTICE.txt</span><br><span class="line">`-- README.txt</span><br></pre></td></tr></table></figure><ul><li><code>src/main/java</code> 项目的源代码</li><li><code>src/main/resources</code> 项目的资源文件</li><li><code>src/main/filters</code> 项目的资源过滤文件</li><li><code>src/main/webapp</code> 如果是web项目，则该目录是web应用源代码所在的目录，比如html文件和web.xml等都在该目录下。</li><li><code>src/test/java</code> 测试代码</li><li><code>src/test/resources</code> 测试相关的资源文件</li><li><code>src/test/filters</code> 测试相关的资源过滤文件</li><li><code>src/it</code> 集成测试代码所在的目录，主要是供别的插件使用的。</li><li><code>src/assembly</code> 组件（Assembly）描述符所在的目录</li><li><code>src/site</code> 站点文件</li><li><code>LICENSE.txt</code> 项目的许可文件</li><li><code>NOTICE.txt</code> 该项目依赖的库的注意事项</li><li><code>README.txt</code> 项目的readme文件</li></ul><blockquote><p>参考：<a href="https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="2021/07/14/HTML/"/>
      <url>2021/07/14/HTML/</url>
      
        <content type="html"><![CDATA[<hr><h1>元素</h1><h2 id="head-元素">head 元素</h2><blockquote><p>网站信息设置，比如设置内容的字符编码、网站标题</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meta# 字符编码</span><br><span class="line">title# 网站标题</span><br><span class="line">style</span><br><span class="line">link</span><br><span class="line">base</span><br><span class="line">script</span><br><span class="line">noscritpt</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210716100525.png" alt="image-20210716100518122"></p><h2 id="h、p、strong-元素">h、p、strong 元素</h2><blockquote><p>h：标题等级</p><p>p：段落标签</p><p>strong：强调标签</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210718123026.png" alt="image-20210718123019204"></p><h2 id="pre">pre</h2><blockquote><p>pre：会完整显示包住内容的格式</p></blockquote><blockquote><p>将保留元素内容里面的排版，注意缩进</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210718124333.png" alt="image-20210718124333626"></p><blockquote><p>p 标签里面可以嵌套 strong 标签，反之不行</p><p>pre 标签可以嵌套 code 标签，反之不行</p></blockquote><h2 id="字符实体">字符实体</h2><blockquote><p>在 HTML 中，某些字符是预留的。</p><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p><p>字符实体类似这样：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;entity_name;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&amp;#entity_number;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210718124830.png" alt="image-20210718124829956"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210718125421.png" alt="image-20210718125421582"></p><h2 id="不间断空格">不间断空格</h2><blockquote><p>上面我们知道了字符实体</p><p>HTML 中的常用字符实体是不间断空格( )。</p><p>浏览器总是会截短 HTML 页面中的空格。如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个。如需在页面中增加空格的数量，您需要使用   字符实体</p></blockquote><h2 id="img-元素">img 元素</h2><blockquote><p>img：图片标签</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210718164622.png" alt="image-20210718164621978"></p><blockquote><p>alt 是 img 的必要属性</p><p>有些时候图片要进行缩放</p><ol><li>可以直接设置 宽 和 高 。但是这样要安装图片原比例等比缩放，比较麻烦</li><li>设置 宽 或者 高，另外一个数据浏览器会自动根据图片的宽高比计算出另外一个数据</li></ol></blockquote><blockquote><p>Web 图片常用格式</p><ol><li>jpg：静态图片，不支持透明</li><li>png：静态图片，支持透明</li><li>gif：静态图片，动态图片、支持透明</li></ol><p>HTML中图片属性的高度和宽度单位默认是 <strong>px</strong> (1个像素）</p></blockquote><h2 id="a-元素">a 元素</h2><blockquote><p>a：定义超链接，打开新的 URL</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oh my zsh</title>
      <link href="2021/07/13/oh-my-zsh/"/>
      <url>2021/07/13/oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<hr><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713162131.png" alt="image-20210713162131071"></p><hr><h1>安装 zsh</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y zsh</span></span><br></pre></td></tr></table></figure><h1>zsh 的基础上安装 oh my zsh</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br></pre></td></tr></table></figure><ol><li><p>上面那个安装不了打开下面网址复制里面内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>随便在哪个文件夹新建 <strong><a href="http://install.sh">install.sh</a></strong>，然后把脚本内容粘贴上去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod -x install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>如图安装成功</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713103435.png" alt="image-20210713103428519"></p><h1>常用插件</h1><ol><li><p>git 插件</p><p>当有修改并未提交文件会出现一个小 × 符号</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713112025.png" alt="image-20210713105459966"></p></li><li><p>sudo 插件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713112721.png" alt="image-20210713112721543"></p></li><li><p>wd 插件（相当于快捷方式，起名之后直接用 【wd + 名字】 跳转）</p><blockquote><p>能够在常用文件夹之中快速切换访问</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wd add name<span class="comment"># 给当前文件夹起名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd name<span class="comment"># 切换到name映射的路径下</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd rm name<span class="comment"># 删除name的映射快捷方式</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd list<span class="comment"># 查看现有映射</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd show <span class="comment"># 查看当前文件夹映射名称</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713114006.png" alt="image-20210713114006154"></p></li><li><p>zsh-syntax-highlighting 插件（命令高亮）</p><p>先在配置文件（.zshrc）添加插件名称，然后安装依赖</p><blockquote><p>先克隆会失败，要先把插件名称加到配置文件去，具体原因未知</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713120744.gif" alt="21_07_13_12：07：21__"></p></li><li><p>zsh-autosuggestions 插件（命令提示补全，按右键补全）</p><p>先添加到配置，在安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713121423.gif" alt="21_07_13_12：14：09__"></p></li></ol><h1>主题</h1><ol><li><p>agnoster</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713123222.png" alt="image-20210713123222324"></p></li><li><p>amuse</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713123036.png" alt="image-20210713123036793"></p></li><li><p>bira</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713130612.png" alt="image-20210713130612624"></p></li><li><p>ys</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713130427.png" alt="image-20210713130427363"></p></li><li><p>jonathan</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713130517.png" alt="image-20210713130517919"></p></li><li><p>xiong-chiamiov-plus</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713160523.png" alt="image-20210713160523062"></p></li><li><p>re5et</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713160941.png" alt="image-20210713160941522"></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;amuse&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;bira&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;jonathan&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;ys&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;xiong-chiamiov-plus&quot;</span></span></span><br><span class="line">ZSH_THEME=&quot;re5et&quot;</span><br><span class="line"></span><br><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">sudo</span><br><span class="line">wd</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="2021/06/04/vim/"/>
      <url>2021/06/04/vim/</url>
      
        <content type="html"><![CDATA[<hr><h1>vim</h1><h2 id="常用命令">常用命令</h2><ol><li><p>[ : ] + [ e ] == 保存文档</p></li><li><p>[ : ] + [ q ] == 退回</p></li><li><p>[ : ] + [ w ] + [ q ]== 退回</p></li><li><p>[ i ] == 光标前面写入</p></li><li><p>[ a ] == 光标后面写入，可在最后一个字符按a，这样就可以在行尾添加了</p></li><li><p>[ shift ] + [ a ] == 直接跳到行尾</p></li><li><p>[ shift ] + [ i ] == 直接跳到行前</p></li><li><p>[ o ] == 新建下一行并将光标跳到下一行</p></li><li><p>[ shift ] + [ o ] == 新建上一行并光标跳转</p></li><li><p>[ h ] [ j ] [ k ] [ l ] == 左，下，上，右</p></li><li><p>[ x ] == 删除当前字符</p></li><li><p>[ u ] == 撤销</p></li><li><p>[ d ] + [ num ] + [ 左 ] == 删除左边 num 个字符</p></li><li><p>[ d ] + [ num ] + [ 右 ] == 删除右边 num 个字符</p></li><li><p>[ d ] + [ d ] == 剪切这一行</p></li><li><p>[ y ] + [ num ] + [ 左 ] == 复制左边 num 个字符</p></li><li><p>[ y ] + [ num ] + [ 右 ] == 复制右边 num 个字符</p></li><li><p>[ p ] == 粘贴</p></li><li><p>[ c ] + [ w ] == 更改这个单词（即删除这个单词并进入写入模式）</p></li><li><p>[ b ] == 移到光标所在单词的第一个</p></li><li><p>[ c ] + [ i ] + [ 符号 ] == 将符号内的删除并进入写入模式</p><p>EX：“Hello World” 按下 <strong>ci&quot;</strong> 就会删除 <strong>“”</strong> 里面的东西并开始写入</p></li><li><p>[ d ] + [ i ] + [ 符号 ] == 将符号内的删除不进入写入模式</p></li><li><p>[ 0 ] == 回到这行最开头</p></li><li><p>[ d ] + [ f ] + [ 符号 ] == 从光标处删除到包括符号的字符</p></li><li><p>[ y ] + [ f ] + [ 符号 ] == 从光标处复制到包括符号的字符</p></li><li><p>[ c ] + [ f ] + [ 符号 ] == 从光标处删除到包括符号的字符，并进入写入模式</p></li><li><p>[ / ] + [ 单词 ] == 即搜索单词并跳转到该单词</p></li></ol><h2 id="插件安装">插件安装</h2><ol><li><p>安装 vim 插件管理器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure></li><li><p>安装插件</p><ul><li><p>airline</p><p>在 GitHub 上搜索 <strong>airline</strong> 把地址中 <strong><a href="http://github.com">github.com</a></strong> 后面的复制到如图位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210604161858.png" alt="image-20210604161858680"></p></li></ul></li></ol><h2 id="配置文件">配置文件</h2><blockquote><p>放到 /root/.vim/vimrc</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">syntax on &quot;代码高亮</span><br><span class="line"></span><br><span class="line">let mapleader=&quot; &quot;</span><br><span class="line">noremap J 5j</span><br><span class="line">noremap K 5k</span><br><span class="line">noremap &lt;LEADER&gt;&lt;CR&gt; :nohlsearch&lt;CR&gt; &quot;按下空格然后回车取消搜索高亮</span><br><span class="line"></span><br><span class="line">map S :w&lt;CR&gt;</span><br><span class="line">map R :source $MYVIMRC&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">set hlsearch &quot;搜索高亮</span><br><span class="line">exec &quot;nohlsearch&quot;</span><br><span class="line">set incsearch &quot;边搜索边高亮</span><br><span class="line">set nonumber &quot;行号</span><br><span class="line">set relativenumber &quot;行号(以当前行为基)</span><br><span class="line">set nocursorline &quot;所在行下划线</span><br><span class="line">set wrap &quot;自动折行取消</span><br><span class="line">set showcmd &quot;查看指令</span><br><span class="line">set wildmenu &quot;指令选择菜单</span><br><span class="line">set ignorecase &quot;忽略大小写搜索</span><br><span class="line"></span><br><span class="line">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line"></span><br><span class="line">Plug &#x27;vim-airline/vim-airline&#x27;</span><br><span class="line"></span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure><h2 id="粘贴板">粘贴板</h2><blockquote><p>将 vim 粘贴板与系统粘贴板互通</p></blockquote><ol><li><p>查看是否支持 <strong>clipboard</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210604144057.png" alt="image-20210604144050315"></p><p>-clipboard 表示不支持、+clipboard 表示支持</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO部署到云服务器</title>
      <link href="2021/05/09/HEXO%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/05/09/HEXO%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><h1>服务器购买</h1><ol><li><p>购买，这里以腾讯云服务器为例子</p></li><li><p>登录</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210509161023.png" alt="image-20210509161010482"></p></li><li><p>不记得密码重置密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210509161818.png" alt="image-20210509161814372"></p></li><li><p>重置密码之后用终端登录，用 <strong>xshell</strong> 为例</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515113041.png" alt="image-20210515113027271"></p></li></ol><h1>git及创建仓库</h1><h2 id="git及用户">git及用户</h2><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><blockquote><p>查看 git 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">git version</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>创建一个 <strong>git</strong> 账户用来管理以后的博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 git 账户</span></span><br><span class="line">adduser git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为 git 账户设置密码</span></span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure></li><li><p>为 <strong>git 用户</strong> 添加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line">git     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515121005.png" alt="image-20210515121002294"></p></li><li><p>最后你为 <strong>git用户</strong> 添加秘钥（我理解为和本地进行身份校准，秘钥不一致就表示不匹配，就无法上传）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/git/.ssh</span><br><span class="line">vim /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后把本地的公钥粘贴进去：在本地的 *<strong>C:\Users\用户名\ .ssh*</strong> 下，如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515164747.png" alt="image-20210515164747083"></p><p>如果没有的话就创建秘钥，方法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>上面对 <strong>git</strong> 用户操作就结束了，下面是创建一个 <strong>git仓库</strong>（存放博客）</p></blockquote><h2 id="仓库创建">仓库创建</h2><ol><li><p>切换到 <strong>git用户</strong>（重要）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br></pre></td></tr></table></figure><blockquote><p>这里忘记切换的话，后面从本地部署到服务器的时候会报 “权限不够” 错误</p><p>而且后面更改很麻烦，要更好很多，一定要先切换到 git用户 再创建仓库</p></blockquote></li><li><p><strong>创建仓库</strong></p><p>选择一个路径存放：我这里选的是 <strong>/home/git/repo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/git/repo</span><br><span class="line">git init --bare name.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里我的是仓库名是 huiHuiLovesToEatLittleClouds.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git init --bare huiHuiLovesToEatLittleClouds.git</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515122433.png" alt="image-20210515122431749"></p></li><li><p><strong>创建博客存放目录</strong></p><p>上面创建了一个仓库用来存放博客，其实并不是真正存放了博客的渲染文件，故我们还需在创建一个文件夹保存真正的博客渲染文件</p><p>选择一个路径存放真正能渲染的博客文件：我这里是 <strong>/www/wwwroot/Blog_hexo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /www/wwwroot/Blog_hexo</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515123546.png" alt="image-20210515123544600"></p></li><li><p><strong>权限修改</strong>（可能不用修改）</p><p>现在看下我刚刚创建的 <strong>Blog_hexo</strong> 这个目录的 <strong>所有者和用户组</strong> 是 <strong>root</strong> ，这样的情况就要修改，如果是 <strong>git</strong> 则不修改，直接跳到 <strong>5</strong></p><p>然后看下我另外一个博客目录 （hexo）的 <strong>所有者和用户组</strong> 是 git</p><p>这里我们要将 <strong>Blog_hexo</strong> 的 <strong>所有者和用户组</strong> 修改为 git</p><ul><li>原因：因为我们到时候在本地部署然后上传到服务器的时候是使用 git用户 上传的，不修改的话权限不够，如果想够权限的话直接用 root用户 上传也可以</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515162715.png" alt="image-20210515162712301"></p><p>然后我们修改权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown git:git -R /www/wwwroot/Blog_hexo</span><br></pre></td></tr></table></figure></li><li><p><strong>仓库和博客目录联系</strong></p><blockquote><p>这里我不太理解其中的逻辑</p></blockquote><p>先梳理一下</p><ul><li>仓库是：<strong>/home/git/repo/huiHuiLovesToEatLittleClouds.git</strong></li><li>博客目录是：<strong>/www/wwwroot/Blog_hexo</strong></li></ul><p>然后我们使两者关联起来：先来到仓库，里面有一个 <strong>hooks</strong> 文件夹，进去创建一个名为 <strong>post-receive</strong> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git/repo/huiHuiLovesToEatLittleClouds.git/hooks/</span><br><span class="line">vim post-receive</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把下面这个话填进去保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git --work-tree=你的博客目录 --git-dir=你的仓库目录 checkout -f</span></span><br><span class="line">git --work-tree=/www/wwwroot/Blog_hexo --git-dir=/home/git/repo/huiHuiLovesToEatLittleClouds.git checkout -f</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>来到这里的话 git 已经配置好了，接下来是 Nginx 的配置</p></blockquote><h1>Nginx</h1><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><blockquote><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">nginx -v</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>找到 nginx 的安装路径</p><p>这样是在：<strong>/etc/nginx/</strong> 目录下，找到 nginx.conf 配置文件并修改</p><ul><li>server_name：你的域名或服务器IP</li><li>root：博客的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515172017.png" alt="image-20210515172014266"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515172327.png" alt="image-20210515172325142"></p></li></ol><blockquote><p>这里 Nginx 的配置也完成了，下面修改本地的配置文件即可</p></blockquote><h1>端口设置</h1><blockquote><p>当我们访问一个域名的时候默认是访问它指向的服务器的 80 端口，可以用一个域名对应多个端口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210713174334.png" alt="image-20210713174334259"></p><blockquote><p>如果需要访问 81 端口：<strong>huige.link:81</strong></p><p>当然也可以对应2个以上端口</p></blockquote><h1>本地</h1><ol><li><p>修改配置文件</p><p>本地的配置文件（博客的站点配置文件）修改上传仓库为刚刚配置的仓库，具体如图举例</p></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515172841.png" alt="image-20210515172841604"></p><blockquote><p>git 表示使用 git 用户上传</p></blockquote><ol start="2"><li><p>本地部署上传到服务器 —— 成功状态</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515173811.png" alt="image-20210515173811795"></p></li></ol><h1>遇到的问题</h1><ol><li><p>当我要上传到服务器的时候报错如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515180915.png" alt="image-20210515174640007"></p><blockquote><p>原因及解决如下</p></blockquote><ul><li><p>原因：由于我当时创建仓库的时候忘记切换到 git用户 创建了所以所有者是 root ，推送的时候没有权限</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515181155.png" alt="image-20210515181155578"></p></li><li><p>解决</p><ul><li><p>法一：在创建仓库的时候就使用 git用户</p></li><li><p>法二：将这个仓库的所有者改为 git，并且仓库里面的子文件夹的所有者也是 git，一直到没有子文件夹为止</p><p>如下图这种还是会报错，必须仓库里面的每个文件夹及其子文件夹及其子子文件夹…的所有者均为 git 即可，然后在修改他们的读写执行的权限，看下面（RWX 权限设置）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515183556.png" alt="image-20210515183552866"></p></li></ul></li><li><p>RWX 权限设置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210515184134.png" alt="image-20210515184132023"></p></li></ul></li><li><p>如果部署过程中遇到了 <strong>有关权限</strong> 的报错，看下仓库和博客目录是不是 <strong>root用户</strong>， 因为我们本地使用的是 <strong>git用户</strong> 进行部署，所以会不够权限。再不行查看文件夹以及文件的 RWX 权限</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="2021/05/01/MySQL/"/>
      <url>2021/05/01/MySQL/</url>
      
        <content type="html"><![CDATA[<hr><h1>MySql安装 - Windows</h1><blockquote><p>如果安装过程中，出错了或者想重新再装</p><p>sc delete mysql （删除已经安装好的MySQL服务，慎重）</p></blockquote><blockquote><p>下面用MySQL-5.7.34 例子，注意：exe 文件和 zip 安装不一样</p></blockquote><ol><li><p>下载 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/5.7.html</span><br></pre></td></tr></table></figure></li><li><p>解压后添加环境变量</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501150506.png" alt=""></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171446.png" alt="image-20210501150838538"></p></li><li><p>添加 <strong>my.ini</strong> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置自己为自己的 mysql 安装目录</span></span><br><span class="line">basedir=D:\Program Files\RELY\mysql-5.7.34-winx64\</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为 mysql 的数据目录，这个目录是系统创建，不用认为创建</span></span><br><span class="line">datadir=D:\Program Files\RELY\mysql-5.7.34-winx64\data\</span><br><span class="line">port=3306</span><br><span class="line">character_set_server=utf8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 跳过安全检查</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171447.png" alt="image-20210501152954827"></p></li><li><p>用管理员权限打开 cmd，进入到 mysql 的 bin 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171448.png" alt="image-20210501155114114"></p></li><li><p>初始化数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210501155524645.png" alt="image-20210501155524645"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210715122521.png" alt="image-20210715122514170"></p></li><li><p>启动 mysql 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171449.png" alt="image-20210501160015267"></p><blockquote><p>停止 mysql 服务：net stop mysql</p></blockquote></li><li><p>进入 mysql 管理终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 表示当前 root 用户密码为空</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210501160934780.png" alt="image-20210501160934780"></p></li><li><p>修改 root 用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面语句就是表示 修改 root 用户密码为 123456</span></span><br><span class="line">update user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出（只是退出 mysql 终端）</span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171450.png" alt="image-20210501161256068"></p></li><li><p>修改 <strong>my.ini</strong> 文件，再次进入就会进行权限验证了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171451.png" alt="image-20210501161531863"></p></li><li><p>重新启动 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171424.png" alt="image-20210501162043162"></p></li></ol><blockquote><p>最后，全部指令浏览<br>注：如果安装过程出错，清楚 mysql 服务（sc delete mysql），重新按照步骤安装</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501171418.png" alt="image-20210501162706495"></p><h1>MySQL安装 - CentOs</h1><blockquote><p>查看系统版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">$ uname -a</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">$ uname -m</span></span><br></pre></td></tr></table></figure></blockquote><ol><li><p>在某一个位置保存下载 MySQL RPM包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span></span><br></pre></td></tr></table></figure><p>PS：CentOS7.6 自带的类 mysql 数据库是 <code>mariadb</code>，会跟 mysql 冲突，要先删除</p><ul><li><p>首先查询看有没有 <code>mariadb</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>有就删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -e --nodeps mariadb-libs</span></span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210829220407.png" alt="image-20210829220400287"></p></li><li><p>解压 mysql RPM 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210829221525.png" alt="image-20210829221525882"></p></li><li><p>然后安装 MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh  mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210829222230.png" alt="image-20210829222230078"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210829222533.png" alt="image-20210829222533835"></p></li><li><p>启动 Mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start mysqld.service</span></span><br></pre></td></tr></table></figure></li><li><p>查看默认分配密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">&quot;password&quot;</span> /var/<span class="built_in">log</span>/mysqld.log</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p[password]</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210829223407.png" alt="image-20210829223407837"></p></li><li><p>修改密码</p><p>首先可以设置密码提示（默认 <code>validate_password_policy=1</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> global validate_password_policy=0;</span></span><br></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>=password(<span class="string">&#x27;自己的密码&#x27;</span>);</span></span><br></pre></td></tr></table></figure><p>刷新使密码生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; flush privileges;</span></span><br></pre></td></tr></table></figure></li></ol><h1>数据库</h1><p>命令连接MySQL</p><ul><li><p>登录前，保证 MySQL 服务已经启动</p></li><li><p>连接到 MySQL 服务（MySQL数据库）的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 主机ip -P 端口 -u 用户名 -p密码</span><br></pre></td></tr></table></figure><ul><li>-p密码不要有空格</li><li>-p后面没有写密码，回车会要求输入密码</li><li>如果没有写 -h 主机，默认就是本机</li><li>如果没有写 -P 端口，默认就是3306</li><li>在实际工作中，端口 3306 是会修改成其他的</li></ul></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501182631.png" alt="image-20210501182625225"></p><h2 id="图形界面-Navicat">图形界面 - Navicat</h2><ol><li><p>连接数据库</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501184751.png" alt="image-20210501184751161"></p></li><li><p>创建数据库</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501194503.png" alt="image-20210501194459879"></p></li><li><p>创建表…</p></li></ol><h2 id="数据库三层结构">数据库三层结构</h2><ol><li><p>所谓安装 MySQL 数据库，就是在主机安装一个数据库管理管理系统（DBMS），这个管理程序可以管理多个数据库。</p><p>DBMS（database manage system）</p></li><li><p>一个数据库中可以创建多个表，以保存数据（信息）</p></li><li><p>数据库管理系统（DBMS）、数据库和表的关系如图所示</p><blockquote><p>数据库 - 普通表的本质是文件</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210501211131.png" alt="image-20210501211128356"></p></li></ol><h2 id="SQL语句分类">SQL语句分类</h2><ol><li>DDL：数据定义语句 [create 表，库…]</li><li>DML：数据操作语句 [增加 insert、修改 update、删除 delete]</li><li>DQL：数据查询语句 [select]</li><li>DCL：数据控制语句 [管理数据库：比如用户权限 grant revoke]</li></ol><h2 id="创建数据库">创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] db_name</span><br><span class="line">[create_specification [, create_specification]...]</span><br><span class="line"></span><br><span class="line">create_specification:</span><br><span class="line">[<span class="keyword">DEFAULT</span>] <span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">[<span class="keyword">DEFAULT</span>] <span class="keyword">COLLATE</span> collation_name</span><br></pre></td></tr></table></figure><ol><li>CHARACTER SET ：指定数据库采用的字符集，如果不指定字符集，<strong>默认 utf8</strong></li><li>COLLATE ：指定数据库字符集的校对规则<ul><li>常用的 utf8_bin [区分大小写]</li><li>utf8_general_ci [不区分大小写]</li><li>注意默认是 <strong>utf8_general_ci</strong></li></ul></li></ol><blockquote><p>例子</p><p>分别创建 3 个数据库，看写法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建 db02 数据库，并且不设置字符集和校对规则</span><br><span class="line"># 字符集默认为 utf8</span><br><span class="line"># 校对规则默认为 utf8_general_ci</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db02;</span><br><span class="line"></span><br><span class="line"># 创建 db03 数据库</span><br><span class="line"># 字符集设置为 utf8</span><br><span class="line"># 校对规则为默认</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"># 创建 db04 数据库</span><br><span class="line"># 字符集设置为 utf8</span><br><span class="line"># 校对规则设置为 utf8_bin</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db04 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502112446.png" alt="image-20210502112439453"></p><h2 id="创建表">创建表</h2><blockquote><p>如果创建表的时候没有指定</p><p>引擎、字符集、排序规则等参数默认是数据库的字符集和排序规则</p><p>比如下面的 db02数据库为 utf8 utf8_general_ci</p><p>​  db04数据库为 utf8 utf8_bin</p><p>那么创建表的时候不设置参数的话就默认是数据库的参数</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502115148.png" alt="image-20210502115148569"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502115019.png" alt="image-20210502115015899"></p><h2 id="查看删除数据库">查看删除数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示数据库语句</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line"></span><br><span class="line"># 显示数据库创建语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line"></span><br><span class="line"># 数据库删除语句 </span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] db_name</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502121457.png" alt="image-20210502121455693"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502121657.png" alt="image-20210502121655669"></p><h2 id="备份恢复数据库">备份恢复数据库</h2><ol><li><p>备份数据库（DOS下）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p <span class="operator">-</span>B 数据库<span class="number">1</span> 数据库<span class="number">2</span> 数据库n <span class="operator">&gt;</span> 文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><blockquote><p>比如我把数据库 db01 db02 db03 db04 备份到 F 盘下取名为 bak.sql</p><p>其实 bak.sql 文件就是对应的 sql 语句</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502135153.png" alt="image-20210502135150055"></p></li><li><p>恢复数据库（<strong>进入 MySQL命令行</strong>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourse 文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><ul><li><p>法一：上面的命令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502140541.png" alt="image-20210502140539129"></p></li><li><p>法二：直接复制备份文件 bak.sql 里面的 sql 语句，然后执行</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210502140842.png" alt="image-20210502140842072"></p></li></ul></li></ol><h2 id="备份恢复数据库的表">备份恢复数据库的表</h2><ol><li><p>备份数据库的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 数据库 表<span class="number">1</span> 表<span class="number">2</span> 表n <span class="operator">&gt;</span> 文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure></li><li><p>恢复数据表</p><p>连接数据库之后，使用需要恢复到的数据库中，然后执行<code>source 路径+文件名.sql</code></p><p>使用哪个数据库就会恢复到哪个数据库中</p></li></ol><h1>表</h1><h2 id="表的创建">表的创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">    field1 datatype,</span><br><span class="line">    field2 datatype,</span><br><span class="line">    field3 datatype</span><br><span class="line">) <span class="type">character</span> <span class="keyword">set</span> 字符集 <span class="keyword">collate</span> 校对规则 engine 存储引擎</span><br><span class="line"></span><br><span class="line"># field：指定列名 datatype：指定列类型（字段类型）</span><br><span class="line"># <span class="type">character</span> <span class="keyword">set</span>：如不指定则为坐在数据库的字符集</span><br><span class="line"># <span class="keyword">collate</span>：如不指定则为所在数据库的校对规则</span><br><span class="line"># engine：引擎</span><br></pre></td></tr></table></figure><blockquote><p>EX：创建 id（整形）、name（字符串）、password（字符串）、birthday（日期），并且字符集设置为 utf8、校对规则为 utf8_bin、引擎为 INNODB</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">birthday <span class="type">DATE</span>)</span><br><span class="line"><span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin ENGINE INNODB;</span><br></pre></td></tr></table></figure><h2 id="表数据添加">表数据添加</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单列添加</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN ) <span class="keyword">VALUES</span>(value1, value2,...valueN);</span><br><span class="line"><span class="comment">-- 多列添加</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN ) <span class="keyword">VALUES</span>(value1, value2,...valueN),(value1, value2,...valueN),.....;</span><br></pre></td></tr></table></figure><h2 id="MySql常用数据类型（列类型）">MySql常用数据类型（列类型）</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210503103402.png" alt="image-20210503103356194"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210503104204.png" alt=""></p><blockquote><p>注意：</p><p>char(size)：这个 size 表示字符的个数，范围为 [0~255]</p><p>varchar(size)：这个size 也表示字符的个数，范围为[0~65535]</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Battle of Tanks</title>
      <link href="2021/03/27/Battle-of-Tanks/"/>
      <url>2021/03/27/Battle-of-Tanks/</url>
      
        <content type="html"><![CDATA[<hr><h1>Java绘图坐标体系</h1><p>坐标原点位于左上角，以像素为单位</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210327164401200.png" alt="image-20210327164401200"></p><blockquote><p>像素：密度单位</p><p>比如屏幕分辨率是 1920x1080 表示每一行有 1920 个像素点，共有 1080 行</p><p>所以该屏幕一共有 1920x1080=2,073,600 个像素</p></blockquote><h1>线程-基础</h1><ul><li>程序 Program：为了完成特定任务，用某种语言编写的一组指令的集合，也就是代码</li><li>进程：指运行中的程序、进程是一次执行过程，或是正在运行的一个程序、是动态过程，有产生 存在 消亡的过程</li><li>线程<ul><li>由进程创建，是进程的一个实体</li><li>一个进程可以拥有多个线程</li></ul></li></ul><h2 id="线程使用">线程使用</h2><h3 id="继承-Thread-实现多继承">继承 Thread 实现多继承</h3><blockquote><p>创建一个 Cat 类 每隔 1 秒输出 喵喵</p><p>然后分别查看主线程和 Cat 创建的进程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 9:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 演示通过继承 Thread 类创建线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建cat对象，可以当成线程使用</span></span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.start();    <span class="comment">// 启动线程 -&gt; 最终会执行 Cat run 方法</span></span><br><span class="line">        <span class="comment">// 说明：当 main 线程启动一个子线程 Thread-0 主线程不会阻塞，会继续执行</span></span><br><span class="line">        <span class="comment">// 主线程和子线程交替执行</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i = &quot;</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个类继承了 Thread 类，该类就可以当做线程使用</span></span><br><span class="line"><span class="comment"> * 重写 run 方法，写上自己的业务代码</span></span><br><span class="line"><span class="comment"> * run 方法来自 Thread 类实现了Runnable 接口的 run 方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        if (target != null) &#123;</span></span><br><span class="line"><span class="comment">            target.run();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵喵&quot;</span> + (++times) + <span class="string">&quot;，线程名称：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">// 让该进程休眠 1 秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (times == <span class="number">80</span>) &#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析：</p><p>main 线程会创建一个 Cat 线程</p><p>main 函数的线程名为：main</p><p>Cat 线程名称为：Thread-0</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328110217209.png" alt="image-20210328110217209" style="zoom:80%;" /><p>因为 main 线程执行次数为 60，Thread-0 线程执行次数为80</p><p>所以 main 线程先消亡，Thread-0 线程后消亡</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328105253183.png" alt="image-20210328105253183" style="zoom:80%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328105355718.png" alt="image-20210328105355718"></p><blockquote><p>这里为何不直接调用 cat.run()，并没有创建新线程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328112149331.png" alt="image-20210328112149331"></p><p>如果调用了 cat.run() 那么下面的代码就要等这个方法执行完成后方可执行（看下图），串行执行了</p><p>而且 cat 的线程名称就是 mian 并没有开辟新线程</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328111141975.png" alt="image-20210328111141975"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328111704538.png" alt="image-20210328111704538"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328111941971.png" alt="image-20210328111941971"></p><blockquote><p>下面看 start(); 执行源码分析主要执行，无用的省略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start0();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// start0() 是本地方法，由JVM调用，底层是 C/C++实现</span></span><br><span class="line"><span class="comment">// 真正实现多线程的是 start0() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328112822197.png" alt="image-20210328112822197"></p><h3 id="通过实现-Runnable-接口实现多线程">通过实现 Runnable 接口实现多线程</h3><blockquote><p>说明：由于Java 是单继承的，如果一个类继承了其他类就不能继承 Thread 类了，所以想要实现多线程就可以通过实现 Runnable 接口来实现多线程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328113720890.png" alt="image-20210328113720890"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 11:40</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 通过实现 Runnable 接口实现多线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">       <span class="comment">// 创建一个 Thread 对象，把 dog对象(实现Runnable)，放入 Thread</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(dog);</span><br><span class="line">        thread.start();</span><br><span class="line">        </span><br><span class="line">        ThreadProxy threadProxy = <span class="keyword">new</span> ThreadProxy(dog);</span><br><span class="line">        threadProxy.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;汪汪叫：&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程代理类，模拟了一个极简的 Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadProxy</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Runnable target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadProxy</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start0();   <span class="comment">// 真正实现多线程的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码的 ThreadProxy 只是模拟Thread</p></blockquote><ol><li><p>构造器接受一个实现了 Runnable 类的对象实例</p></li><li><p>用户创建线程需要调用 start() 方法</p></li><li><p>start() 方法再调用 start0() 方法</p></li><li><p>start0() 方法再调用 run() （这个run方法是传经来的对象）</p><p>比如上面代码就是 Dog 的实例 dog</p></li></ol><h3 id="实现两个线程并发">实现两个线程并发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:28</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * main 函数启动两个子线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        T2 t2 = <span class="keyword">new</span> T2();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1:Hello,World &quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (count != <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2:Hello,World &quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (count != <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">T1:Hello,World 1Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 1Thread-<span class="number">1</span></span><br><span class="line">T1:Hello,World 2Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 2Thread-<span class="number">1</span></span><br><span class="line">T1:Hello,World 3Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 3Thread-<span class="number">1</span></span><br><span class="line">................</span><br><span class="line">T1:Hello,World 79Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 79Thread-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="继承-Thread-和-实现-Runnable-的区别">继承 Thread 和 实现 Runnable 的区别</h3><ol><li><p>从java的设计看，这两者本身没有本质的区别，Thread本身就实现了 Runnable 接口</p><p>start() -&gt; start0()</p></li><li><p>实现 Runnable 接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T3 t3 = <span class="keyword">new</span> T3();</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(t3);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(t3);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br></pre></td></tr></table></figure><h3 id="卖票">卖票</h3><blockquote><p>下面是分别通过 继承和实现接口 两种方法，但都会出现超卖</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 使用多线程模拟三个窗口同事售票 100 张</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过继承实现</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket01 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket02 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket03 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        sellTicket01.start();</span></span><br><span class="line"><span class="comment">//        sellTicket02.start();</span></span><br><span class="line"><span class="comment">//        sellTicket03.start();</span></span><br><span class="line">        <span class="comment">// 通过接口实现</span></span><br><span class="line">        SellTicket02 sellTicket = <span class="keyword">new</span> SellTicket02();</span><br><span class="line">        Thread thread01 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        Thread thread02 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        Thread thread03 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line">        thread03.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过继承方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 接口方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程终止">线程终止</h2><blockquote><p>设置 loop 值实现——通知方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.ThreadExit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 14:04</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.ThreadExit</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadExit01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程休眠 10s&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        t.setLoop(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T运行中......&quot;</span> + (++num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(<span class="keyword">boolean</span> loop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">主线程休眠 10s</span><br><span class="line">T运行中.....<span class="number">.1</span></span><br><span class="line">T运行中.....<span class="number">.2</span></span><br><span class="line">T运行中.....<span class="number">.3</span></span><br><span class="line">T运行中.....<span class="number">.4</span></span><br><span class="line">T运行中.....<span class="number">.5</span></span><br><span class="line">T运行中.....<span class="number">.6</span></span><br><span class="line">T运行中.....<span class="number">.7</span></span><br><span class="line">T运行中.....<span class="number">.8</span></span><br><span class="line">T运行中.....<span class="number">.9</span></span><br><span class="line">T运行中.....<span class="number">.10</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="线程常用方法">线程常用方法</h2><ol><li><p>setName// 设置线程名称</p></li><li><p>getName   // 返回线程名称</p></li><li><p>start</p></li><li><p>run    // 调用线程对象 run 方法</p></li><li><p>setPriority    // 更改线程的优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The minimum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The default priority that is assigned to a thread.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line">   </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The maximum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>getPriority    // 获取线程的优先级</p></li><li><p>sleep    // 在指定的毫秒数内让当前正在执行的线程休眠</p></li><li><p>interrupt    // 中断程序</p></li><li><p>yield    // 线程礼让，让出cpu，让其他线程执行，但礼让时间不确定，故不一定礼让成功</p></li><li><p>join    // 线程插队，插队的线程一旦插队成功，则肯定先执行完插入的线程所有的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 15:25</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Method</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程吃包子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程（小弟）吃了 &quot;</span> + i + <span class="string">&quot; 个包子&quot;</span>);</span><br><span class="line">            <span class="comment">// 主线程吃 5 个包子就让老大吃完 20 个然后在吃</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程（小弟）让 包子给 老大吃&quot;</span>);</span><br><span class="line">                <span class="comment">// join 线程插队</span></span><br><span class="line">                t.join();</span><br><span class="line">                <span class="comment">// yield 礼让</span></span><br><span class="line"><span class="comment">//                Thread.yield();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;老大吃完了，接下来主线程（小弟）吃&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程（老大）吃了 &quot;</span> + i + <span class="string">&quot; 个包子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">子线程（老大）吃了 <span class="number">1</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">1</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">2</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">2</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">3</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">3</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">4</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">4</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">5</span> 个包子</span><br><span class="line">主线程（小弟）让 包子给 老大吃</span><br><span class="line">子线程（老大）吃了 <span class="number">5</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">6</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">7</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">8</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">9</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">10</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">11</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">12</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">13</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">14</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">15</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">16</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">17</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">18</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">19</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">20</span> 个包子</span><br><span class="line">老大吃完了，接下来主线程（小弟）吃</span><br><span class="line">主线程（小弟）吃了 <span class="number">6</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">7</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">8</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">9</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">10</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">11</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">12</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">13</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">14</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">15</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">16</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">17</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">18</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">19</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">20</span> 个包子</span><br></pre></td></tr></table></figure></li></ol><h3 id="用户线程和守护线程">用户线程和守护线程</h3><ol><li>用户线程：也叫工作线程，当线程的任务执行完或通知方式</li><li>守护线程：一般为工作线程服务，当所有的用户线程结束，守护线程自动结束</li><li>常见的守护线程：垃圾回收机制</li></ol><blockquote><p>下面测试如何将一个线程设置为守护线程</p><p>ThreadMethod02</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 16:03</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Method</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyDaemonThread());</span><br><span class="line">        <span class="comment">// 如果我们希望当 main 线程结束以后，子线程自动结束</span></span><br><span class="line">        <span class="comment">// 只需将子线程设置为守护线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;我是 main&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDaemonThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是MyDaemonThread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程生命周期">线程生命周期</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328163835246.png" alt="image-20210328163835246"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210328163934258.png" alt="image-20210328163934258"></p><blockquote><p>通过下面代码查看状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.State;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 16:47</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.State</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;Hi &quot;</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 NEW</span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Hi <span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Hi <span class="number">1</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">3</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">4</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">5</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">6</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">7</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">8</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">9</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TERMINATED</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程同步机制">线程同步机制</h2><blockquote><p>Synchronize</p><p>在多线程编程中，一些敏感数据不允许被多个线程同时访问，保证数据在任何时刻，最多有一个线程访问，以保证数据的完整性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Synchronize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Synchronize</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 使用多线程模拟三个窗口同事售票 100 张</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过继承实现</span></span><br><span class="line">        SellTicket01 sellTicket01 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        SellTicket01 sellTicket02 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        SellTicket01 sellTicket03 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        sellTicket01.start();</span><br><span class="line">        sellTicket02.start();</span><br><span class="line">        sellTicket03.start();</span><br><span class="line">        <span class="comment">// 通过接口实现</span></span><br><span class="line"><span class="comment">//        SellTicket02 sellTicket = new SellTicket02();</span></span><br><span class="line"><span class="comment">//        Thread thread01 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        Thread thread02 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        Thread thread03 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        thread01.start();</span></span><br><span class="line"><span class="comment">//        thread02.start();</span></span><br><span class="line"><span class="comment">//        thread03.start();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;  <span class="comment">// 同步方法，在同一时刻，只能有一个线程来执行该方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步方法实现加锁</span></span><br><span class="line">    <span class="comment">// 这时锁在 this 对象</span></span><br><span class="line">    <span class="comment">// 也可以在代码块写 synchronized ，这是同步代码块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;  <span class="comment">// 同步方法，在同一时刻，只能有一个线程来执行该方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="comment">/*this*/</span> object) &#123;    <span class="comment">// 写this或object都可以</span></span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程死锁">线程死锁</h2><blockquote><p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁</p></blockquote><blockquote><p>举例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Synchronize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Soundbank;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 20:06</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Synchronize</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeadLockDemo deadLockDemo = <span class="keyword">new</span> DeadLockDemo(<span class="keyword">true</span>);</span><br><span class="line">        DeadLockDemo deadLockDemo1 = <span class="keyword">new</span> DeadLockDemo(<span class="keyword">false</span>);</span><br><span class="line">        deadLockDemo.start();</span><br><span class="line">        deadLockDemo1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="keyword">static</span> Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeadLockDemo</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 1 &quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 2 &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 3 &quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 4 &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="释放锁">释放锁</h2><ol><li>当前线程的同步方法、同步代码执行结束</li><li>当前线程在同步代码块、同步方法中遇到了 <strong>break、return</strong></li><li>当前线程在同步代码块、同步方法中出现了未处理的 <strong>Error、Exception</strong>，导致异常结束</li><li>当前线程在同步代码快、同步方法中执行了线程对象的 <strong>wait()</strong> 方法，当前线程暂停，并释放锁</li></ol><blockquote><p>下面操作不会释放锁</p></blockquote><ol><li>线程执行同步代码块或者同步方法时，程序调用了 <strong>Thread.sleep()、Thread.yield()</strong> 方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其他线程调用了该线程的 <strong>suspend()</strong> 方法将该线程挂起，该线程不会释放锁</li></ol><h2 id="练习">练习</h2><blockquote><p>（1）在main方法中启动两个线程</p><p>（2）第 1 个线程循环随机打印 100 以内的整数</p><p>（3）直到第 2 个线程从键盘读取了 “Q” 命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 21:11</span></span><br><span class="line"><span class="comment"> * @ Description: com.Homework</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        thread.start();</span><br><span class="line">        T2 t2 = <span class="keyword">new</span> T2(t1);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机输出 1-100 数字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(<span class="keyword">boolean</span> loop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出 1-100 数字</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;T1 线程退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入 Q 上面的线程就会退出</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T1 a;</span><br><span class="line">    <span class="keyword">private</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">T2</span><span class="params">(T1 a)</span> </span>&#123;   <span class="comment">// 构造器传入 T1 对象</span></span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 接受到用户的输入</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入指令(Q)表示退出 : &quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> key = scanner.next().toUpperCase().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 以通知的方式结束 a</span></span><br><span class="line">                a.setLoop(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;T2 线程退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（1）有 2 个用户分别从同一个卡上取钱 总额为 10000</p><p>（2）每次都取 1000，当余额不足时，不能取款</p><p>（3）不能出现超取现象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Homework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 21:47</span></span><br><span class="line"><span class="comment"> * @ Description: com.Homework</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        thread1.setName(<span class="string">&quot;T1&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        thread2.setName(<span class="string">&quot;T2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取款线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (money &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;余额不足！！！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                money -= <span class="number">1000</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 取出 1000, 当前余额 : &quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="2021/03/22/STL/"/>
      <url>2021/03/22/STL/</url>
      
        <content type="html"><![CDATA[<hr><h1>vector</h1><h2 id="接口">接口</h2><ol><li><p>构造函数</p><ul><li>vector<T>// 采用模板实现类实现，默认构造函数</li><li>vector(v.begin(), v.end)// 拷贝 v[begin(), end())区间的元素</li><li>vector(n, elem)// 构造函数将 n 个 elem 拷贝给本身</li><li>vector(const vector &amp;vec)   // 拷贝构造函数</li></ul></li><li><p>常用赋值</p><ul><li>assign(beg, end);// 将 [begin, end) 区间的数据拷贝赋值给本身</li><li>assign(n, elem);// 将n个elem拷贝赋值给本身</li><li>vector&amp; operator=(const vector &amp;vec);// 重载等号操作符</li><li>swap(vec);// 将vec与本身的元素互换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>, <span class="number">5</span>)</span></span>;<span class="comment">// 10个5</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(v2.begin(), v2.end())</span></span>;<span class="comment">// 将v2拷贝到v3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v4;</span><br><span class="line">v4.assign(v3.begin(), v3.end());<span class="comment">// 将v3赋值给v4</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v5;</span><br><span class="line">v5 = v3;<span class="comment">// 用等号赋值一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//swap交换</span></span><br><span class="line">v5.swap(v4);<span class="comment">// 将v5和v4内容互换</span></span><br></pre></td></tr></table></figure></li><li><p>大小操作</p><ul><li>size();     // 返回元素个数</li><li>empty();</li><li>resize(int num);     // 重新定义容器长度，如果变长，则用默认值填充新位置，如果变短，则超出的部分元素舍弃</li><li>resize(int num, elem);</li><li>capacity();     // 容器的容量</li><li>reserve(int len);    // 预留len和元素长度，预留位置不初始化，元素不可访问</li></ul></li><li><p>数据存储操作</p><ul><li>at(int index);    // 越界抛异常 out_of_range</li><li>operator[];    // 越界运行直接报错</li><li>front();    // 返回第一个元素</li><li>back();    // 返回最后一个元素</li></ul></li><li><p>插入和删除</p><ul><li>insert(const_iterator pos, int count, elem);    // 迭代器指向位置 pos 插入 count 个 元素 elem</li><li>insert(const_iterator pos, elem);    // 同上，不过默认插入一个 elem</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.begin(); it != v.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    vec.push_back(<span class="number">1</span>);</span><br><span class="line">    vec.push_back(<span class="number">2</span>);</span><br><span class="line">    vec.push_back(<span class="number">3</span>);</span><br><span class="line">    vec.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    vec.insert(vec.begin(), <span class="number">100</span>);</span><br><span class="line">    printVector(vec);</span><br><span class="line"></span><br><span class="line">    vec.insert(vec.end(),<span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line">    printVector(vec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* out</span></span><br><span class="line"><span class="comment">100_1_2_3_4_</span></span><br><span class="line"><span class="comment">100_1_2_3_4_100_100_100_</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>push_back(elem);     // 尾部插入元素</li><li>pop_back();    // 删除最后一个元素</li><li>erase(const_iterator start, const_iterator end);     // 删除迭代器从 start 到 end 之间的元素</li><li>erase(const_iterator pos);     // 删除迭代器指向的元素</li><li>clear();     // 删除容器中所有元素</li></ul></li></ol><blockquote><p>去重 unique</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210323141556378.png" alt="image-20210323141556378"></p><h2 id="输出函数">输出函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.begin(); it != v.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector_reverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.rbegin(); it != v.rend(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="swap">swap</h2><blockquote><p>例子</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322203355924.png" alt="image-20210322203355924"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322203427853.png" alt="image-20210322203427853"></p><blockquote><p>将未使用的空间进行释放</p><p>方法如下</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322203629444.png" alt="image-20210322203629444"></p><p>作用：</p><ul><li><p>vector<int>(vec)：利用拷贝构造初始匿名对象</p></li><li><p>然后匿名创建的占用空间就是使用容量</p><p>然后匿名对象和 vec 互换</p><p>之后匿名对象会自己析构</p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322210912416.png" alt="image-20210322210912416"></p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210322212715920.png" alt="image-20210322212715920"  /><h1>priority_queue<V></h1><h2 id="优先队列，int-默认大的优先">优先队列，int 默认大的优先</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// 4 3 2 1 0</span></span><br></pre></td></tr></table></figure><h2 id="priority-queue-int-小的优先写法">priority_queue<int> 小的优先写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">//  0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h2 id="结构体优先写法">结构体优先写法</h2><blockquote><p>不同于 sort() 函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node x, node y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;<span class="comment">// 这样反而是 大的 优先</span></span><br><span class="line">        <span class="comment">// 小的优先</span></span><br><span class="line">        <span class="comment">// return x.val &gt; y.val;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;node&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        node tmp&#123;&#125;;</span><br><span class="line">        tmp.val = i;</span><br><span class="line">        q.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top().val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// 4 3 2 1 0 </span></span><br></pre></td></tr></table></figure><h2 id="sort-结构体比较写法">sort() 结构体比较写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(v.begin(), v.begin() + k, Cmp);</span><br></pre></td></tr></table></figure><ol><li><p>写在结构体内</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node x, node y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;<span class="comment">// 小到大排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>写在结构体外</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.val &gt; y.val;  <span class="comment">// 大到小排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1>全排列模板</h1><blockquote><p>注意 while (next_permutation(左下标, 右下标))</p><p>排列的区间是 [左下标, 右下标)</p><p>此例子是 [1, 5) 不包括 m[5]</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> n;  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        m[i] = i;</span><br><span class="line">    &#125; <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(m+<span class="number">1</span>, m+<span class="number">5</span>)); <span class="comment">// 左闭右开 [m+1, m+5) 之间的数全排列</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排列总数：&quot;</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line">排列总数：<span class="number">24</span></span><br></pre></td></tr></table></figure><h1>lower_bound( )、upper_bound( )</h1><ol><li>数组从小到大顺序时<ul><li>lower_bound(begin, end, num);// 返回第一个 <strong>大于等于 num</strong> 的地址</li><li>upper_bound(begin, end, num);   // 返回第一个 <strong>大于 num</strong> 的地址</li></ul></li><li>数组从大到小顺序时，重载lower_bound()和upper_bound() 即可找到第一个小于等于 num 的地址<ul><li>lower_bound(begin, end, num, greater<tpye>);    // 返回第一个 <strong>小于等于 num</strong> 的地址</li><li>upper_bound(begin, end, num, greater<type>);     // 返回第一个 <strong>小于 num</strong> 的地</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">5</span>];</span><br><span class="line">    m[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    m[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    m[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">    m[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">    m[<span class="number">4</span>] = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> pos1 = lower_bound(m, m+<span class="number">5</span>, <span class="number">4</span>) - m;</span><br><span class="line">    <span class="keyword">int</span> pos2 = upper_bound(m, m + <span class="number">5</span>, <span class="number">4</span>) - m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos1:&quot;</span> &lt;&lt; pos1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos2:&quot;</span> &lt;&lt; pos2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(m, m + <span class="number">5</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pos3 = lower_bound(m, m+<span class="number">5</span>, <span class="number">4</span>, greater&lt;<span class="keyword">int</span>&gt;()) - m;</span><br><span class="line">    <span class="keyword">int</span> pos4 = upper_bound(m, m + <span class="number">5</span>, <span class="number">4</span>, greater&lt;<span class="keyword">int</span>&gt;()) - m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos3:&quot;</span> &lt;&lt; pos3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos4:&quot;</span> &lt;&lt; pos4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line">pos1:<span class="number">2</span></span><br><span class="line">pos2:<span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> </span><br><span class="line">pos3:<span class="number">2</span></span><br><span class="line">pos4:<span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data struct two</title>
      <link href="2021/03/17/data%20struct%20two/"/>
      <url>2021/03/17/data%20struct%20two/</url>
      
        <content type="html"><![CDATA[<hr><h1>前缀树</h1><h3 id="code">code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Trees.TrieTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/3 - 21:09</span></span><br><span class="line"><span class="comment"> * @ Description: Trees.PrefixTree</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">trieTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀树节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pass;   <span class="comment">// 记录进过了几次</span></span><br><span class="line">        <span class="keyword">int</span> end;    <span class="comment">// 记录以当前节点为尾的字符串</span></span><br><span class="line">        TrieNode[] nexts;   <span class="comment">// 记录 &#x27;a&#x27;-&#x27;z&#x27; 的路径</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            nexts = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀树实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> root.pass;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入一段字符串</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            node.pass++;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;  <span class="comment">// 记录字母</span></span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// a 对应 0, b 对应 1.....</span></span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;    <span class="comment">// 如果未出现过该字母,则创建</span></span><br><span class="line">                    node.nexts[index] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">                node.pass++;</span><br><span class="line">            &#125;</span><br><span class="line">            node.end++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除一段字符</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (search(word) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            node.pass--;</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (--node.nexts[index].pass == <span class="number">0</span>) &#123;</span><br><span class="line">                    node.nexts[index] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            node.end--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询字符在树中出现的次数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="comment">// 如果未在树中存在该路径则直接返回 0</span></span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有加入的字符串中，计算有多少个是以 pre 为前缀的</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">prefixNumber</span><span class="params">(String pre)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pre == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            <span class="keyword">char</span>[] chars = pre.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.pass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">        String string0 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String string1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String string2 = <span class="string">&quot;acdefg&quot;</span>;</span><br><span class="line">        String string3 = <span class="string">&quot;minghuifan&quot;</span>;</span><br><span class="line"></span><br><span class="line">        trie.insert(string0);</span><br><span class="line">        trie.insert(string1);</span><br><span class="line">        trie.insert(string2);</span><br><span class="line">        trie.insert(string3);</span><br><span class="line"></span><br><span class="line">        trie.delete(string1);</span><br><span class="line"></span><br><span class="line">        System.out.println(trie.size());</span><br><span class="line">        System.out.println(trie.search(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>Hash</h1><blockquote><p>out f(in)</p></blockquote><ol><li><p>in -&gt; 无穷</p><p>out -&gt; S（一个范围）</p><ul><li><p>MD5：0 ~ 2^64-1</p><p>十六进制为16位的字符串，即每个位表示16中状态(0000~1111 or 0~F)</p></li><li><p>SHA1：0 ~ 2^128-1</p><p>十六进制为32位的字符串</p></li></ul></li><li><p>相同的in -&gt; 相同的out</p><p>说明哈希函数不随机</p></li><li><p>不同的输入 -&gt; 相同的输出（哈希碰撞）</p></li><li><p>输入得到的哈希值都均匀且离散的分布在 S 域上</p></li><li><p>取模</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210317193725509.png" alt="image-20210317193725509"></p></li></ol><h2 id="EX1">EX1</h2><p>有40亿个无符号整数的文件，无符号整数范围是(0 ~ 2^32^-1)，给 1G 内存返回出现次数最多的整数</p><blockquote><p>2^32^ = 4,294,967,296 约为 43 亿</p></blockquote><hr><h1>布隆过滤器</h1><blockquote><p>先引入位图</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chapter_9;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/18 - 18:52</span></span><br><span class="line"><span class="comment"> * @ Description: Chapter_9</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitArr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入数组中一共有 N 个数，每个数占 4 字节</span></span><br><span class="line">    <span class="comment">// 共有 4N Byte = 4N*8 bit</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改变第 index 位的 0 1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitarr</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numIndex = index / <span class="number">32</span>;  <span class="comment">// 定位到数组的哪一位</span></span><br><span class="line">        <span class="keyword">int</span> bitIndex = index % <span class="number">32</span>;  <span class="comment">// 定位在该数的第多少位</span></span><br><span class="line">        <span class="keyword">int</span> bit = (arr[numIndex] &gt;&gt; bitIndex) &amp; <span class="number">1</span>;  <span class="comment">// 拿到第 index 位的状态</span></span><br><span class="line">        arr[numIndex] = arr[numIndex] | (<span class="number">1</span> &lt;&lt; bitIndex);    <span class="comment">// 将 index 位的数修改为 1</span></span><br><span class="line"><span class="comment">//        arr[numIndex] = arr[numIndex] &amp; (~(1 &lt;&lt; bitIndex));   // 将 index 位的数修改为 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 总结：取得第 i 位的 0/1 状态 int bit = (arr[i / 32] &gt;&gt; (i % 32)) &amp; 1</span></span><br><span class="line">        <span class="keyword">return</span> bit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印二进制数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">192</span>; i++) &#123;</span><br><span class="line">            System.out.print(bitarr(arr, i));</span><br><span class="line">            <span class="keyword">if</span> (sum++ % <span class="number">32</span> == <span class="number">31</span>) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一位一位的改变, 下面写法省略了前面 28 个0</span></span><br><span class="line">    <span class="comment">// 1 0001   0~31</span></span><br><span class="line">    <span class="comment">// 2 0010   32~63</span></span><br><span class="line">    <span class="comment">// 3 0011   64~95</span></span><br><span class="line">    <span class="comment">// 4 0100   96~127</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        bitarr(arr, <span class="number">1</span>);</span><br><span class="line">        bitarr(arr, <span class="number">32</span>);</span><br><span class="line">        bitarr(arr, <span class="number">66</span>);</span><br><span class="line">        bitarr(arr, <span class="number">96</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** out</span></span><br><span class="line"><span class="comment"> * 10000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 01000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 11000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 00100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 10100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 01100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 3_3_7_5_</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>题目：</p><p>不安全网页的黑名单包含 <strong>100亿</strong> 个黑名单网页，每个网页的 URL 最多占用 64B。现在想要实现一个网页过滤系统，利用该系统可以根据网页的 URL 判断该网页是否在黑名单上，请设计该系统。</p><p>要求：</p><ol><li>该系统允许有万分之一以下的判断失误率</li><li>使用的额外空间不要超过 <strong>30G</strong></li></ol></blockquote><p>这个问题可以使我们认识布隆过滤器器</p><blockquote><p>分析：</p><p>如果我们使用 HashSet 来保存每一个 URL，一个 URL 就是 64B，100亿个就是 6400亿B 约为 640G，显然超出要求的额外空间</p><p>通过把 URL 保存起来显然是不行的，无法达到题目要求的 30G 以下额外空间</p><p>那么就要用到布隆过滤器</p></blockquote><h2 id="通过例子了解实现">通过例子了解实现</h2><ol><li><p>上诉我们已经了解了 位图，那么如果我们用位图中的每一个位置来保存一个 URL 需要的内存约为 640/8G 80G，还超过了 30G</p><p>但是我们不需要URL个位置，因此还可以将位图进一步缩小至 30G</p></li><li><p>如何用位图来保存 URL？</p><ul><li>每个 URL 通过 k 个哈希函数计算得到一个哈希值然后在模上m（m为位图数位数），当然也可能出现哈希值相同的情况</li><li>然后此时每个哈希值对应位图中的每一位，进行描黑（也就是变为1）</li><li>然后对每一个 URL 重复上两个操作</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210318211247986.png" alt="image-20210318211247986"></p></li><li><p>然后每个 URL 都通过多个哈希值找到了对应的位置进行描黑处理了</p></li><li><p>然后查找方式如下，比如查找 URLx 是否在黑名单上</p><ul><li>URLx 通过那 k 个哈希函数然后模上m，得到了 k 个位置</li><li>然后看这 k 个位置在位图中是否<strong>全是黑</strong>的状态（即为1状态）</li></ul><blockquote><p>黑URL -&gt; 白   不存在</p><p>白URL -&gt; 黑   存在</p><p>为什么黑URL不可能报错成白URL：因为同一个 URL 通过相同的哈希函数得到的哈希值是一样的，那么肯定会描黑这些位置的，那么查找的时候这些位置必全为黑</p><p>白URL误报成黑URL：如果白URL计算出来的 K个 哈希值刚好是全黑，也就是说当 位图数m 较小、URL数量多且k较多时候可能位图中的每一个位置都描黑了。</p><p>那么我们就要降低白报成黑的概率，尽可能减少误报。</p></blockquote></li><li><p>那么如何确定 <strong>①k ②m ③url个数</strong></p><p>先确定 <strong>m</strong> 然后根据<strong>样本量</strong>和预期失误率来确定 <strong>k</strong></p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210318222956023.png" alt="image-20210318222956023" style="zoom:80%;" /><blockquote><p>n 样本量</p><p>p 预期失误率</p><p>只需要这两个参数，与单样本大小无关（比如这道题中的一个URL 64B 这个条件无用）</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210405122603425.png" alt="image-20210405122603425"></p><blockquote><p>比如这道题中</p><p>n = 100亿</p><p>p = 0.01%</p><p>m = 19.19n = 20n = 2000亿bit = 25G</p><p>k = 14</p><p>最后计算出真实失误率 p(真) = 0.006%</p></blockquote></li></ol><hr><h1>一致性哈希原理</h1><hr><h1>并查集</h1><blockquote><p>通用写法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> UnionFind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/19 - 12:17</span></span><br><span class="line"><span class="comment"> * @ Description: UnionFind</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindUniversal</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将 V 类型数据包装成集合形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        V value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Element</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并查集</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        HashMap&lt;V, Element&lt;V&gt;&gt; elementHashMap;</span><br><span class="line">        HashMap&lt;Element&lt;V&gt;, Element&lt;V&gt;&gt; fatherMap;</span><br><span class="line">        HashMap&lt;Element&lt;V&gt;, Integer&gt; sizeMap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历元素，将每个元素都包装成一个集合</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(List&lt;V&gt; list)</span> </span>&#123;</span><br><span class="line">            elementHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            fatherMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            sizeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (V value : list) &#123;</span><br><span class="line">                Element&lt;V&gt; element = <span class="keyword">new</span> Element&lt;&gt;(value);</span><br><span class="line">                elementHashMap.put(value, element);</span><br><span class="line">                fatherMap.put(element, element);</span><br><span class="line">                sizeMap.put(element, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给一个元素寻找这个元素所在集合的代表元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Element&lt;V&gt; <span class="title">findHead</span><span class="params">(Element&lt;V&gt; element)</span> </span>&#123;</span><br><span class="line">            Stack&lt;Element&lt;V&gt;&gt; path = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 用于存放元素</span></span><br><span class="line">            <span class="keyword">while</span> (element != fatherMap.get(element)) &#123; <span class="comment">// 如果该元素不属于</span></span><br><span class="line">                path.push(element); <span class="comment">// 如果不是代表元素入栈</span></span><br><span class="line">                element = fatherMap.get(element);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!path.empty()) &#123;</span><br><span class="line">                fatherMap.put(path.pop(), element);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 判断ab是否在集合中</span></span><br><span class="line">            <span class="keyword">if</span> (elementHashMap.containsKey(a) &amp;&amp; elementHashMap.containsKey(b)) &#123;</span><br><span class="line">                <span class="keyword">return</span> findHead(elementHashMap.get(a)) == findHead(elementHashMap.get(b));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (elementHashMap.containsKey(a) &amp;&amp; elementHashMap.containsKey(b)) &#123;</span><br><span class="line">                Element&lt;V&gt; aF = findHead(elementHashMap.get(a));</span><br><span class="line">                Element&lt;V&gt; bF = findHead(elementHashMap.get(b));</span><br><span class="line">                <span class="comment">// 判断两个元素是否在同一集合</span></span><br><span class="line">                <span class="keyword">if</span> (aF != bF) &#123;</span><br><span class="line">                    Element&lt;V&gt; maxSet = sizeMap.get(aF) &gt; sizeMap.get(bF) ? aF : bF;</span><br><span class="line">                    Element&lt;V&gt; minSet = maxSet == aF ? bF : aF;</span><br><span class="line">                    fatherMap.put(minSet, maxSet);  <span class="comment">// 将小集合的父亲变为大集合，实现合并操作</span></span><br><span class="line">                    sizeMap.put(maxSet, sizeMap.get(maxSet) + sizeMap.get(minSet));</span><br><span class="line">                    sizeMap.remove(minSet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        UnionFindSet&lt;Integer&gt; u1 = <span class="keyword">new</span> UnionFindSet&lt;&gt;(list);</span><br><span class="line">        u1.union(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        u1.union(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Out</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>findHead 函数调用的次数越多 平均时间复杂度越接近 O(1)</p></blockquote><hr><h1>KMP</h1><blockquote><p>先看下暴力方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(String text, String pattern)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tlen = text.length();</span><br><span class="line">    <span class="keyword">int</span> plen = pattern.length();</span><br><span class="line">    <span class="keyword">int</span> ti = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 但凡有一个下标越界都退出</span></span><br><span class="line">    <span class="keyword">while</span> (pi &lt; plen &amp;&amp; ti &lt; tlen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.charAt(ti) == pattern.charAt(pi)) &#123;</span><br><span class="line">            ti++;</span><br><span class="line">            pi++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ti -= pi - <span class="number">1</span>;   <span class="comment">// 退回到下一个位置</span></span><br><span class="line">            pi = <span class="number">0</span>;         <span class="comment">// 匹配串回到 0 位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是匹配串越界了一定是匹配成功</span></span><br><span class="line">    <span class="keyword">return</span> pi == plen ? ti - pi : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力解法就不多说了，文本串一个一个位置滑动</p><blockquote><p>KMP解法为什么快</p><p>其实是在暴力解法中文本串中一个一个位置滑动的基础上进行了加速，可以实现跳跃的滑动</p></blockquote><blockquote><p>先看一个概念</p><p>==<strong>某一位置前缀和后缀最大匹配长度</strong>==</p><p>​即该位置前的前缀和后缀最大匹配长度，但长度并不包括该位置前面的全部</p><p>​如 <strong>ababc</strong></p><p>​c 位置的前缀后缀最大匹配长度为 2 (前缀：ab、后缀：ab)</p><p>​而不是 4（前缀：abab、后缀：abab）,不包括该位置前面全部字符串</p><p>​如果包括的话那么每个字符位置的前缀后缀的最大匹配长度就是前面的长度</p></blockquote><p>例子</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321224649111.png" alt="image-20210321224649111" style="zoom:80%;" /><ul><li>位置 0 前面没有信息 —— 0</li><li>位置 1 —— 0</li><li>位置 2 —— 0</li><li>位置 3 —— 0</li><li>位置 4 —— 1 （前缀：a、后缀：a）</li><li>位置 5 —— 2 （前缀：ab、后缀：ab）</li><li>位置 6 —— 3 （前缀：abc、后缀：abc）</li></ul><blockquote><p>然后引入 next 数组</p><p>其实就是上面说的 前缀和后缀的最大匹配长度</p></blockquote><p>例子：求法看上面</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321230656826.png" alt="image-20210321230656826"></p><blockquote><p>然后看 KMP 是如何加速的</p></blockquote><ol><li><p>绿色的为最大前缀和后缀标识，表示 Y 位置前缀后缀的最大匹配长度为 4</p><p>当匹配到 XY 位置发现不匹配<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321232427259.png" alt="image-20210321232427259"></p><ul><li><p>按照暴力匹配的话文本串跳到 i + 1 位置，模式串跳到 0 位置，然后开始新的一轮比较<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321232355173.png" alt="image-20210321232355173"></p></li><li><p>如果是KMP的话，那么直接滑动到如图位置，然后从 X 位置和 j 位置开始比较即可（本质就是 从 i + 5 的位置和 0 位置开始比较）</p><p>但是由于后缀和前缀相等，所以 <strong>i + 5 —— X</strong> 的位置和 <strong>0 —— j</strong> 的位置必然匹配，所以直接从 <strong>X 和 j</strong> 位置开始比对<br>所以就加速了整个比对的过程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210321233101322.png" alt="image-20210321233101322"></p></li><li><p>如果 X 和 j 又不匹配呢<br>如果 next[j] = 3</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210326165602600.png" alt="image-20210326165602600" style="zoom:80%;" /></li><li><p>如果 X 和 j-1 又不匹配呢</p><p>重复上述过程</p><p>最坏的结果就是滑动到 0 和 X 比较</p></li></ul><blockquote><p>这里有个问题需要证明：为什么文本串的 <strong>i~K</strong> 的任何位置都配不出模式串</p><p>假设 <strong>i~K</strong> 中有位置 <strong>M</strong> 可以匹配出模式串</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210326170416982.png" alt="image-20210326170416982"  /><p>则 M~(X-1) 必然与 0~(j+2) 完全匹配 则下图椭圆区域必然完成一致</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210326215627490.png" alt="image-20210326215627490" style="zoom:80%;" /><p>那么看 next[Y] 是不是就有问题了，next[Y] 本来是 4 但是你又找到了一个比 4 更长的前缀后缀匹配</p><p>矛盾，因为 原next[Y] 不可能计算出错。</p><p>所以 <strong>i~K</strong> 位置不可能与匹配串匹配成功。</p></blockquote></li></ol><h2 id="code-2">code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> String;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/20 - 15:18</span></span><br><span class="line"><span class="comment"> * @ Description: String</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    KMP</span></span><br><span class="line"><span class="comment">    O(N)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndexOf</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text.length() &lt; pattern.length() || text.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] str1 = text.toCharArray();   <span class="comment">// 文本串</span></span><br><span class="line">        <span class="keyword">char</span>[] str2 = pattern.toCharArray();    <span class="comment">// 匹配串</span></span><br><span class="line">        <span class="keyword">int</span>[] next = getNextArray(str2);    <span class="comment">// next 数组</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i1 &lt; str1.length &amp;&amp; i2 &lt; str2.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[i1] == str2[i2]) &#123; <span class="comment">// 如果字符相等两者同时移动到下一个字符</span></span><br><span class="line">                i1++;</span><br><span class="line">                i2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next[i2] == -<span class="number">1</span>) &#123;    <span class="comment">// str2 中比对的位置已经无法往前跳了</span></span><br><span class="line">                i1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i2 = next[i2];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只要是 i2 越界了，那么一定匹配成功</span></span><br><span class="line">        <span class="comment">// 但是 i1 越界不一定匹配失败，因为 i1 i2 可能同时越界</span></span><br><span class="line">        <span class="keyword">return</span> i2 == str2.length ? i1 - i2 : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    next 数组</span></span><br><span class="line"><span class="comment">    O(M)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNextArray(<span class="keyword">char</span>[] str2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str2.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[str2.length];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> cn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; next.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str2[i - <span class="number">1</span>] == str2[cn]) &#123;</span><br><span class="line">                next[i++] = ++cn;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn &gt; <span class="number">0</span>) &#123;   <span class="comment">// cn 位置和 i - 1 不匹配，继续向前找</span></span><br><span class="line">                cn = next[cn];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next[i++] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data struct one</title>
      <link href="2021/03/08/data%20struct%20one/"/>
      <url>2021/03/08/data%20struct%20one/</url>
      
        <content type="html"><![CDATA[<hr><h1>快排</h1><blockquote><p>补充：<strong>荷兰国旗问题</strong></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/lh8vMWGk1rK4a5w.png" alt="image-20210309142159296"></p><blockquote><p>分析</p></blockquote><blockquote><p>问题一：</p></blockquote><ol><li><p>用一个变量 left 标记 &lt;= num 的右边界</p></li><li><p>此时遍历数组 arr 会出现两种情况</p><ul><li><p><strong>arr[i] &lt;= num</strong>：</p><p>arr[i] 和小于等于部分右边界下标的后一个数交换，然后 <strong>小于等于区域右扩，i++</strong></p></li><li><p><strong>arr[i] &gt; num</strong>：<strong>区域不变, i++</strong></p></li></ul></li><li><p>直到越界，如下图例子</p></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/i2LAlygNdtOhFfo.png" alt="image-20210309153016991"></p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/pW8oNVivCxd7TDX.png" alt="image-20210309154030699" style="zoom:80%;" /><blockquote><p>问题二：和问题一类似</p></blockquote><ol><li>arr[i] &lt; num，arr[i] 和 &lt; 区域下一个交换，<strong>&lt; 区域右阔，i++</strong></li><li>arr[i] = num，<strong>i++</strong></li><li>arr[i] &gt; num，arr[i] 和 &gt; 区域前一个交换，<strong>&gt; 区域左扩，i++</strong></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/Pxviqz3pXRC9eTU.png" alt="image-20210309155223731"></p><hr><h1>归并排序</h1><blockquote><p>时间复杂度：O(N*logN)</p><p>空间复杂度：O(N)</p></blockquote><h2 id="Code">Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/8 - 15:05</span></span><br><span class="line"><span class="comment"> * @ Description: Sort</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间复杂度分析</span></span><br><span class="line"><span class="comment"> *  T(N) = a * T(N/b) + O(N^d)</span></span><br><span class="line"><span class="comment"> *  T(N) = 2 * T(N/2) + O(N)</span></span><br><span class="line"><span class="comment"> *  log(a,b) == d   -&gt;  O(N) = O(N*logN)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(N)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意 R 是数组最后一个下标，不是下标加一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = L + ((R - L) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        process(arr, L, mid);   <span class="comment">// 左边排序</span></span><br><span class="line">        process(arr, mid + <span class="number">1</span>, R);   <span class="comment">// 右边排序</span></span><br><span class="line">        merge(arr, L, mid, R);  <span class="comment">// 整合</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这里 R 是数组最后一个下标，不是下标加一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> M, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = L;</span><br><span class="line">        <span class="keyword">int</span> right = M + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= M &amp;&amp; right &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[left] &lt;= arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= M) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[L + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">new</span> Random().nextInt(<span class="number">51</span>) + <span class="number">50</span>]; <span class="comment">// 数组大小区间 [50, 100]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>) + <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr.length);</span><br><span class="line">        process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展">拓展</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210308172742987.png" alt="image-20210308172742987"></p><h3 id="小和问题-code">小和问题-code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort.Merge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools.Asserts;</span><br><span class="line"><span class="keyword">import</span> tools.Times;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/8 - 18:16</span></span><br><span class="line"><span class="comment"> * @ Description: Sort.Merge</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小和问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallSum</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 小和问题求解函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">smallSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归过程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> left = mergeSort(arr, l, mid);  <span class="comment">// 左边小和</span></span><br><span class="line">        <span class="keyword">int</span> right = mergeSort(arr, mid + <span class="number">1</span>, r); <span class="comment">// 右边小和</span></span><br><span class="line">        <span class="keyword">int</span> sum = merge(arr, l, mid, r);    <span class="comment">// 左右合并求小和</span></span><br><span class="line">        <span class="keyword">return</span> left + right + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左右两边排序并返回此次左右两边的小和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>];    <span class="comment">// 辅助数组</span></span><br><span class="line">        <span class="keyword">int</span> left = l;</span><br><span class="line">        <span class="keyword">int</span> right = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果左边不越界并且右边不越界</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m &amp;&amp; right &lt;= r) &#123;</span><br><span class="line">            res += arr[left] &lt; arr[right] ? arr[left] * (r - right + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">            help[i++] = arr[left] &lt; arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面两个 while 循环只会进入其一</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= r) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[l + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力求解小和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                    res += arr[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> testSum = <span class="number">100000</span>;   <span class="comment">// 测试的次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Times测试时间工具</span></span><br><span class="line">        Times.test(<span class="string">&quot;小和计算&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> test = <span class="number">0</span>; test &lt; testSum; test++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">100</span>;  <span class="comment">// 数组的大小</span></span><br><span class="line">                <span class="keyword">int</span>[] arr0 = <span class="keyword">new</span> <span class="keyword">int</span>[sum];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr0.length; i++) &#123;</span><br><span class="line">                    arr0[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span>[] arr1 = Arrays.copyOf(arr0, arr0.length);</span><br><span class="line">                Asserts.test(force(arr0) == smallSum(arr1));</span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr1));</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;递归求小和：&quot; + smallSum(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;暴力求小和：&quot; + force(arr1));</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序对数量-code">逆序对数量-code</h3><blockquote><p>和上面求小和问题是差不多的，这是下面的微小区别</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/2sKCDQa5nhqUbSX.png" alt="image-20210309134627796" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort.Merge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools.Asserts;</span><br><span class="line"><span class="keyword">import</span> tools.Times;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/9 - 12:30</span></span><br><span class="line"><span class="comment"> * @ Description: Sort.Merge</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序对数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> L = mergeSort(arr, l, mid);</span><br><span class="line">        <span class="keyword">int</span> R = mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">int</span> sum = merge(arr, l, mid, r);</span><br><span class="line">        <span class="keyword">return</span> L + R + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = l;</span><br><span class="line">        <span class="keyword">int</span> right = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m &amp;&amp; right &lt;= r) &#123;</span><br><span class="line">            ans += arr[left] &gt; arr[right] ? r - right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 大-&gt;小排序 并且 相等要先移右边</span></span><br><span class="line">            help[i++] = arr[left] &gt; arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把未排好的排好</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= r) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[l + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力求解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> testSum = <span class="number">10000000</span>;</span><br><span class="line">        Times.test(<span class="string">&quot;逆序数&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> test = <span class="number">0</span>; test &lt; testSum; test++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">int</span>[] arr0 = <span class="keyword">new</span> <span class="keyword">int</span>[sum];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">                    arr0[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">51</span>) + <span class="number">50</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span>[] arr1 = Arrays.copyOf(arr0, arr0.length);</span><br><span class="line">                Asserts.test(reverse(arr0) == force(arr1));</span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr1));</span></span><br><span class="line"><span class="comment">//                System.out.print(force(arr0) + &quot;_&quot; + reverse(arr1) + &#x27;\n&#x27;);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_notes</title>
      <link href="2021/03/04/Linux-notes/"/>
      <url>2021/03/04/Linux-notes/</url>
      
        <content type="html"><![CDATA[<hr><h1>有趣</h1><ol><li><p>火车路过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install sl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sl</span></span><br></pre></td></tr></table></figure></li><li><p>动物图案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install cowsay</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cowsay</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cowsay -f tux <span class="string">&quot;这是Linux&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>2048游戏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://raw.githubusercontent.com/mevdschee/2048.c/master/2048.c</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> gcc编译即可</span></span><br></pre></td></tr></table></figure></li><li><p>贪吃蛇变式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh sshtron.zachlatta.com</span></span><br></pre></td></tr></table></figure></li><li><p>文字显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install figlet<span class="variable">$sudo</span> apt-get install toilet</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> figlet 文字</span></span><br></pre></td></tr></table></figure></li><li><p>宠物猫</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install oneko</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> oneko</span></span><br></pre></td></tr></table></figure></li><li><p>在屏幕上出现一双眼睛，盯着你的鼠标指针</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install xeyes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xeyes</span></span><br></pre></td></tr></table></figure></li><li><p>不断输出文字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yes Helloween <span class="comment"># 这样就会不断输出&quot;Helloween&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>factor 分解因数</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210612163119.png" alt="image-20210612163112536"></p></li><li><p>幽灵打字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install pv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> | pv -qL 10</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>韩顺平教育</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304215343.png" alt="image-20210304215341910"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304220107.png" alt="image-20210304220106965"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304220132.png" alt="image-20210304220132272"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304220440.png" alt="image-20210304220440770"></p><ul><li><p>Linux运维工程师：服务器规划、调试优化、市场键控、故障处理、数据备份恢复、日志分析…</p></li><li><p>Linux嵌入式工程师：linux下驱动开发、嵌入式系统程序开发（C/C++）</p></li><li><p>Linux应用领域：</p><ul><li>服务器：C/C++、pup、java、python、go</li><li>嵌入式：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、物联网…</li></ul></li></ul><h1>基础篇</h1><p>Linux主要发行版：Ubuntu、Redhat、CentOS、Debain(蝶变)、Fedora、SuSE、OpenSUSE(示意图)</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304224741.png" alt="image-20210304224741723"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304230914.png" alt="image-20210304230914566"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210304231439.png" alt="image-20210304231438980"></p><h2 id="VM及安装-CentOS">VM及安装 CentOS</h2><blockquote><p>几个注意点</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105738.png" alt="image-20210305105738436"></p><p>选择安装位置：分三个区：boot、swap、根分区</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305104544.png" alt="image-20210305104544675"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305104808.png" alt="image-20210305104808328"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105330.png" alt="image-20210305105330925"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105346.png" alt="image-20210305105346170"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305105304.png" alt="image-20210305105304329"></p><h3 id="网络的三种模式">网络的三种模式</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305115323.png" alt="image-20210305115323751"></p><h3 id="虚拟机克隆">虚拟机克隆</h3><ol><li><p>直接将装好的系统文件夹拷贝即可，然后VM中打开这个文件即可</p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305120039.png" alt="image-20210305120039055" style="zoom: 67%;" /></li><li><p>用VM的克隆：克隆时候需要把需要克隆的系统关闭</p><p>其实就是拷贝，克隆的文件可以直接在其他电脑上使用</p></li></ol><h3 id="虚拟机快照">虚拟机快照</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305121414.png" alt="image-20210305121414682"></p><h3 id="虚拟机迁移和删除">虚拟机迁移和删除</h3><ol><li>迁移：直接剪切</li><li>删除：VM删除、直接删除文件</li></ol><h3 id="install-vmtools">install vmtools</h3><p>Root用户下安装</p><p>用于管理母机和本机的共享文件夹</p><p><strong>但是在实际开发中，文件的上传和下载是要使用远程方式完成的</strong></p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305122824.png" alt="image-20210305122824870" style="zoom: 67%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305122904.png" alt="image-20210305122904629"></p><ul><li><p>然后终端进去 opt 目录解压这个文件</p></li><li><p>解压</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305124016.png" alt="image-20210305124016565"></p></li><li><p>安装：一路回车</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305124336.png" alt="image-20210305124336736"></p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305124745.png" alt="image-20210305124745341"></p><h2 id="Linux目录结构">Linux目录结构</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305130642.png" alt="image-20210305130642545"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305131545.png" alt="image-20210305131544873"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305130751.png" alt="image-20210305130751013"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305131309.png" alt="image-20210305131308926"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305131740.png" alt="image-20210305131739967"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305134101.png" alt="image-20210305134050861"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305134118.png" alt="image-20210305134118352"></p><hr><h1>实操篇</h1><h2 id="远程登录Linux">远程登录Linux</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305141710.png" alt="image-20210305141709946"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305141915.png" alt="image-20210305141915359"></p><h3 id="XShell">XShell</h3><blockquote><p>下载安装后查看 Linux 的 ip</p><p>然后 XShell 链接</p></blockquote><ul><li><p>新建</p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305145719.png" alt="image-20210305145719046" style="zoom:67%;" /></li><li><p>这里填写 Linux 系统的用户名或者Root</p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305144045.png" alt="image-20210305144044969"></p><ul><li><p>填写对应用户的密码</p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305150019.png" alt="image-20210305150019458" style="zoom: 67%;" /></li></ul><h3 id="XFTP">XFTP</h3><ul><li><p>新建</p>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305151629.png" alt="image-20210305151629821" style="zoom: 80%;" /></li><li><p>同样用户名和密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305151704.png" alt="image-20210305151704267"></p></li></ul><h2 id="Vim">Vim</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305160146.png" alt="image-20210305160145888"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305160524.png" alt="image-20210305160524700"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305162930.png" alt="image-20210305162930087"></p><h2 id="关机重启命令">关机重启命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now// 立刻关机</span><br><span class="line">shutdown -h 1// 一分钟后关机</span><br><span class="line">shutdown // 和上面一行默认是1分钟关机</span><br><span class="line">halt // 关机</span><br><span class="line">reboot// 重启</span><br><span class="line">sync// 将内存数据同步到磁盘中</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305164021.png" alt="image-20210305164021233"></p><h2 id="用户登录和注销">用户登录和注销</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305164704.png" alt="image-20210305164704721"></p><h2 id="用户管理">用户管理</h2><blockquote><p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305224157.png" alt="image-20210305224156958"></p><h3 id="创建用户">创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd用户名// 添加用户</span><br></pre></td></tr></table></figure><p>这样会自动创建一个和用户名同名的家目录，存放在</p><p><strong>/home/用户名</strong></p><blockquote><p>如果想指定家目录的位置则如下例子</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/test 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示用户名的家目录存在放在 /home/<span class="built_in">test</span>/ 下</span></span><br></pre></td></tr></table></figure><h3 id="设置用户密码">设置用户密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p>注意：如果不写用户名是在当前登录账户更改密码，也就是当前的 root 账户</p><blockquote><p>pwd// 显示当前绝对路径</p></blockquote><h3 id="删除用户：两种">删除用户：两种</h3><ol><li><p>删除用户，但是保留该用户的家目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名</span><br></pre></td></tr></table></figure></li><li><p>删除用户以及家目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure></li></ol><h3 id="查询用户信息">查询用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><h3 id="切换用户">切换用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - 用户名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305214029.png" alt="image-20210305214028575"></p><h3 id="查看当前登录用户信息">查看当前登录用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">who am i</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305214816.png" alt="image-20210305214816288"></p><p>即使切换了用户，查看也是显示最先登录的用户信息</p><h3 id="用户组">用户组</h3><blockquote><p>系统可以对有共性/权限的多个用户进行统一的管理</p></blockquote><ol><li><p>新增组：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure></li><li><p>删除组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure></li><li><p>增加用户的时候直接加上组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -g 用户组 用户名</span><br><span class="line">如新增一个用户 zwj 并制定到 wudang 组里面去</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure></li><li><p>修改用户的组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 要放入的组 用户名</span><br><span class="line">如将 wudang组的 zwj 修改到 mojiao组里面去</span><br><span class="line">step1: groupadd mojiao</span><br><span class="line">step2: usermod -g mojiao zwj</span><br></pre></td></tr></table></figure></li></ol><h3 id="用户和组相关文件">用户和组相关文件</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305221428.png" alt="image-20210305221428757"></p><ol><li><p>passwd文件：</p><p>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305222840.png" alt="image-20210305222840801"></p><p>Shell解释：</p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305224803.png" alt="image-20210305224803109" style="zoom: 50%;" /></li><li><p>shadow文件：</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305223408.png" alt="image-20210305223408094"></p><p>给 king 设置密码在打开看下：此时有了加密口令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305223540.png" alt="image-20210305223540346"></p></li><li><p>group文件</p><p>创建用户的时候如果没有之指定组的情况下，会创建一个和用户名相同的组</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210305223857.png" alt="image-20210305223857100"></p></li></ol><blockquote><p>1.如果组里面由用户则不能删除该组</p></blockquote><h2 id="实用指令">实用指令</h2><h3 id="运行级别">运行级别</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306111601.png" alt="image-20210306111601488"></p><blockquote><p>EX：从运行级别 5 到 3（无图形界面）</p><p>远程登录也可以切换运行级别</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306111747.png" alt="image-20210306111747183"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306111807.png" alt="image-20210306111807496"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306112725.png" alt="image-20210306112725437"></p><p>即：</p><ul><li><p>查看运行级别：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306113318.png" alt="image-20210306113318875"></p></li><li><p>改变运行级别</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default 运行级别</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306113623.png" alt="image-20210306113623337"></p></li></ul><blockquote><p>重启之后</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306113749.png" alt="image-20210306113749455"></p><blockquote><p>接下来的每次重启都是进去 <strong>运行级别3</strong></p></blockquote><blockquote><p>注：如果切到无图形化界面（运行级别3）登入不进去root，别使用数字小键盘输入密码（没解锁）</p></blockquote><h3 id="找回-Root-密码">找回 Root 密码</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306114720.png" alt="image-20210306114720030"></p><ol><li><p>在启动界面按 “e”</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115133.png" alt="image-20210306115133787"></p></li><li><p>找到这一行，后面加上</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init=/bin/sh</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115416.png" alt="image-20210306115415954"></p></li><li><p>然后 Ctrl + X 进入 <strong>单用户模式</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115716.png" alt="image-20210306115716957"></p></li><li><p>然后在光标闪烁的位置输入下面命令，然后回车</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306115946.png" alt="image-20210306115946548"></p></li><li><p>然后输入下面命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p>然后回车输入密码，然后回车后在此输入密码即可</p><p>显示 passwd…的样式表示密码修改成功</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306120301.png" alt="image-20210306120301149"></p></li><li><p>然后，在光标闪烁的位置输入下面命令并回车</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /.autorelabel</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306120716.png" alt="image-20210306120716723"></p></li><li><p>接着在光标闪烁的位置输入下面命令并回车，等待系统自动修改密码，时间可能有点长，完成后，<strong>系统会自动重启</strong>，新的密码生效</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec /sbin/init</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306121042.png" alt="image-20210306121042837"></p></li></ol><blockquote><p>远程是无法修改 ROOT 密码的</p></blockquote><h3 id="帮助指令">帮助指令</h3><ol><li><p>man</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306122022.png" alt="image-20210306122022393"></p></li><li><p>help</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306122220.png" alt="image-20210306122220652"></p></li></ol><h3 id="文件目录类">文件目录类</h3><ol><li><p><strong>pwd</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">pwd// 绝对路径</span><br></pre></td></tr></table></figure></li><li><p><strong>ls</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ls// 显示文件</span><br><span class="line">ls -a// 显示文件包括隐藏文件</span><br><span class="line">ls -l// 列表显示</span><br><span class="line">ls -al// 列表显示包括隐藏文件</span><br></pre></td></tr></table></figure></li><li><p><strong>cd</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> 参数</span></span><br><span class="line">cd ~// 回到当前用户的家目录</span><br><span class="line">cd ..// 回到上一级目录</span><br><span class="line">cd /// 回到根目录</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306123636.png" alt="image-20210306123636827"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306123837.png" alt="image-20210306123837454"></p></li><li><p><strong>mkdir</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：mkdir [选项] 要创建的目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个目录</span></span><br><span class="line">mkdir /home/dog// 在home目录下创建dog目录此时要求home目录存在，不存在创建不成功</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建多级目录</span></span><br><span class="line">mkdir -p /homg/animal/tiger // 此时animal不存在也可以创建</span><br></pre></td></tr></table></figure></li><li><p><strong>rmdir</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rmdir</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：rmdir [选项] 要删除的目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一个空目录</span></span><br><span class="line">rmdir /home/dog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一个非空目录</span></span><br><span class="line">rm -rf /home/animal// -r递归删除 -f强制删除不提示</span><br></pre></td></tr></table></figure></li><li><p><strong>touch</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> touch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：touch 文件名称</span></span><br></pre></td></tr></table></figure></li><li><p><strong>cp</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：cp [选项] <span class="built_in">source</span> dest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项：</span></span><br><span class="line">-r 递归复制整个文件夹</span><br><span class="line"> cp 待拷贝文件或目录 目标目录</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306144150.png" alt="image-20210306144150611"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307104508202.png" alt="image-20210307104508202"></p></li><li><p><strong>rm</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：rm [选项] 要删除的文件或目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r : 递归删除整个文件夹</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-f : 强制删除不提示</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306144822.png" alt="image-20210306144822657"></p></li><li><p><strong>mv</strong> 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> - 重命名：mv oldNameFile newNameFile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> - 移动文件：mv 需要移动的文件 新目录</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306150040.png" alt=""></p></li><li><p><strong>cat</strong> 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：cat [选项] 要查看的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项：</span> </span><br><span class="line">-n : 显示行号</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306150602.png" alt="image-20210306150602105"></p></li><li><p><strong>more</strong>指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306150832.png" alt="image-20210306150832346"></p></li><li><p><strong>less</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306151312.png" alt="image-20210306151312166"></p></li><li><p><strong>echo</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306151712.png" alt="image-20210306151712696"></p></li><li><p><strong>head</strong> 指令：默认显示文章前 10 行内容</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306151803.png" alt="image-20210306151803333"></p></li><li><p><strong>tail</strong> 指令（可用于查看日志）：默认显示文章尾部 10 行内容</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306152608.png" alt="image-20210306152608431"></p></li><li><p>输出重定向 &gt; 、追加 &gt;&gt;</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306154519.png" alt="image-20210306154519310" style="zoom:67%;" /></li><li><p><strong>ln</strong> 指令：类似 win 下的快捷方式</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306155745.png" alt="image-20210306155744984" style="zoom:67%;" /></li><li><p><strong>history</strong> 指令</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306160338.png" alt="image-20210306160338094" style="zoom:80%;" /></li></ol><h3 id="时间日期类">时间日期类</h3><ol><li><p><strong>date</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210306161041315.png" alt="image-20210306161041315" style="zoom:80%;" /><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306161315.png" alt="image-20210306161315365"  /></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306161315.png" alt="image-20210306161315365"></p></li><li><p><strong>cal</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210306162743.png" alt="image-20210306162743111"></p></li></ol><h3 id="搜索查找类">搜索查找类</h3><ol><li><strong>find</strong> 指令</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307092050298.png" alt="image-20210307092050298"></p><ol start="2"><li><strong>locate</strong> 指令</li></ol><blockquote><p>先执行updatedb</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307093152625.png" alt="image-20210307093152625"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307093006554.png" alt="image-20210307093006554"></p><ol start="3"><li><strong>which</strong> 指令</li></ol>  <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307093239429.png" alt="image-20210307093239429" style="zoom:80%;" /><ol start="4"><li><p><strong>grep</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307094109097.png" alt="image-20210307094109097"></p></li></ol><h3 id="压缩解压类">压缩解压类</h3><ol><li><strong>gzip、gunzip</strong> 指令：用于解压缩文件</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307095058029.png" alt="image-20210307095058029"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307113211890.png" alt="image-20210307113211890"></p><ol start="2"><li><strong>zip、unzip</strong> 指令：可压缩文件和目录</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 小结</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不指定路径写法,压缩的和解压的文件都保存在当前用户所在的目录</span></span><br><span class="line">zip -r 要压缩的目录</span><br><span class="line">unzip 要解压的xxx.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定路径写法</span></span><br><span class="line">zip -r 指定目录/xxx.zip 要压缩的目录</span><br><span class="line">unzip -d 要解压到的目录 要解压的xxx.zip</span><br></pre></td></tr></table></figure>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果要压缩 /home/TEST 目录下的东西，不包含home</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这样写的话会把home也压缩进去，包含了home</span></span><br><span class="line">zip -r 存放的目录/xxx.zip /home/TEST</span><br><span class="line"><span class="meta">#</span><span class="bash"> 正确做法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先进去到/home目录下，下面这样压缩就不会把home也压进去</span></span><br><span class="line">zip -r 存放的目录/xxx.zip TEST</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307101003499.png" alt="image-20210307101003499"></p><blockquote><p>当一个文件夹里面有文件的时候，压缩的时候要使用 <strong>zip -r xxx.zip 要压缩的文件夹</strong></p><p>不使用 -<strong>r</strong> 就会只是压缩一个目录，里面的东西进不去</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307114913350.png" alt="image-20210307114913350"></p><ol start="3"><li><strong>tar</strong> 指令</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/image-20210307101914850.png" alt="image-20210307101914850"></p><h2 id="组管理和权限管理">组管理和权限管理</h2><h3 id="组">组</h3><ul><li>每一个用户必须属于一个组，不能独立于组外</li><li>每一个文件有三个概念<ul><li>所有者：一般是创建者</li><li>所在组：这个文件属于哪一个组，那么这个组里面的用户就对这个文件拥有一定的权限</li><li>其他组：不包含该文件的组称为其他组，其他组也对该文件有一定的权限</li></ul></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315143039233.png" alt="image-20210315143039233"></p><h3 id="文件-目录-所有者">文件/目录 所有者</h3><ol><li><p>查看文件的所有者</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315144306094.png" alt=""></p></li><li><p>修改文件所有者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315144819594.png" alt="image-20210315144819594"></p></li></ol><h3 id="组的创建">组的创建</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315145114126.png" alt="image-20210315145114126"></p><h3 id="文件-目录-所在组">文件/目录 所在组</h3><blockquote><p>查看文件/目录所在的组：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><blockquote><p>修改文件所在组：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp 组名 文件名</span><br></pre></td></tr></table></figure><blockquote><p>EX：修改文件所在组，目录同理</p></blockquote><ol><li>先创建一个组 <strong>game</strong></li><li>然后使用 <strong>root</strong> 用户创建文件 <strong>SuperMary.txt</strong></li><li>查看这个文件属于哪个组 -&gt; root</li><li>chgrp game SuperMary.txt</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315152901935.png" alt="image-20210315152901935"></p><h3 id="其他组">其他组</h3><p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其它组</p><h3 id="改变用户所在组">改变用户所在组</h3><blockquote><p>查看用户所在组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315153902204.png" alt="image-20210315153902204"></p><blockquote><p>查看组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否有mojiao这个组</span></span><br><span class="line">cat /etc/group | grep mojiao</span><br></pre></td></tr></table></figure><p>没有组则没有输出</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210315153730082.png" alt="image-20210315153730082"></p><blockquote><p>改变用户所在组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 新组名 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变该用户登录的初始目录。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明：用户需要有进入到新目录的权限</span></span><br><span class="line">usermod -d 目录名 用户名</span><br></pre></td></tr></table></figure><h3 id="权限的基本介绍">权限的基本介绍</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line">ls -lah</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210503110943.png" alt="image-20210503110942280"></p><p>一共十位</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 分为四段</span></span><br><span class="line">l    rwx    rwx    rwx</span><br><span class="line">类型  所有者  所属组  其他组用户</span><br></pre></td></tr></table></figure><blockquote><p>各位数表示的意义</p></blockquote><ol><li><p>第 0 位：确定文件类型</p><ul><li><p>l 是链接</p></li><li><p>d 是目录</p></li><li><p>c 是 <strong>字符设备</strong> 文件，如键盘、鼠标</p></li><li><p>b 是块设备，如硬盘</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210503111118.png" alt="image-20210503111116383"></p></li></ul></li><li><p>第 1~3 位确定所有者（该文件的所有者）拥有该文件的权限。—User</p></li><li><p>第 4~6 位确定所属组（同用户组的）拥有该文件的权限。—Group</p></li><li><p>第 7~9 位确定其他用户拥有该文件的权限。—Other</p></li></ol><blockquote><p>各字母表示的意义</p></blockquote><ol><li>r w x 作用到文件<ul><li>[ r ] : 表示可读</li><li>[ w ] : 代表可写，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件的目录有写权限，才能删除该文件</li><li>[ x ] : 代表可执行，可以被执行</li></ul></li><li>r w x 作用到目录<ul><li>[ r ] : 表示可读</li><li>[ w ] : 代表可写，可以修改，对目录内 <strong>创建 + 删除 + 重命名目录</strong></li><li>[ x ] : 代表可执行，可以进入该目录</li></ul></li></ol><h3 id="修改权限">修改权限</h3><ol><li><pre><code class="language-shell">chmod u=rwx,g=rwx,o=x 文件名或目录名chmod u+w 文件名/目录名chmod a-w 文件名/目录名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - u：所有者</span><br><span class="line">   - g：所有组</span><br><span class="line">   - o：其他人</span><br><span class="line">   - a：所有人（u，g，o 的总和）</span><br><span class="line"></span><br><span class="line">2. 通过数字变更权限</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;shell</span><br><span class="line">   chmod 751 文件名&#x2F;目录名</span><br><span class="line">   # 上面一句表示将 所有者权限设置为 rwx，所在组设置为 rx，其他组设置为 x</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r=4 w=2x=1</span><br><span class="line"></span><br><span class="line">000 —— 其实就是二进制</span><br><span class="line">rwx=7</span><br><span class="line">rw =6</span><br><span class="line">r x=5</span><br><span class="line">r  =4</span><br><span class="line"> wx=3</span><br><span class="line"> w =2</span><br><span class="line">  x=1</span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="修改文件-目录所有者">修改文件/目录所有者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chown newowner 文件/目录 #改变所有者</span><br><span class="line">chown newowner:newgroup 文件/目录 #改变所有者和所在组</span><br><span class="line"><span class="meta">#</span><span class="bash"> -R 如果是目录，则使其下所有子文件或目录递归生效</span></span><br><span class="line">chown -R newowner 文件/目录 #递归改变所有者</span><br><span class="line">chown -R newowner:newgroup 文件/目录 #递归改变所有者和所在组</span><br></pre></td></tr></table></figure><h3 id="修改文件-目录所在组">修改文件/目录所在组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp newgroup 文件/目录 #改变所在组 </span><br><span class="line">chgrp -R newgroup 文件/目录 #改变所在组 </span><br></pre></td></tr></table></figure><h2 id="定时任务调度">定时任务调度</h2><h3 id="crontab-任务调度">crontab 任务调度</h3><ol><li>crontab 进行 定时任务的设置介绍</li></ol><ul><li><p>概述</p><ul><li>任务调度：是指系统在某个时间执行的特定的命令或程序</li><li>任务调度分类：<ul><li>系统工作：有些重要的工作必须周而复始的执行，如病毒扫描</li><li>个别用户工作：个别用户希望执行某些特定程序，比如对MySQL数据库的备份</li></ul></li></ul></li><li><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">crontab [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项</span></span><br><span class="line">    -e #编辑crontab定时任务</span><br><span class="line">    -l #查询crontab任务</span><br><span class="line">    -r #删除当前用户所有的crontab任务</span><br><span class="line">service crond restart #重启任务调度</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521160852.png" alt="image-20210521160326375"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521160908.png" alt="image-20210521160732815"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521160820.png" alt="image-20210521160819955"></p><ol start="2"><li><p>使用方法</p><ul><li><p>直接用 <strong>crontab -e</strong> 编辑crontab定时任务,写执行的语句</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521181302.png" alt="image-20210521181302604"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521181358.png" alt="image-20210521181358882"></p></li><li><p>先写 <strong>shell</strong> 脚本，然后在 <strong>crontab -e</strong> 编辑crontab定时任务</p><p>（假如我所在路径是 /home）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim my.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> date &gt;&gt; /home/mycal</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cal &gt;&gt; /home/mycal</span></span><br><span class="line">chmod u+x my.sh</span><br><span class="line">crontab -e</span><br><span class="line"><span class="meta">#</span><span class="bash"> */1 * * * * /home/my.sh</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="at-定时任务">at 定时任务</h3><ol><li><p>概述</p><ul><li><p>at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行</p></li><li><p>默认情况下，atd 进程每 60s 检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业</p></li><li><p>at 命令是一次性定时计划 任务，执行完一个任务后不再执行任务了</p></li><li><p>在使用 at 命令的时候，一定要保证 atd 进程的启动，可以使用相关指令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep atd</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521185438.png" alt="image-20210521185438196"></p></li></ul></li><li><p>at 命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at [选项] [时间]</span><br><span class="line">ctrl + D #结束 at 命令的输入，按两次</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521190624.png" alt="image-20210521190624473"></p></li><li><p>应用</p></li></ol><h2 id="rpm">rpm</h2><ol><li><p>介绍</p><p>rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有 .RPM 拓展名的文件。RPM 是 RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似 Windows 下的 setup.exe。</p></li><li><p>查询指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa #查询所安装的所有 rpm 软件包</span><br><span class="line">rpm -qa | more</span><br><span class="line">rpm -qa | grep X #如 rpm -qa | grep nginx</span><br><span class="line"></span><br><span class="line">rpm -q 软件包名 # 查询软件包是否安装</span><br><span class="line"></span><br><span class="line">rpm -qi 软件包名 # 查询软件包信息</span><br><span class="line">rpm -ql 软件包名 # 查询软件包中的文件</span><br><span class="line"></span><br><span class="line">rpm -qf 文件全路径名 # 查询文件所属的软件包</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -qf /etc/passwd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -qf /root/install.log</span></span><br></pre></td></tr></table></figure></li><li><p>卸载 rpm 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e RPM包的名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -e nginx 表示删除 nginx 软件包</span></span><br><span class="line">rpm -e --nodeps RPM包的名称</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210521201717.png" alt="image-20210521201717609"></p></li><li><p>安装 rpm 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh RPM包全路径名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> i = install 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> v = verbose 提示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> h = <span class="built_in">hash</span>   进度条</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="yum">yum</h2><ol><li><p>介绍</p><p>yum 是一个 shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务期自动下载 RPM 包并且安装，可以自动处理依赖关系，并且一次性安装所有依赖的软件包</p></li><li><p>基本指令</p><p>查询 yum 服务器是否有需要安装的软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep XX软件列表</span><br></pre></td></tr></table></figure><p>安装指定 yum 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install XXX</span><br></pre></td></tr></table></figure></li></ol><h2 id="Linux分区">Linux分区</h2><h3 id="分区">分区</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210526215709.png" alt="image-20210526215709125"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210526215746.png" alt="image-20210526215746424"></p><blockquote><p>这里截取我虚拟机磁盘分区和服务器分区情况</p><p>虚拟机：分了三个区（根分区、boot分区、SWAP分区）</p><p>服务器：默认只有一个根分区</p><p>UUID：分区的唯一标识符（40bit）</p><p>MOUNTPOINT：挂载点</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210526220822.png" alt="image-20210526220822059"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210526220922.png" alt="image-20210526220921937"></p><h3 id="增加一块硬盘">增加一块硬盘</h3><ol><li><p>虚拟机添加硬盘</p><p>​</p></li><li><p>分区</p></li><li><p>格式化</p></li><li><p>挂载</p></li><li><p>设置可以自动挂载</p></li></ol><h3 id="磁盘情况">磁盘情况</h3><ol><li><p>查询整个情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210529154629.png" alt="image-20210529154456683"></p></li><li><p>查询指定目录的磁盘占用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">du -h /目录</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认为当前目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -s 指定目录占用大小汇总</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -h 带计量单位</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a 含文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --max-depth=1 子目录深度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 列出明细的同时，增加汇总值</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="工作实用指令">工作实用指令</h3><ol><li><p>统计 /etc/ 目录下文件个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/ | grep &quot;^-&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接列出来</span></span><br><span class="line">ls -l /etc/ | grep &quot;^-&quot; </span><br></pre></td></tr></table></figure></li><li><p>统计 /etc/ 目录下目录的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/ | grep &quot;^d&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">直接列出来</span></span><br><span class="line">ls -l /etc/ | grep &quot;^d&quot;</span><br></pre></td></tr></table></figure></li><li><p>统计 /etc/ 目录下文件个数，包括子文件夹里的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /etc/ | grep &quot;^-&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接列出来</span></span><br><span class="line">ls -lR /etc/ | grep &quot;^-&quot; </span><br></pre></td></tr></table></figure></li><li><p>统计 /etc/ 目录下目录的个数，包括子文件夹里的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /etc/ | grep &quot;^d&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">直接列出来</span></span><br><span class="line">ls -lR /etc/ | grep &quot;^d&quot;</span><br></pre></td></tr></table></figure></li><li><p>以树状显示目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如没安装，先安装</span></span><br><span class="line">yum install tree</span><br><span class="line">tree /etc/</span><br></pre></td></tr></table></figure></li></ol><h2 id="网络配置">网络配置</h2><h1>定制篇</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二下资料推荐-仅个人推荐</title>
      <link href="2021/02/28/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E8%AE%A1%E7%A7%91/"/>
      <url>2021/02/28/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E8%AE%A1%E7%A7%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>仅仅个人推荐，具体看个人风格喜好</p><p>更新中…</p></blockquote><hr><h1>概率论与数理统计</h1><h4 id="宋浩：链接点我">宋浩：<a href="https://www.bilibili.com/video/BV1ot411y7mU?from=search&amp;seid=2168626853685641685">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213650.png" alt="image-20210228213649383"></p><h4 id="小元老师：链接点我">小元老师：<a href="https://www.bilibili.com/video/BV1jx411j7D2?from=search&amp;seid=8435947249358168956">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213725.png" alt="image-20210228213724547"></p><h4 id="张宇：链接点我">张宇：<a href="https://www.bilibili.com/video/BV1ht4y127Di?from=search&amp;seid=2924702569977120632">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213743.png" alt="image-20210228213742651"></p><h4 id="汤家凤：">汤家凤：</h4><blockquote><p>B站找不到了，百度网盘(/手动滑稽)</p></blockquote><blockquote><p>基础：</p></blockquote><p>​链接：<a href="https://pan.baidu.com/s/16N6dx9X3jiKVyieJ5j8G1g">https://pan.baidu.com/s/16N6dx9X3jiKVyieJ5j8G1g</a><br>​提取码：1502</p><blockquote><p>强化</p></blockquote><p>​链接：<a href="https://pan.baidu.com/s/1iuARPXy7AzHdrVROBg2bjQ">https://pan.baidu.com/s/1iuARPXy7AzHdrVROBg2bjQ</a><br>​提取码：1502</p><h4 id="链接点我"><a href="https://www.bilibili.com/video/BV1D741147G5?from=search&amp;seid=2924702569977120632">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228213610.png" alt="image-20210228213608583"></p><hr><h1>操作系统</h1><h4 id="链接点我-2"><a href="https://www.bilibili.com/video/BV18741137LS?from=search&amp;seid=11596163788937283321">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214110.png" alt="image-20210228214107983"></p><h4 id="链接点我-3"><a href="https://www.bilibili.com/video/BV18y4y1i73U?from=search&amp;seid=8655198875770633733">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214443.png" alt="image-20210228214442389"></p><h4 id="链接点我-4"><a href="https://www.bilibili.com/video/BV1Zt411s7M5?from=search&amp;seid=10029919934495247865">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214539.png" alt="image-20210228214538027"></p><h4 id="链接点我-5"><a href="https://www.bilibili.com/video/BV1d4411v7u7?from=search&amp;seid=5595939272444640769">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214631.png" alt="image-20210228214629527"></p><hr><h1>算法设计与分析</h1><blockquote><p>这个课内容连接性没那么强，可以单独搜课看，如动态规划DP、分治、贪心等都可以单独搜到</p></blockquote><h4 id="链接点我-6"><a href="https://www.bilibili.com/video/BV1SK4y1h7Fr?from=search&amp;seid=8036636488986225083">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214748.png" alt="image-20210228214747175"></p><h4 id="这个课算法有点全，可以挑书上的内容看：链接点我">这个课算法有点全，可以挑书上的内容看：<a href="https://www.bilibili.com/video/BV1b54y1s74e?from=search&amp;seid=15547804202715834535">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214837.png" alt="image-20210228214835847"></p><h4 id="左神（左程云）的课比较进阶：链接点我">左神（左程云）的课比较进阶：<a href="https://www.bilibili.com/video/BV16K4y157vm?from=search&amp;seid=16946141245414692079">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210228214929.png" alt="image-20210228214927659"></p><hr><h1>计算机组成原理</h1><blockquote><p>暂时还没</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WXY</title>
      <link href="2021/02/26/WXY/"/>
      <url>2021/02/26/WXY/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4948f079354b5b763c8bbc091b246f363fcdfae98b0c05552f8f24a5ba33aac7"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> wxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些设置</title>
      <link href="2021/02/25/%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/02/25/%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1>状态栏显秒</h1><ol><li><p>打开注册表 regedit</p></li><li><p>找到路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced</span><br></pre></td></tr></table></figure></li><li><p>新建 <strong>DWORD(32位)值(D)</strong> 并命名为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ShowSecondsInSystemClock</span><br></pre></td></tr></table></figure><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210312124805158.png" alt="image-20210312124805158" style="zoom:80%;" /></li><li><p>然后修改值为 1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210312125115087.png" alt="image-20210312125115087"></p></li><li><p>然后重新打开 <strong>Windows资源管理器</strong> 生效</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210312125254917.png" alt="image-20210312125254917"></p></li></ol><h1>共享文件夹一些问题</h1><ol><li><p>在控制面板打开了网络共享功能</p></li><li><p>然后去 <strong>计算机管理</strong> 设置 <strong>guest</strong> 账户密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210313122903788.png" alt="image-20210313122903788"></p><blockquote><p>然后在 win7 的 Administrator 账户下进去出现如下情况</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210313123030495.png" alt="image-20210313123030495"></p><blockquote><p>刚开始以为是 Administrator 账户的原因，换了一个账户也是同样的情况</p></blockquote></li><li><p>解决方法</p><ul><li>Guest 的账户已禁用不打勾</li></ul><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210313130748374.png" alt="image-20210313130748374" style="zoom:80%;" /></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Topic-LinkedList</title>
      <link href="2021/02/22/Topic%20LinkedList/"/>
      <url>2021/02/22/Topic%20LinkedList/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>面试时链表解题方法论</p><ol><li>对于笔试：不用太在乎空间复杂度，一切为了时间复杂度</li><li>对于面试：时间复杂度依然放在第一位，但是一定要找到空间最省的方法</li></ol><p>重要技巧</p><ul><li>额外数据结构记录（哈希表、队列、栈等）</li><li>快慢指针</li></ul></blockquote><hr><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode : 相交链表的一系列问题    </button><div class="hide-content"><p>==</p><h1>Topic-相交链表的一系列问题</h1><blockquote><p>题目：给定一个可能有环也可能无环的单链表，头结点 head1 和 head2。实现一个函数，如果两个链表相交，请返回相交的第一个节点。如果不想交，返回 null</p><p>要求：如果两个链表长度之和为 N，时间复杂度达到 O(N)，额外空间复杂度达到O(1)</p></blockquote><h3 id="分析">分析</h3><ul><li><p>相交的第一个节点是指都指向同一个节点（地址相同的节点）</p></li><li><p>由于单链表不确定是否有环，所以首先要做出判断</p></li><li><p>一共有3中可能</p><ol><li>head1, head2都无环</li></ol><ul><li>遍历链表求的尾节点和长度</li><li>比较尾节点是否相同，不同则不相交，相同继续下面</li><li>然后让长链表先走长度差值( |len1 - len2| )，然后两者一起走</li><li>之后两者相交的节点就是第一个相交的节点</li></ul><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302180033.png" alt="image-20210302180031417" style="zoom: 50%;" /><ol start="2"><li>head1, head2     中一个为环一个不为环</li></ol><p>没有这种可能</p><ol start="3"><li>head1, head2都有环，且入环节点为 loop1,loop2</li></ol><ul><li>如果 loop1 == loop2，那么将loop1和loop2看成尾节点，因为共用环环长度一样，回到第一种情况</li><li>如果 loop1 != loop2，如何区分第一三种<ul><li>loop1 继续遍历一圈，看是否能遇到 loop2</li><li>没遇到则是第一种情况，返回 null</li><li>遇到则是第三者情况，返回 loop1 或 loop2。loop1 和 loop2 都是第一个相交节点</li></ul></li></ul><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302180752.png" alt="image-20210302180748867" style="zoom:50%;" /></li></ul><h3 id="判断是否有环">判断是否有环</h3><blockquote><p>要如何知道一个单链表有环并且进一步知道入环节点？</p></blockquote><p>可用<strong>快慢指针</strong>确定单链表是否有环</p><ol><li><p>slow慢指针，fast快指针，都让它们指向单链表 head</p></li><li><p>快指针一次走两步，慢指针一次走一步</p></li><li><p>如果有环的情况下，快指针会先进入环，但此时不知道哪个是入环节点</p><p>如果无环快指针会有指向 null 的情况</p></li><li><p>如有环，慢指针后来进入环，然后快慢指针都在环中。所以他们两个必定会相遇</p><ul><li>并且慢指针最多走  N(环的节点数) - 1 步(&lt;1圈) 就可与快指针相遇</li><li>快指针最多走小于两圈即可相遇</li></ul></li><li><p>相遇则表示该单链表是有环</p></li></ol><blockquote><p>那么如何找到入环节点</p></blockquote><p><strong>在上面 快慢指针在环中的某个地方相遇，然后将快指针指向 head，然后快慢指针每次都只走一步，下一个相遇的节点就是入环节点</strong></p><p>证明：</p><ol><li><p>先看下快慢指针的追赶</p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302155911.png" alt="image-20210302155910059" style="zoom: 67%;" /><p>此时以 fast 为原点，向右为正，设 slow 走了 k 步相遇，初始 fast slow 相距 n 个节点（不包括本身）</p><p>追上只需要满足 2k + n + 1 = k</p><p>k = n + 1 (也就是快慢指针的间距数)</p><p>所以追上的步数 = 相距数</p></li><li><p>未完待续</p></li></ol><blockquote><p>code</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断单链表是否有环，有返回入环节点，无返回 null</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">getLoopNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode fast = head.next.next;</span><br><span class="line">    ListNode slow = head.next;</span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;  <span class="comment">// 相遇跳出</span></span><br><span class="line">        <span class="comment">// 遍历到末尾都还不相遇</span></span><br><span class="line">        <span class="keyword">if</span> (fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast = head;    <span class="comment">// 快指针重新指向头结点</span></span><br><span class="line">    <span class="comment">// 都走一步 相遇的节点即为入环节点</span></span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Code">Code</h3><ol><li>都无环</li></ol>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都无环情况</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">noLoop</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">    ListNode cur1 = head1;</span><br><span class="line">    ListNode cur2 = head2;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cur2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        len--;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不相交</span></span><br><span class="line">    <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 相交</span></span><br><span class="line">    <span class="comment">// cur1 指向长链表   cur2 指向短链表</span></span><br><span class="line">    cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">    cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">    len = Math.abs(len);</span><br><span class="line">    <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol start="2"><li><p>都有环</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都有环</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">bothLoop</span><span class="params">(ListNode head1, ListNode loop1, ListNode head2, ListNode loop2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 相交并且相交点不在环上</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">        ListNode cur1 = head1;</span><br><span class="line">        ListNode cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">            len--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        len = Math.abs(len);</span><br><span class="line">        <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 相交且在环上 或 不相交</span></span><br><span class="line">        ListNode tmp = loop1.next;</span><br><span class="line">        <span class="keyword">while</span> (tmp != loop1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp == loop2) &#123; <span class="comment">// 相交且在环上</span></span><br><span class="line">                <span class="keyword">return</span> loop1;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不相交</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最后合并</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一起处理三种情况</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode loop1 = getLoopNode(head1);</span><br><span class="line">    ListNode loop2 = getLoopNode(head2);</span><br><span class="line">    <span class="comment">// 都无环</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == <span class="keyword">null</span> &amp;&amp; loop2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> noLoop(head1, head2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 都有环</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 != <span class="keyword">null</span> &amp;&amp; loop2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> bothLoop(head1, loop1, head2, loop2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有一个无环或有环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试Code">测试Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: minghuifan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/2 - 16:13</span></span><br><span class="line"><span class="comment"> * @ Description: LinkedList</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">intersectLinkedList_</span>相交链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断单链表是否有环，有返回入环节点，无返回 null</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">getLoopNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode fast = head.next.next;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;  <span class="comment">// 相遇跳出</span></span><br><span class="line">            <span class="comment">// 遍历到末尾都还不相遇</span></span><br><span class="line">            <span class="keyword">if</span> (fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;    <span class="comment">// 快指针重新指向头结点</span></span><br><span class="line">        <span class="comment">// 都走一步 相遇的节点即为入环节点</span></span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都无环情况</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">noLoop</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        ListNode cur1 = head1;</span><br><span class="line">        ListNode cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不相交</span></span><br><span class="line">        <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相交</span></span><br><span class="line">        <span class="comment">// cur1 指向长链表   cur2 指向短链表</span></span><br><span class="line">        cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        len = Math.abs(len);</span><br><span class="line">        <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都有环</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">bothLoop</span><span class="params">(ListNode head1, ListNode loop1, ListNode head2, ListNode loop2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相交并且相交点不在环上</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">            ListNode cur1 = head1;</span><br><span class="line">            ListNode cur2 = head2;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                len++;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">                len--;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">            cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">            len = Math.abs(len);</span><br><span class="line">            <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 相交且在环上 或 不相交</span></span><br><span class="line">            ListNode tmp = loop1.next;</span><br><span class="line">            <span class="keyword">while</span> (tmp != loop1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp == loop2) &#123; <span class="comment">// 相交且在环上</span></span><br><span class="line">                    <span class="keyword">return</span> loop1;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一起处理三种情况</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode loop1 = getLoopNode(head1);</span><br><span class="line">        ListNode loop2 = getLoopNode(head2);</span><br><span class="line">        <span class="comment">// 都无环</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == <span class="keyword">null</span> &amp;&amp; loop2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noLoop(head1, head2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 都有环</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 != <span class="keyword">null</span> &amp;&amp; loop2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bothLoop(head1, loop1, head2, loop2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有一个无环或有环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head1 = <span class="keyword">null</span>;</span><br><span class="line">        head1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head1.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head1.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head1.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head1.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        head1.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line"><span class="comment">//        head1.next.next.next.next.next.next = new ListNode(7);</span></span><br><span class="line">        head1.next.next.next.next.next.next = head1.next.next.next;</span><br><span class="line"></span><br><span class="line">        ListNode head2 = <span class="keyword">null</span>;</span><br><span class="line">        head2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head2.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head2.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head2.next.next.next = head1.next;</span><br><span class="line"><span class="comment">//        head2.next.next.next = new ListNode(4);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next = new ListNode(5);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next.next = new ListNode(6);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next.next.next = new ListNode(7);</span></span><br><span class="line">        System.out.println(getIntersectionNode(head1, head2).val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相关题目">相关题目</h3><ol><li><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表</a></li></ol><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302194418.png" alt="image-20210302194416667" style="zoom:80%;" /><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302193429.png" alt="image-20210302193428117" style="zoom: 67%;" /><ol start="2"><li><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></li></ol><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302193725.png" alt="image-20210302193724527" style="zoom: 67%;" /><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302194231.png" alt="image-20210302194230558" style="zoom: 67%;" /><ol start="3"><li><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></p> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302195203.png" alt="image-20210302195159580" style="zoom:80%;" /> <img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210302195143.png" alt="image-20210302195138072" style="zoom:67%;" /></li></ol></div></div></p><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode:判断一个链表是否为回文结构    </button><div class="hide-content"><p>==</p><h1>Topic-判断一个链表是否为回文结构</h1><p>题目：给定一个单链表头结点 head，请判断该链表是否为回文结构</p><p>例子：1-&gt;2-&gt;1，返回true；1-&gt;2-&gt;2-&gt;1，返回true；1-&gt;2-&gt;3，返回false。</p><p>要求：如果链表长度为N，时间复杂度达到 O(N)，额外空间复杂度达到 O(1)</p><h3 id="分析：三种常见方法"><strong>分析：三种常见方法</strong></h3><ul><li><p>压入栈中，然后遍历同时弹栈，看节点内容是否想等</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210217172005.png" alt="image-20210217172004608"></p></li><li><p>和第一种一样不过只让链表后半部分压栈，然后遍历比对</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210217171849.png" alt="image-20210217171843199"></p></li><li><p>第三种：<br>step1：先用快慢指针（slow、fast）找到中点（偶数为对称轴前一个，奇数即为中点）</p><p>step2：然后将后面的链表反转：</p><p>​1）偶数时：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6<br>​2）奇数时：1 -&gt; 2 -&gt; 3 -&gt; 4 &lt;- 5 &lt;- 6 &lt;- 7<br>step3：然后分别遍历左右链表比对即可得出结果<br>step4：别忘了将链表复原</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210217193140.png" alt="image-20210217191654589"></p></li></ul><h4 id="法一：链表全部压栈">法一：链表全部压栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把整个链表压栈，然后遍历链表和弹栈结果是否一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    ListNode tmp = head;</span><br><span class="line">    <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(tmp);</span><br><span class="line">        tmp = tmp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; stack.pop().val == head.val) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head == <span class="keyword">null</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="法二：一半压栈">法二：一半压栈</h4><p>如何找到中点：快慢指针 /slow/fast，条件如何取。有三种常见初始状态（但至少要两个节点）</p><ol><li><strong>slow = fast = head</strong>：都指向头结点</li><li><strong>slow = head; fast = head.next;</strong> ：慢指向头结点，快指向第二节点</li><li><strong>slow = head.next; fast = head;</strong> ：慢指向第二节点，快指向头结点</li></ol><blockquote><p>然后依次讨论判断的条件是 ==<strong>fast.next!= null &amp;&amp; fast.next.next != null</strong>==</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = fast = head; 时</span><br><span class="line"></span><br><span class="line">EX1: 1 2开始都指向第 1</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX2: 1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向2</span><br><span class="line">指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴前一个</span><br><span class="line"></span><br><span class="line">EX4: 1 2 3</span><br><span class="line">fast可以走1步，slow指向2</span><br><span class="line">指向中点位置</span><br><span class="line"> </span><br><span class="line">EX5: 1 2 3 4 5</span><br><span class="line">fast可以走2步，slow指向3</span><br><span class="line">指向中点位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走3步，slow指向4</span><br><span class="line">指向中点位置</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = head; fast = head.next; 时</span><br><span class="line"></span><br><span class="line">EX1:链表：1 2slow指向1，fast指向2</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">然后此时指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX2:链表：1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向2</span><br><span class="line">也是指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴前一个</span><br><span class="line"></span><br><span class="line">EX4:链表：1 2 3</span><br><span class="line">fast可以走0步，slow指向1</span><br><span class="line">指向中点前一个位置</span><br><span class="line"> </span><br><span class="line">EX5:链表：1 2 3 4 5</span><br><span class="line">fast可以走1步，slow指向2</span><br><span class="line">指向中点前一个位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">指向中点位置前一个位置</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = head.next; fast = head; 时</span><br><span class="line"> </span><br><span class="line">EX1:链表：1 2slow指向2，fast指向1</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">然后此时指向对称轴后一个</span><br><span class="line"></span><br><span class="line">EX2:链表：1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向3</span><br><span class="line">也是指向对称轴后一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴后一个</span><br><span class="line"></span><br><span class="line">EX4:链表：1 2 3</span><br><span class="line">fast可以走1步，slow指向3</span><br><span class="line">指向中点后一个位置</span><br><span class="line"> </span><br><span class="line">EX5:链表：1 2 3 4 5</span><br><span class="line">fast可以走2步，slow指向4</span><br><span class="line">指向中点后一个位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走3步，slow指向5</span><br><span class="line">指向中点后一个位置</span><br></pre></td></tr></table></figure><blockquote><p>最后得出结论：判断条件是 ==<strong>fast.next!= null &amp;&amp; fast.next.next != null</strong>==</p><ol><li>slow = fast = head;</li></ol><p>偶数：对称轴前一个</p><p>奇数：中点</p><ol start="2"><li>slow = head; fast = head.next;</li></ol><p>偶数：对称轴前一个</p><p>奇数：中点前一个</p><ol start="3"><li>slow = head.next; fast = head;</li></ol><p>偶数：对称轴后一个</p><p>奇数：中点后一个</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 很容易得出，我们需要后一半压栈所以选择第三种快慢指针方案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome2</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时slow指向中点或者对称轴的下一个</span></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(slow);</span><br><span class="line">            System.out.print(slow.val + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != stack.pop().val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="法三：">法三：</h4><p>这里需要用到反转链表的模板，模板如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入 head 为链表的头结点</span></span><br><span class="line">ListNode pre = head;<span class="comment">// 即指向头结点</span></span><br><span class="line">ListNode last = head.next;<span class="comment">// 即指向头结点下一个</span></span><br><span class="line">ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">pre.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (last != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tmp = last.next;</span><br><span class="line">        last.next = pre;</span><br><span class="line">        pre = last;</span><br><span class="line">        last = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 最后循环完后的结果是 pre 指向反转的首节点，last、tmp 指向 null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 用偶数个举例，如链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome3</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step1：找到中点位置，偶数为对称轴前一个，奇数为中点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step2：反转后半部分链表</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向中点或者对称轴的前一个，也就是相当于反转部分的头结点</span></span><br><span class="line">        <span class="comment">// 即 slow 指向 3，接下来要反转后面部分得到：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6</span></span><br><span class="line">        fast = slow.next;</span><br><span class="line">        ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = slow; <span class="comment">// 指向最后一个节点（或者后部分链表的头结点）这里后面会用到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step3：将两边链表分别遍历比对</span></span><br><span class="line">        <span class="comment">// 此时slow指向反转链表的首节点，也就是原链表的最后一个</span></span><br><span class="line">        <span class="comment">// 1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6 slow 指向 6</span></span><br><span class="line">        <span class="comment">// 然后我们依次遍历两边的链表</span></span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">boolean</span> ans = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; slow != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.print(&quot;fast:&quot; + fast.val + &quot;,slow:&quot; + slow.val + &quot;\n&quot;);</span></span><br><span class="line">            <span class="keyword">if</span> (fast.val != slow.val) &#123;</span><br><span class="line">                ans = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step4：链表复原</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向 3，fast 指向 null</span></span><br><span class="line">        <span class="comment">// 如果是奇数个 slow、fast 都指向 null，所以要重新赋值</span></span><br><span class="line">        slow = tmp;</span><br><span class="line">        fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="测试-code">测试 code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/2/10 - 13:19</span></span><br><span class="line"><span class="comment"> * @ Description: LinkedList</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// https://leetcode-cn.com/problems/palindrome-linked-list-lcci/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">isPalindromeLinkedList_</span>回文链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkedList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Linked List: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把整个链表压栈，然后遍历链表和弹栈结果是否一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ListNode tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(tmp);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; stack.pop().val == head.val) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head == <span class="keyword">null</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 半个链表压栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome2</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时slow指向中点或者对称轴的下一个</span></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(slow);</span><br><span class="line"><span class="comment">//            System.out.print(slow.val + &quot;_&quot;);</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != stack.pop().val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用偶数个举例，如链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome3</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step1：找到中点位置，偶数为对称轴前一个，奇数为中点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step2：反转后半部分链表</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向中点或者对称轴的前一个，也就是相当于反转部分的头结点</span></span><br><span class="line">        <span class="comment">// 即 slow 指向 3，接下来要反转后面部分得到：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6</span></span><br><span class="line">        fast = slow.next;</span><br><span class="line">        ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = slow; <span class="comment">// 指向最后一个节点（或者后部分链表的头结点）这里后面会用到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step3：将两边链表分别遍历比对</span></span><br><span class="line">        <span class="comment">// 此时slow指向反转链表的首节点，也就是原链表的最后一个</span></span><br><span class="line">        <span class="comment">// 1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6 slow 指向 6</span></span><br><span class="line">        <span class="comment">// 然后我们依次遍历两边的链表</span></span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">boolean</span> ans = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; slow != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.print(&quot;fast:&quot; + fast.val + &quot;,slow:&quot; + slow.val + &quot;\n&quot;);</span></span><br><span class="line">            <span class="keyword">if</span> (fast.val != slow.val) &#123;</span><br><span class="line">                ans = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step4：链表复原</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向 3，fast 指向 null</span></span><br><span class="line">        <span class="comment">// 如果是奇数个 slow、fast 都指向 null，所以要重新赋值</span></span><br><span class="line">        slow = tmp;</span><br><span class="line">        fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line">Linked List: </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></div></p><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode : 86.分隔链表    </button><div class="hide-content"><p>==</p><h1>Topic-86.分隔链表</h1><p>链接：<a href="https://leetcode-cn.com/problems/partition-list/">分隔链表</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222183948.png" alt="image-20210222183946741"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="分析">分析</h3><blockquote><p>创建4个变量</p><p>sH/sT：指向小于给出节点的第一个/指向最后一个<br>bH/bT：指向非小于给出节点的第一个/指向最后一个</p></blockquote><h3 id="code">code</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222215234.png" alt="image-20210222215233691"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">    ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">    ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的头</span></span><br><span class="line">    ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的尾</span></span><br><span class="line">    <span class="comment">// 为了每一步的尾指针的next都指向null，为后续方便</span></span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        next = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sH = head;</span><br><span class="line">                sT = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = head;</span><br><span class="line">                sT = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bH = head;</span><br><span class="line">                bT = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bT.next = head;</span><br><span class="line">                bT = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此时 sT 和 bT 两者中至少有一个不为空,因此有3种情况</span></span><br><span class="line">    <span class="comment">// 10   11   01</span></span><br><span class="line">    <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> bH;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sT.next = bH;</span><br><span class="line">        <span class="keyword">return</span> sH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="题目进阶">题目进阶</h2><p>上面的 LeetCode 的题目等于和大于是归为一边的</p><p>进阶：将 <strong>小于 等于 大于</strong> 分别归为三段处理</p><h3 id="分析-2">分析</h3><blockquote><p>还是和刚刚一样的思路</p><p>创建六个变量</p><p>sH/sT：指向小于给出节点的第一个/指向最后一个<br>eH/eT：指向等于给出节点的第一个/指向最后一个<br>bH/bT：指向大于于给出节点的第一个/指向最后一个</p></blockquote><h3 id="code-2">code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partitionAdvanced</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode eH = <span class="keyword">null</span>;     <span class="comment">// 指向等于的头</span></span><br><span class="line">        ListNode eT = <span class="keyword">null</span>;     <span class="comment">// 指向等于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向大于的尾</span></span><br><span class="line">        <span class="comment">// 保证每次的sT、eT、bT的next都指向null，为了后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.val == x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    eH = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    eT.next = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一共8种情况</span></span><br><span class="line">        <span class="comment">// 000  100</span></span><br><span class="line">        <span class="comment">// 001  101</span></span><br><span class="line">        <span class="comment">// 010  110</span></span><br><span class="line">        <span class="comment">// 011  111</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> eH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = eH;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (sT != null) &#123;   // 小于部分不为空</span></span><br><span class="line"><span class="comment">//            sT.next = eH;</span></span><br><span class="line"><span class="comment">//            // 如果 eT 为空指向小于头，不为空不处理</span></span><br><span class="line"><span class="comment">//            eT = eT == null ? sT : eT;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (eT != null) &#123;   // 等于部分不为空</span></span><br><span class="line"><span class="comment">//            eT.next = bH;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return sH != null ? sH : eH != null ? eH : bH;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试-code">测试 code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> * ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> * ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://leetcode-cn.com/problems/partition-list/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">partitionList_</span>分隔链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkedList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Linked List: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的尾</span></span><br><span class="line">        <span class="comment">// 为了每一步的尾指针的next都指向null，为后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时 sT 和 bT 两者中至少有一个不为空,因此有3种情况</span></span><br><span class="line">        <span class="comment">// 10   11   01</span></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bH;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sT.next = bH;</span><br><span class="line">            <span class="keyword">return</span> sH;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partitionAdvanced</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode eH = <span class="keyword">null</span>;     <span class="comment">// 指向等于的头</span></span><br><span class="line">        ListNode eT = <span class="keyword">null</span>;     <span class="comment">// 指向等于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向大于的尾</span></span><br><span class="line">        <span class="comment">// 保证每次的sT、eT、bT的next都指向null，为了后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.val == x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    eH = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    eT.next = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一共8种情况</span></span><br><span class="line">        <span class="comment">// 000  100</span></span><br><span class="line">        <span class="comment">// 001  101</span></span><br><span class="line">        <span class="comment">// 010  110</span></span><br><span class="line">        <span class="comment">// 011  111</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> eH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = eH;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (sT != null) &#123;   // 小于部分不为空</span></span><br><span class="line"><span class="comment">//            sT.next = eH;</span></span><br><span class="line"><span class="comment">//            // 如果 eT 为空指向小于头，不为空不处理</span></span><br><span class="line"><span class="comment">//            eT = eT == null ? sT : eT;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (eT != null) &#123;   // 等于部分不为空</span></span><br><span class="line"><span class="comment">//            eT.next = bH;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return sH != null ? sH : eH != null ? eH : bH;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 2));</span></span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 3));</span></span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 3));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表与指针</title>
      <link href="2021/02/18/%E9%93%BE%E8%A1%A8%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>2021/02/18/%E9%93%BE%E8%A1%A8%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="e94598d87ebad568a36ebfb3f1cef3d0a5459bebac738f45bda3ea89ccc29ba0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是“12345678”</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE配置</title>
      <link href="2021/02/18/IDE%E9%85%8D%E7%BD%AE/"/>
      <url>2021/02/18/IDE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1>Vscode</h1><ol><li><p>preLaunchTask&quot;C/C++: gcc.exe 生成活动文件&quot;已终止，退出代码为 -1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210528181104.png" alt="image-20210528180610075"></p><p>点击仍要调试后出现下图情况</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210528180841.png" alt="image-20210528180841101"></p><blockquote><p>只需要修改 tasks.json 中一个地方</p><p>即 “command”: 处修改为 g++.exe</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// launch.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;gcc.exe - 生成和调试活动文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;D:\\Program Files\\RELY\\x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tasks.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppbuild&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;g++.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1>IDEA</h1><h2 id="常用设置">常用设置</h2><h3 id="设置鼠标滚轮调节字体大小">设置鼠标滚轮调节字体大小</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210205192659.png" alt="image-20210205145421119"></p><h3 id="鼠标悬浮在代码有提示">鼠标悬浮在代码有提示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210205192838.png" alt="image-20210205192838603"></p><h3 id="自动导包和优化多余包">自动导包和优化多余包</h3><p>手动导包：Ant + Enter<br>自动导包：<img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210205193817.png" alt="image-20210205193548380"  /></p><h3 id="同一个包下的类，超过指定个数导包合并为">同一个包下的类，超过指定个数导包合并为 *</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206105017.png" alt="image-20210206105012613"></p><h3 id="显示行号和方法之间分隔符">显示行号和方法之间分隔符</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206105301.png" alt="image-20210206105259327"></p><h3 id="忽略大小写提示">忽略大小写提示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206105455.png" alt="image-20210206105451278"></p><h3 id="多个类不隐藏，多行显示">多个类不隐藏，多行显示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206110014.png" alt="image-20210206110012776"></p><h3 id="设置默认字体，大小，行间距（编辑区和控制台都会变化）">设置默认字体，大小，行间距（编辑区和控制台都会变化）</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206110331.png" alt="image-20210206110330073"></p><h3 id="修改注释">修改注释</h3><center class = "half"><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206113813.png" width = "464" /><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206114352.png" width = "464" /></center><h3 id="设置类头的文档注释信息">设置类头的文档注释信息</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ Author: xxx</span></span><br><span class="line"><span class="comment">* @ Date: $&#123;DATE&#125; - $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* @ Description: $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">* @ Version: 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206115655.png" alt="image-20210206115654047"></p><h3 id="设置文件编码格式默认全选为-UTF-8">设置文件编码格式默认全选为 UTF-8</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206120422.png" alt="image-20210206120420884"></p><h3 id="自动编译">自动编译</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206120752.png" alt="image-20210206120750786"></p><h3 id="导入-jar-包">导入 jar 包</h3><center class = "half"><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206121029.png" width = "264" /><img src = "https://gitee.com/MingHuifan/image/raw/master/20210206121157.png" width = "664" /></center><h3 id="生成序列化版本号">生成序列化版本号</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206121612.png" alt="image-20210206121610845"></p><hr><h2 id="快捷键">快捷键</h2><ol><li>创建内容：Alt + Ins</li><li>main() ：psvm</li><li>复制行：Ctrl + D</li><li>删除行：Ctrl + Y</li><li>代码上/下 移动：Ctrl + Shift + Up/Dn</li><li>收缩类：Ctrl + N</li><li>生成代码：Alt + Ins (如构造器, hashcode)</li><li>百能快捷键：Alt + Enter （导包，生成变量等）</li><li>单行注释或者多行注释：Ctrl + / 、Ctrl + Shift + /</li><li>重命名：Shift + F6</li><li>for循环：fori</li><li>代码块包围：Ctrl + Alt + T</li><li>自动补全提示：Alt + /<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206124238.png" alt="image-20210206124236220"></li><li>代码一层层调用：<br>点进源码：Ctrl + 鼠标悬浮 + 点进去</li><li>左右回退：<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210206124647.png" alt="image-20210206124646882"></li><li>显示代码结构：Alt + 7</li><li>显示导航：Alt + 1</li></ol><h1>Clion</h1><h2 id="运行多个-main-函数">运行多个 main() 函数</h2><blockquote><p>将 <strong>CMakeLists.txt</strong> 文件写成如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file (GLOB_RECURSE files *.cpp)</span><br><span class="line">foreach (file $&#123;files&#125;)</span><br><span class="line">    string(REGEX REPLACE &quot;.+/(.+)/(.+)\\..*&quot; &quot;\\1-\\2&quot; exe $&#123;file&#125;)</span><br><span class="line">    add_executable ($&#123;exe&#125; $&#123;file&#125;)</span><br><span class="line">endforeach ()</span><br></pre></td></tr></table></figure><p>EX：</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/image-20210311173629566.png" alt="image-20210311173629566"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-butterfly</title>
      <link href="2021/02/18/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>2021/02/18/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<hr><h1>个人博客搭建 Hexo</h1><h2 id="一、创建博客">一、创建博客</h2><blockquote><p>先安装 <strong>git 和 node.js</strong></p></blockquote><blockquote><p>然后在你要保持博客的路径下执行下面命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli   <span class="comment"># 安装hexo</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;<span class="comment"># 安装博客</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;<span class="comment"># 进入到安装博客的路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install<span class="comment"># 安装npm</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218112216.png" alt="image-20210218112210771"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218111819.png" alt="image-20210218111818131"></p><blockquote><p>然后进入到 xiaofanBlog/ 修改文件</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218113450.png" alt="image-20210218113449005" style="zoom:150%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218112801.png" alt="image-20210218112759252"></p><blockquote><p>然后执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ npm install hexo-deployer-git --save</span><br><span class="line">&gt;$ hexo d</span><br></pre></td></tr></table></figure></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218113755.png" alt="image-20210218113752927"></p><p>如果不行重新输入 hexo d</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218114336.png" alt="image-20210218114333983"></p><blockquote><p>上面就已经上传到了github仓库了</p><p>下面就是怎么修改主题</p></blockquote><hr><blockquote><p>如果你没有设置 git 的邮箱和用户名则在</p><p>hexo d 时会出现下面提示</p><p>只需要设置邮箱和用户名即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/tCTxUb8v7EpJXIe.png" alt="image-20210310144318638"></p><h2 id="二、修改主题">二、修改主题</h2><p>从 hexo<strong>主题</strong> 官网下载主题，直接 git clone 即可</p><p>然后就是把主题放到博客文件夹 themes里面，重命名</p><p>然后在 _config.yml 中修改主题（注意名称要和 themes 里面的主题文件夹一致）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218142237.png" alt="image-20210218142059021"></p><p>保存之后用重新部署一下如图</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218142514.png" alt="image-20210218142512671"  /><p>如果出现了下面这个问题</p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210218142548.png" alt="image-20210218142546760" style="zoom:80%;" /><p>解决方案输入下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-pug hexo-renderer-stylus --save</span></span><br></pre></td></tr></table></figure><p>清理缓存代码</p><h2 id="code￼3"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure></h2><h2 id="三、主题美化">三、主题美化</h2><h3 id="标签页">标签页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n page tags</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">然后找到source/tags/index.md文件</span><br><span class="line">修改为</span><br><span class="line">---</span><br><span class="line">title: 標籤</span><br><span class="line">date: 2018-01-05 00:00:00 # 不动</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">top_img: # 图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="分类页">分类页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n page categories</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">同样找到source/categories/index.md文件</span><br><span class="line">修改为</span><br><span class="line">---</span><br><span class="line">title: 分類</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="代码主题和能否Copy">代码主题和能否Copy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">highlight_theme: pale night #  darker / pale night / light / ocean / mac / mac light / false</span><br><span class="line">highlight_copy: true # 能否复制</span><br><span class="line">highlight_lang: true # show the code language</span><br><span class="line">highlight_shrink: false # true 全部代碼框不展開，需点击&gt;打開false 代碼狂展開，有&gt;點擊按鈕 none 不顯示&gt;按鈕</span><br><span class="line">code_word_wrap: false # 代码换行</span><br></pre></td></tr></table></figure><h3 id="主页标签页等图片设置">主页标签页等图片设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 主题配置文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> Disable all banner image</span></span><br><span class="line">disable_top_img: false # 显示顶部图为 false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 顶部图</span></span><br><span class="line">index_img: /img/背景.jpg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认的top_img，当页面的top_img 没有配置时，会显示default_top_img</span></span><br><span class="line">default_top_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 归档页面的top_img</span></span><br><span class="line">archive_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag 子页面的默认top_img</span></span><br><span class="line">tag_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag 子页面的top_img，可配置每个 tag 的 top_img</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - tag name: xxxxx</span></span><br><span class="line">tag_per_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> category 子页面的默认top_img</span></span><br><span class="line">category_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> category 子页面的top_img，可配置每个category 的top_img</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - category name: xxxxx</span></span><br><span class="line">category_per_img:</span><br></pre></td></tr></table></figure><h3 id="文章图片设置">文章图片设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">cover:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  index_enable: true # 在主页</span><br><span class="line">  aside_enable: true # 在文章页</span><br><span class="line">  archives_enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> the position of cover <span class="keyword">in</span> home page (封面顯示的位置)</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> left/right/both</span></span><br><span class="line">  position: left # 图片在左边</span><br><span class="line"><span class="meta">  #</span><span class="bash"> When cover is not <span class="built_in">set</span>, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  default_cover:</span><br><span class="line">    #- https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span><br></pre></td></tr></table></figure><h3 id="文章在主页展示的字数">文章在主页展示的字数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">index_post_content:</span><br><span class="line">  method: 3</span><br><span class="line">  length: 200 # 预览多少。0 就没有了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如200</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220094718.png" alt="image-20210220094717060"></p><h3 id="文章置顶">文章置顶</h3><blockquote><p>直接在文章的front-matter区域里添加sticky: 1属性来把这篇文章置顶。数值越大，置顶的优先级越大。</p></blockquote><h3 id="文章主页和阅读页显示">文章主页和阅读页显示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 主题配置</span><br><span class="line">post_meta:</span><br><span class="line">  page: # Home Page</span><br><span class="line">    date_type: both # created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 主頁是否顯示分類</span><br><span class="line">    tags: true # true or false 主頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章頁日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 文章頁是否顯示分類</span><br><span class="line">    tags: true # true or false 文章頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br></pre></td></tr></table></figure><h3 id="文章阅读页显示目录">文章阅读页显示目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> toc (目錄)</span></span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  number: true</span><br><span class="line">  style_simple: false</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220104649.png" alt="image-20210220104648888"></p><blockquote><p>特定文章也可以设定是否显示目录</p><p>在文章头部添加</p><p>toc_number和toc，配置为 true 和 false</p></blockquote><h3 id="相关文章">相关文章</h3><blockquote><p>相关文章推荐的原理是根据文章tags的比重来推荐</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Related Articles</span></span><br><span class="line">related_post:</span><br><span class="line">  enable: true</span><br><span class="line">  limit: 5 # 篇数</span><br><span class="line">  date_type: created # or created or updated 文章日期顯示創建日或者更新日</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文章描点">文章描点</h3><blockquote><p>开启文章锚点后，当你在文章页进行滚动时，文章链接会根据标题ID进行替换<br>(注意:每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> anchor</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> when you scroll <span class="keyword">in</span> post, the URL will update according to header id.</span></span><br><span class="line">anchor: true</span><br></pre></td></tr></table></figure><h3 id="文章编辑按钮">文章编辑按钮</h3><blockquote><p>在文章标题旁边显示一个编辑按钮，点击会跳转到对应的链接去。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post edit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Easily browse and edit blog <span class="built_in">source</span> code online.</span></span><br><span class="line">post_edit:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> url: https://github.com/755400668/755400668.github/edit/main/<span class="built_in">source</span>/</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> For example: https://github.com/jerryc127/butterfly.js.org/edit/main/<span class="built_in">source</span>/</span></span><br><span class="line">  url: https://github.com/755400668/755400668.github/edit/main/source/</span><br></pre></td></tr></table></figure><h3 id="文章版权">文章版权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: true # 显示中文网址</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure><p>如果想要某偏文章不显示版权，在文章标题添加<strong>copyright: false</strong> 即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220103922.png" alt="image-20210220103920494"></p><h3 id="文章打赏">文章打赏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sponsor/reward</span></span><br><span class="line">reward:</span><br><span class="line">  enable: true</span><br><span class="line">  QR_code:</span><br><span class="line">    - img: /img/wechat.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: wechat</span><br><span class="line">    - img: /img/alipay.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: alipay</span><br></pre></td></tr></table></figure><h3 id="头像">头像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Avatar (頭像)</span></span><br><span class="line">avatar:</span><br><span class="line">  img: /img/wechat.gif</span><br><span class="line">  effect: false # 转圈</span><br></pre></td></tr></table></figure><h3 id="网站内容是否可以复制">网站内容是否可以复制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> copy settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span></span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line">    enable: true</span><br><span class="line">    limit_count: 500</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220110231.png" alt="image-20210220110230870"></p><h3 id="页脚设置">页脚设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Footer Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2021</span><br><span class="line">  custom_text: 愿世间美好与你环环相扣</span><br><span class="line">  copyright: true # Copyright of theme and framework</span><br></pre></td></tr></table></figure><h3 id="夜间模式">夜间模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dark mode</span></span><br><span class="line">darkmode:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Toggle Button to switch dark/light mode</span></span><br><span class="line">  button: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: 1  Following System Settings, <span class="keyword">if</span> the system doesn<span class="string">&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: <span class="literal">false</span></span></span><br><span class="line">  autoChangeMode: 1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220110817.png" alt="image-20210220110816979"></p><h3 id="阅读模式">阅读模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Read Mode (閲讀模式)</span></span><br><span class="line">readmode: true</span><br></pre></td></tr></table></figure><h3 id="字体大小">字体大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bottom right button (右下角按鈕)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Change font size</span></span><br><span class="line">change_font_size: true</span><br></pre></td></tr></table></figure><h3 id="访问人数">访问人数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> busuanzi count <span class="keyword">for</span> PV / UV <span class="keyword">in</span> site</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 訪問人數</span></span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="侧边栏">侧边栏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> aside (側邊欄)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line"></span><br><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # 右边显示</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 头像卡片</span></span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Github</span><br><span class="line">      link: https://github.com/755400668</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 公告卡片</span></span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: 欢迎来到灰灰爱吃小云朵的博客</span><br><span class="line"></span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 分类卡片</span></span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 标签卡片</span></span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: false</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br></pre></td></tr></table></figure><h3 id="访问人数-2">访问人数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> busuanzi count <span class="keyword">for</span> PV / UV <span class="keyword">in</span> site</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 訪問人數</span></span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br></pre></td></tr></table></figure><h3 id="网站运行时间">网站运行时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 02/18/2021</span><br></pre></td></tr></table></figure><h3 id="Tag-hide">Tag-hide</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220112432.png" alt="image-20210220112431535"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220112517.png" alt="image-20210220112516336"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210220112533.png" alt="image-20210220112530047"></p><h3 id="评论">评论</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitalk</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  client_id: aa776ef94071498f6753</span><br><span class="line">  client_secret: 1cbad93b480c8980863bbfcf1fd8926c2fdd9863</span><br><span class="line">  repo: 755400668.github.io</span><br><span class="line">  owner: 755400668</span><br><span class="line">  admin: 755400668</span><br><span class="line">  language: zh-CN # en, zh-CN, zh-TW, es-ES, fr, ru</span><br><span class="line">  perPage: 10 # Pagination size, with maximum 100.</span><br><span class="line">  distractionFreeMode: false # Facebook-like distraction free mode.</span><br><span class="line">  pagerDirection: last # Comment sorting direction, available values are last and first.</span><br><span class="line">  createIssueManually: false # Gitalk will create a corresponding github issue for your every single page automatically</span><br></pre></td></tr></table></figure><h3 id="搜索">搜索</h3><p>先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后主题配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="UI颜色">UI颜色</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> theme_color:</span></span><br><span class="line">  enable: true</span><br><span class="line">  main: &quot;#49B1F5&quot;</span><br><span class="line">  paginator: &quot;#00c4b6&quot;</span><br><span class="line">  button_hover: &quot;#FF7242&quot;</span><br><span class="line">  text_selection: &quot;#00c4b6&quot;</span><br><span class="line">  link_color: &quot;#99a9bf&quot;</span><br><span class="line">  meta_color: &quot;#858585&quot;</span><br><span class="line">  hr_color: &quot;#A4D8FA&quot;</span><br><span class="line">  code_foreground: &quot;#F47466&quot;</span><br><span class="line">  code_background: &quot;rgba(27, 31, 35, .05)&quot;</span><br><span class="line">  toc_color: &quot;#00c4b6&quot;</span><br><span class="line">  blockquote_padding_color: &quot;#49b1f5&quot;</span><br><span class="line">  blockquote_background_color: &quot;#49b1f5&quot;</span><br></pre></td></tr></table></figure><h3 id="图片加载动画">图片加载动画</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lazyload (圖片懶加載)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/verlok/lazyload</span></span><br><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  post: /img/loading1.gif</span><br></pre></td></tr></table></figure><h3 id="网站背景">网站背景</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Website Background (設置網站背景)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> can <span class="built_in">set</span> it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line">background:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 页脚显示和首页一样</span></span><br><span class="line">footer_bg: true</span><br></pre></td></tr></table></figure><h3 id="鼠标聚集几何图形">鼠标聚集几何图形</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> canvas_nest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &#x27;0,0,255&#x27; #color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(note: use &#x27;,&#x27; to separate.)</span><br><span class="line">  opacity: 0.7 # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  zIndex: -1 # z-index property of the background, default: -1.</span><br><span class="line">  count: 199 # the number of lines, default: 99.</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h3 id="鼠标点击效果">鼠标点击效果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line">click_heart:</span><br><span class="line">  enable: true</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h3 id="页面美化">页面美化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default display mode (網站默認的顯示模式)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> light (default) / dark</span></span><br><span class="line">display_mode: light</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Beautify (美化頁面顯示)</span></span><br><span class="line">beautify:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> post 只在文章頁生效</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> site 在全站生效</span></span><br><span class="line">  field: sist # site/post</span><br><span class="line">  title-prefix-icon: &#x27;\f0c1&#x27;</span><br><span class="line">  title-prefix-icon-color: &#x27;#F47466&#x27;</span><br></pre></td></tr></table></figure><h3 id="主页打字">主页打字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the subtitle on homepage (主頁subtitle)</span></span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Typewriter Effect (打字效果)</span></span><br><span class="line">  effect: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> loop (循環打字)</span></span><br><span class="line">  loop: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>調用第三方服務</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="built_in">source</span>: <span class="literal">true</span> <span class="comment"># 關閉調用</span></span></span><br><span class="line">  source: 1 # 調用搏天api的隨機語錄（簡體）</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 2  調用一言網的一句話（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 3  調用一句網（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 4  調用今日詩詞（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> subtitle 會先顯示 <span class="built_in">source</span> , 再顯示 sub 的內容</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="built_in">source</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果有英文逗號<span class="string">&#x27; , &#x27;</span>,請使用轉義字元 &amp;<span class="comment">#44;</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果有英文雙引號<span class="string">&#x27; &quot; &#x27;</span>,請使用轉義字元 &amp;quot;</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  sub: </span><br></pre></td></tr></table></figure><h3 id="PWA">PWA</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-offline --save</span><br></pre></td></tr></table></figure><h3 id="字数统计">字数统计</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wordcount (字數統計)</span></span><br><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><h3 id="图片放大模式">图片放大模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lightbox (圖片大圖查看模式)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can only choose one, or neither (只能選擇一個 或者 兩個都不選)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> medium-zoom</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line">medium_zoom: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> fancybox</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://fancyapps.com/fancybox/3/</span></span><br><span class="line">fancybox: true</span><br></pre></td></tr></table></figure><h3 id="弹窗">弹窗</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Snackbar (Toast Notification 彈窗)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> position 彈窗位置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可選 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line">snackbar:</span><br><span class="line">  enable: true</span><br><span class="line">  position: bottom-left</span><br><span class="line">  bg_light: &#x27;#ffc0cb&#x27; # The background color of Toast Notification in light mode</span><br><span class="line">  bg_dark: &#x27;#121212&#x27; # The background color of Toast Notification in dark mode</span><br></pre></td></tr></table></figure><h3 id="修改背景">修改背景</h3><ol><li><p>引入一个新的 CSS 文件</p></li><li><p>使用 js 文件</p><p>但是会在一定程度上延缓网页的加载时间，且修改复杂</p></li></ol><p><strong>下面使用第一种方案</strong></p><ol><li><p>\themes\hexo-theme-butterfly\source\css<br>目录下新建 <strong>background.css</strong></p><blockquote><p>或者你可以在 css 目录下创建一个自己写的新文件夹如（mycss），然后在该目录下创建<strong>background.css</strong></p></blockquote></li><li><p>编辑<br>butterfly 主题的背景 div 的 id 是 <strong>web_bg</strong></p><ul><li>修改为图片</li></ul> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">  /* 背景图像的地址（url括号里）  */</span><br><span class="line">  background: url();</span><br><span class="line">  /* 背景图像不重复 */</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  /* 背景图像大小 */</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background-repeat 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-repeat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background-size 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size</span></span><br></pre></td></tr></table></figure><ul><li>修改为渐变背景（如下几种）</li></ul> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 蓝红色渐变</span><br><span class="line">#web_bg &#123;</span><br><span class="line">  &#x2F;* webkit内核 5.1 - 6.0 *&#x2F;</span><br><span class="line">  background: -webkit-linear-gradient(left, red, blue);</span><br><span class="line">  &#x2F;* Opera 11.1 - 12.0 *&#x2F;</span><br><span class="line">  background: -o-linear-gradient(right, red, blue);</span><br><span class="line">  &#x2F;* Firefox 3.6 - 15 *&#x2F;</span><br><span class="line">  background: -moz-linear-gradient(right, red, blue);</span><br><span class="line">  &#x2F;* 标准的语法 *&#x2F;</span><br><span class="line">  background: linear-gradient(to right, red, blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">    background: linear-gradient(102.7deg,#fddaff 8.2%,#dfadfc 19.6%,#adcdfc 36.8%,#adfcf4 73.2%,#caf8d0 90.9%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 紫蓝色渐变</span></span><br><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">    background: linear-gradient(to right bottom, rgb(0, 255, 240), rgb(92, 159, 247) 40%, rgb(211, 34, 255) 80%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 图片滤镜渐变</span></span><br><span class="line"><span class="meta">#</span><span class="bash">web_bg&#123;</span></span><br><span class="line">    background-image: url(&quot;https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png&quot;), linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)), url(&quot;https://ae01.alicdn.com/kf/H21b5f6b8496141a1979a33666e1074d9x.jpg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更多的渐变网址</p><p><a href="https://webgradients.com/">https://webgradients.com/</a></p><p><a href="https://www.grabient.com/">https://www.grabient.com/</a></p></blockquote></li><li><p>最后将文件引入</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Inject</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Insert the code to head (before <span class="string">&#x27;&lt;/head&gt;&#x27;</span> tag) and the bottom (before <span class="string">&#x27;&lt;/body&gt;&#x27;</span> tag)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/mycss/background.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221120248.png" alt="image-20210221120247170"></p></li></ol><blockquote><p>如果没有生效的话修改如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># 主题配置文件</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># Website Background (設置網站背景)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">background: <span class="string">&quot;#efefef&quot;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="修改页脚">修改页脚</h3><blockquote><p>同样的和上面修改背景一样，新建一个css文件如我的</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221122105.png" alt="image-20210221122103774"></p><blockquote><p>下面在某博主上面看到两种样式</p></blockquote><ul><li><p>渐变</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/* 页脚footer */</span><br><span class="line">/* 渐变色滚动动画 */</span><br><span class="line">@-webkit-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-moz-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">footer &#123;</span></span><br><span class="line">    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);</span><br><span class="line">    background-size: 400% 400%;</span><br><span class="line">    -webkit-animation: Gradient 10s ease infinite;</span><br><span class="line">    -moz-animation: Gradient 10s ease infinite;</span><br><span class="line">    animation: Gradient 10s ease infinite;</span><br><span class="line">    -o-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    border-top-left-radius: 10px;</span><br><span class="line">    border-top-right-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">footer:before &#123;</span></span><br><span class="line">    background-color: rgba(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>半透明</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">footer &#123;</span></span><br><span class="line">    background: rgba(255,255,255,.15);</span><br><span class="line">    color: #000;</span><br><span class="line">    border-top-right-radius: 20px;</span><br><span class="line">    border-top-left-radius: 20px;</span><br><span class="line">    backdrop-filter: saturate(100%) blur(5px)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer::before &#123;</span></span><br><span class="line">    background: rgba(255,255,255,.15)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer <span class="comment">#footer-wrap &#123;</span></span></span><br><span class="line">    color: var(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer <span class="comment">#footer-wrap a &#123;</span></span></span><br><span class="line">    color: var(--font-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>然后引入即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221122344.png" alt="image-20210221122343300"></p><h3 id="手机侧边栏默认不展开">手机侧边栏默认不展开</h3><blockquote><p>新建 js 文件即可，然后引入</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221124518.png" alt="image-20210221124517652"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221124539.png" alt="image-20210221124538405"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var mobile_sidebar_menus = document.getElementById(&quot;mobile-sidebar-menus&quot;);</span><br><span class="line">var menus_item_child = mobile_sidebar_menus.getElementsByClassName(</span><br><span class="line">    &quot;menus_item_child&quot;</span><br><span class="line">);</span><br><span class="line">var menus_expand = mobile_sidebar_menus.getElementsByClassName(&quot;menus-expand&quot;);</span><br><span class="line">for (var i = 0; i &lt; menus_item_child.length; i++) &#123;</span><br><span class="line">    menus_item_child[i].style.display = &quot;none&quot;;</span><br><span class="line">    menus_expand[i].className += &quot; menus-closed&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入clustrmaps访问者地图">加入clustrmaps访问者地图</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221175024.png" alt="image-20210221175020256"></p><blockquote><p><a href="https://clustrmaps.com/">clustrmaps.com</a></p><p>注册账号或直接登录</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221175157.png" alt="image-20210221175156007"></p><blockquote><p>填写你的网址然后会看到代码，一种是JS一种是HTML的，这里我选用HTML的</p></blockquote><p>先在主题配置文件加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">card_maps: true</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221181520.png" alt="image-20210221181519652"></p><p>然后在</p><p>themes\hexo-theme-butterfly\layout\includes\widget</p><p>路径下创建一个文件 如 <strong>card_maps.pug</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-map</span><br><span class="line">    .card-content</span><br><span class="line">        .item-headline</span><br><span class="line">            i.fa.fa-map-marker(aria-hidden=&quot;true&quot;)</span><br><span class="line">            span= _p(&#x27;足迹&#x27;)</span><br><span class="line">    # 这里是你复制过来的代码</span><br><span class="line">    &lt;a href=&#x27;https://clustrmaps.com/site/1bgca&#x27;  title=&#x27;Visit tracker&#x27;&gt;&lt;img src=&#x27;//clustrmaps.com/map_v2.png?cl=ffffff&amp;w=300&amp;t=tt&amp;d=Ti7plTQaKk8zjpyoUXfK29uCDrIzNldAuvoLvSLy1bU&amp;ct=ffffff&amp;co=2d78ad&#x27;/&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221181857.png" alt="image-20210221181856529"></p><p>然后在 widget/ 目录下找得到 index.png 加上下面代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_maps</span><br><span class="line">    !=partial(&#x27;includes/widget/card_maps&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210221182140.png" alt="image-20210221182139515"></p><h3 id="添加评论">添加评论</h3><ol><li><p>首先去 leadcloud 国际版注册一个账号<a href="https://leancloud.app/">Leadcloud国际版</a> 。</p></li><li><p>然后创建应用</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222103608.png" alt="image-20210222103607671"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222103806.png" alt="image-20210222103804648"></p></li><li><p>创建class</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104008.png" alt="image-20210222104007668"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104130.png" alt="image-20210222104129170"></p></li><li><p>找到用户栏添加用户</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104218.png" alt="image-20210222104217236"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104320.png" alt="image-20210222104319685"></p></li><li><p>然后修改访问权限</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104638.png" alt="image-20210222104636441"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104744.png" alt="image-20210222104743842"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222104849.png" alt="image-20210222104848202"></p><blockquote><p>把 _User 的权限全部设置为指定用户但不添加，就是为了没有用户可以修改，防止别人通过 id 和 key 篡改我们用户数据</p><p>即上一步添加用户就是这么个作用</p><p>Leancloud的配置就告一段落了</p></blockquote></li><li><p>然后在主题配置文件中填写 Leancloud 信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> valine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  appId:  # leancloud application app id</span><br><span class="line">  appKey:  # leancloud application app key</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: monsterid # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: zh-CN # i18n: zh-CN/zh-TW/en/ja</span><br><span class="line">  placeholder: Please leave your footprints # valine comment input placeholder (like: Please leave your footprints)</span><br><span class="line">  guest_info: nick,mail # valine comment header info (nick/mail/link)</span><br><span class="line">  recordIP: false # Record reviewer IP</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  bg: # valine background</span><br><span class="line">  emojiCDN: # emoji CDN</span><br><span class="line">  enableQQ: true # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">  requiredFields: nick,mail # required fields (nick/mail)</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最后不要忘记打开这个</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222165836.png" alt="image-20210222165835011"></p></li></ol><h3 id="文章加密">文章加密</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>然后在文章的头部写上，如下例子</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210222165511.png" alt="image-20210222165510117"></p><h3 id="顶部标签页顶部图片">顶部标签页顶部图片</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识汇编</title>
      <link href="2021/02/18/%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96/"/>
      <url>2021/02/18/%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h1>初识汇编</h1><h2 id="概述">概述</h2><p>语言</p><p>进制</p><p>进制如何运算</p><p>二进制（量子计算）</p><p>数据宽度</p><p>有符号数和无符号数</p><p>原码反码补码</p><p>位运算</p><p>位运算计算</p><p>汇编（OD）</p><p>寄存器</p><p>内存</p><p>汇编指令</p><p>内存复制</p><p>堆栈指令</p><p>汇编如何写函数</p><p>堆栈传参</p><p>堆栈平衡</p><p>外挂</p><h2 id="语言">语言</h2><p>什么是机器语言？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目前主流的电子计算机</span></span><br><span class="line">状态：0 1</span><br><span class="line">加0100 0000</span><br><span class="line">减0100 1000</span><br><span class="line">乘0100 1000 0100 1000</span><br><span class="line">除0100 1000 1100 1000</span><br></pre></td></tr></table></figure><p>上述为机器语言，通过助记符 -&gt; 得到汇编语言，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加INC-编译器-&gt; 0100 0000</span><br><span class="line">减DEC 0100 1000</span><br><span class="line">乘MUL 0100 1000 0100 1000</span><br><span class="line">除DIV 0100 1000 1100 1000</span><br></pre></td></tr></table></figure><p>汇编只是用于助记机器语言</p><h2 id="进制">进制</h2><blockquote><p>测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一进制 1 - 20</span></span><br><span class="line">1</span><br><span class="line">1 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">.........</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三进制</span></span><br><span class="line">012</span><br><span class="line">101112</span><br><span class="line">202122</span><br><span class="line">100101102</span><br><span class="line">110111112</span><br><span class="line">120121122</span><br><span class="line">200201202</span><br><span class="line">210211212</span><br><span class="line">220221222</span><br><span class="line">100010011002</span><br><span class="line">101010111012</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 七进制</span></span><br><span class="line">0123456</span><br><span class="line">10111213141516</span><br><span class="line">20212223242526</span><br><span class="line">3031...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加密解密：进制的加密</p><p>数字量一大，总有规律</p><blockquote><p>进制的运算</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 八进制计算</span></span><br><span class="line">2 + 3 = 5</span><br><span class="line">2 * 3 = 6</span><br><span class="line">4 + 5 = 11</span><br><span class="line">4 * 5 = 24</span><br><span class="line"></span><br><span class="line">277 + 333 = 632</span><br><span class="line">276 * 54 = 20250</span><br><span class="line">273 - 54 = 217</span><br><span class="line">234 / 4 = 47</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论：无论什么进制，本事都有一套完美的运算体系，都可以通过列表的方式计算出来</p><blockquote><p>二进制</p></blockquote><p>计算机使用二进制 0 1 转态！ 电子！</p><p>物理极限：摩尔定理！追求语言的极限！并发语言！软操作！</p><p><strong>量子计算机</strong>：一旦民用，目前的安全系统不再有用，爆破几分钟的事</p><p>可以实现量子计算的机器</p><p>传统计算机：集成电路：0 1 硅晶片</p><p>量子计算机的单位：昆比特</p><p>光子：正交偏振方向</p><p>磁场：电子的自旋方向</p><p>21世纪计算力快到尽头了</p><p>量子计算机-&gt;提高计算机的计算力</p><p>量子比特，量子叠加态，量子纠缠，量子并行原理</p><p>为什么要学习理解二进制？</p><p>寄存器、内存、位！底层的每一个位都是有含义的。</p><p>汇编高级：了解程序深层！操作系统的内核</p><h2 id="数据宽度">数据宽度</h2><p>C C++ Java 都需要定义数据的类型。计算机底层需要我们给这些数据定义宽度</p><p>位0 1<br>字节0 - 0XFF<br>字0 - 0XFFFF<br>双字0 - 0XFFFFFFFF</p><h2 id="有符号数和无符号数">有符号数和无符号数</h2><p>数据都是有宽度的，每个数据代表什么意思？</p><p>规则</p><p><strong>二进制解码增加一个规则</strong></p><ul><li><p>无符号数规则</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001 1010十六进制：0x9A十进制：154</span><br></pre></td></tr></table></figure></li><li><p>有符号数规则</p><p>最高位是符号位：1（负数）0（正数）</p></li></ul><h2 id="原码反码补码">原码反码补码</h2><p><strong>编码规则</strong> ：有符号位的编码规则</p><ul><li>原码：最高位是符号位</li><li>反码：<ul><li>正数：反码和原码相同</li><li>负数：符号位一定是1，其余对原码取反</li></ul></li><li>补码：<ul><li>正数：补码和原码相同</li><li>负数：符号位一定是1，反码 +1</li></ul></li></ul><blockquote><p>例子</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果是正数，都是一样的</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码0000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码0000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码0000 0001</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是负数</span></span><br><span class="line">-1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码1000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码1111 1110</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码1111 1111</span></span><br><span class="line">-7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码1000 0111</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码1111 1000</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码1111 1001</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个二进制数，需要了解它是有符号数还是无符号数</p><p>如一个 32 位机器</p><p>FFFF FFFF</p><ul><li>有符号表示 -1</li><li>无符号表示 4,294,967,295</li></ul><h2 id="位运算">位运算</h2><p>2 * 8 最高效的计算方式   -&gt;  2&lt;&lt;3</p><p>很多调试器，需要通过位来判断 CPU 状态</p><ol><li><p>与运算（and &amp;）串行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">1001 0000</span><br></pre></td></tr></table></figure></li><li><p>或运算（or |）并行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">1111 1001</span><br></pre></td></tr></table></figure></li><li><p>异或运算（xor ^）不同为1</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">0110 1001</span><br></pre></td></tr></table></figure></li><li><p>非运算（单目运算符 not ~）</p><p>0 就是 1，1 就是 0</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1101 1000</span><br><span class="line">0010 0111</span><br></pre></td></tr></table></figure></li><li><p>位运算（移动位，左移 * 2，右移 / 2）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 00011</span><br><span class="line">0000 00102</span><br><span class="line">0000 01004</span><br><span class="line">0000 10008</span><br></pre></td></tr></table></figure><p>左移：shl&lt;&lt;</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 # 所以二进制位全部左移若干位，高位丢弃，低位补0</span><br></pre></td></tr></table></figure><p>右移：shr&gt;&gt;</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 # 所以二进制位全部左移若干位，低位丢弃，高位补补0或1（正数补0，负数补1）</span><br></pre></td></tr></table></figure></li></ol><h2 id="位运算的加减乘除">位运算的加减乘除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 计算机怎么操作 4 + 5？</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">----------计算机不会直接加</span><br><span class="line">0000 1001</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是计算机怎么计算的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一步， 异或：如果没有进位，异或直接就可以出结果</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">---------</span><br><span class="line">0000 0001</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：与运算（判断进位，如果与运算结果为0，则没有进位）</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">---------</span><br><span class="line">0000 0100</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步，将与运算的结果，左移一位</span></span><br><span class="line">0000 1000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第四步：异或</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">---------</span><br><span class="line">0000 1001</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第五步：与运算（判断进位，如果与运算结果为0，没有进位）</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">---------</span><br><span class="line">0000 0000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所以最终结果就是与运算为0的上一个异或运算的值</span></span><br></pre></td></tr></table></figure><h2 id="寄存器">寄存器</h2><p>寄存器：</p><p>存储数据：CPU -&gt; 内存 -&gt; 硬盘</p><p>32位 CPU：81632</p><p>64位 CPU：8163264</p><p><strong>通用寄存器</strong></p><p>32位的通用寄存器只有 8 个</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210209165542.png" alt="image-20210209165541692"></p><p>存值的范围0 - FFFFFFFF</p><p>对于二进制来说，直接修改值</p><p><strong>计算机如果像寄存器存值</strong></p><p><strong>mov 指令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov 存的地址,存的数</span><br><span class="line">mov 存的地址1,存的地址1</span><br></pre></td></tr></table></figure><p>可以将数字写入寄存器，可以将寄存器中的值写到寄存器</p><p><strong>不同的寄存器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">32位16位8位</span><br><span class="line">EAX AX AL</span><br><span class="line">ECX CX CL</span><br><span class="line">EDX DX DL</span><br><span class="line">EBX BX BL</span><br><span class="line">ESP SP AH</span><br><span class="line">EBP BP CH</span><br><span class="line">ESI SI DH</span><br><span class="line">EDI DI BH</span><br></pre></td></tr></table></figure><p>8位：L低8位，H高8位</p><p>除了这些通用寄存器之外，那么其他的寄存器都有自己特定的功能！</p><h2 id="内存">内存</h2><p>寄存器很小，不够用，所以把数据放到内存中</p><p>每个应用程序都有4GB的内存空间，空头支票</p><p>程序真正运行的时候，才会用到物理内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1B = 8bit</span><br><span class="line">1kb = 1024B</span><br><span class="line">1MB = 1024KB</span><br><span class="line">1GB = 1024MB</span><br><span class="line">4GB = 4096M = 4096 * 1024 * 1024B = 2^(12+10+10) = 2^32</span><br></pre></td></tr></table></figure><p><strong>内存地址</strong></p><p>存一个数：占用的大小，数据宽度！存到哪里？</p><p>计算机中内存地址很多，空间很大，每个空间分配一个地址，名字</p><p>如32位系统：0x00000000 - 0xFFFFFFFF</p><p>32位：寻址能力！4GB</p><p>FFFFFFFF + 1 = 100000000，最大的值</p><p>位是怎么限制内存大小的</p><p>100000000 内存地址 * 8 = 位：800000000</p><p>转换为10进制 /8 ：4,294,967,296字节</p><p>按照规则 /1024 ，最终即为 4GB</p><p><strong>内存如何存值</strong></p><p>数据宽度：byteworddwrod</p><p>不是任意的地址都可以写东西，申请使用的。只有程序申请过的内存才可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 汇编如何向内存中写值</span></span><br><span class="line">mov 数据宽度 内存地址,值</span><br><span class="line">mov byte/word/dword/qword,-1</span><br><span class="line"></span><br><span class="line">eg:mov byte ptr ds:[0xFFFFFFFF],1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 传递的值的大小一定要和数据宽度相等</span></span><br></pre></td></tr></table></figure><p><strong>内存有多种写法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds:[0x0090FFFF+4]内存地址偏移</span><br><span class="line">ds:[eax]寄存器</span><br><span class="line">ds:[eax+4]寄存器偏移</span><br><span class="line"><span class="meta">#</span><span class="bash"> 数组[]</span></span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;]数组</span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;+4]数组偏移</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210511213009.png" alt="image-20210511213009527"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/minghuifan/image/raw/master/20210511213725.png" alt="image-20210511213717044"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-个人记录</title>
      <link href="2021/02/18/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95%EF%BC%89/"/>
      <url>2021/02/18/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><h1><strong>Git</strong> 使用</h1><blockquote><h3 id="Git是目前世界上最先进的分布式版本控制系统。"><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></h3></blockquote><hr><h2 id="一、安装方面">一、安装方面</h2><ol><li>安装 git</li></ol><p>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><p>**Git Bash：**Unix与Linux风格的命令行，使用最多，推荐最多</p><p>**Git CMD：**Windows风格的命令行</p><p><strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><blockquote><p><strong>基本 Linux 命令</strong></p><ul><li><p>cd ：改变目录。</p></li><li><p>cd . . 回退到上一个目录，直接 cd 进入默认目录</p></li><li><p>pwd : 显示当前所在的目录路径。</p></li><li><p>ls(ll):  都是列出当前目录中的所有文件, ll更为详细。</p></li><li><p>touch :文件</p></li><li><p>vi ：新建文件并编辑</p></li><li><p>rm:  删除文件</p></li><li><p>mkdir:  新建文件夹。</p></li><li><p>rm -r :  删除文件夹</p></li><li><p>mv 移动文件/ 文件重命名，必须保证文件和目标文件夹在同一目录下。</p></li><li><p>reset：重新初始化终端/清屏。</p></li><li><p>clear：清屏。</p></li><li><p>history：查看命令历史。</p></li><li><p>help：帮助。</p></li><li><p>exit：退出。</p></li><li><p>#：表示注释</p></li></ul></blockquote><ol start="2"><li><strong>Git</strong> 配置</li></ol><p>查看配置：<strong>git config -l</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208163207.png" alt="image-20210208163206086"></p><p>查看不同级别的配置文件：</p><ul><li>系统 config ：<strong>git config --system --list</strong></li><li>用户 <strong>global</strong> ：<strong>git config --global --list</strong></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208163639.png" alt=""></p><pre><code>git 相关配置文件：- Git\etc\gitconfig ：Git 安装目录下的 gitconfig–system 系统级别- C:\Users\用户名\.gotconfig ：只适用于当前登录用户的配置 –global 全局</code></pre><ol start="4"><li><p><strong>设置用户名与邮箱</strong></p><ul><li>法一单独配置：引号要不要都可以 如：<br>git config --global <a href="http://user.name">user.name</a> “MingHuifan”<br>git config --global user.email “<a href="mailto:xxxxx@qq.com">xxxxx@qq.com</a>”</li><li>法二文件写：<br>git config --global --edit  会进入.gitconfig文件编辑，把name和email写进去 :wq 退出并保存<br><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208165404.png" alt="image-20210208165359679"></li></ul></li><li><p>生成 <strong>SSH</strong> 公钥</p><p>设置本机绑定 SSH 公钥，实现免密登录</p><p>在 <strong>C:\Users\用户名\ .ssh 目录</strong></p><p>如果没有则用：<strong>ssh -keygen</strong> 生成，一路回车即可</p><p>然后进去 <strong>C:\Users\用户名\ .ssh</strong> 目录 有一个 <strong>.pub</strong> 后缀的文件，这是公钥</p></li><li><p>在 <strong>gitee</strong> 设置公钥，github 一样</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208175338.png" alt="image-20210208175337489"></p></li></ol><blockquote><p><strong>然后就是如何使用 git push 到 github 或者 gitee 上了</strong></p></blockquote><h2 id="二、操作方面">二、操作方面</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208223330.png" alt="image-20210208223324255"></p><hr><p>前序工作已经完成，接下来是如何操作</p><ol><li><p>在 <strong>github</strong> 上创建一个仓库（<strong>Repository</strong>）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://gitee.com/MingHuifan/image/raw/master/20210208175930.png" alt="image-20210208175929149"></p></li><li><p>然后克隆到本地</p><p><img src= "/img/loading2.gif" data-lazy-src="C:%5CUsers%5CFanMingHui%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210208180153826.png" alt="image-20210208180153826"></p></li><li><p>然后下载到你的本地仓库</p><ul><li><p>右键选择 <strong>git Bash Here</strong>  —&gt;  <strong>git clone + [url]</strong></p><p>然后就会有一个 <strong>.git</strong> 的目录</p></li><li><p>可以下载到你的项目路径中，然后就可以用命令操作了</p></li><li><p>或者复制到其他的路径中，<strong>.git</strong>文件绑定了你的远程仓库，所以只要复制到任何地方都可以</p><ul><li>考虑一种情况：我从远程仓库下载并保存在 E:\A\ 目录下那么 A 目录下就有 .git （该文件绑定了一个远程仓库），我就可以操作本地仓库 A ，然后我在把 .git 文件复制到 E:\B\ 目录下，那么我是不是可以将两个的文件叠加的上床到远程仓库中<br>其实并不能，并且两个路径不可以同时使用 <strong>git</strong> ，只能使用一个文件路径下的 <strong>git</strong></li></ul></li></ul></li><li><p>几个命令</p></li></ol><blockquote><ul><li>git add .</li><li>git commit -m 说明</li><li>git push</li><li>git pull</li><li>git rm -r –cached filePath : 清除缓存-指定路径</li><li>git rm -r –cached . ：清除缓存-清除全部缓存</li><li>git clone</li><li>git remote add origin SSH地址：链接远程仓库地址</li><li>git remote remove origin：移除远程仓库地址</li><li>git remove -v：查看远程仓库地址</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
