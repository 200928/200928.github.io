<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ArchLinux安装Mariadb</title>
      <link href="2022/04/02/ArchLinux%E5%AE%89%E8%A3%85MySQL8/"/>
      <url>2022/04/02/ArchLinux%E5%AE%89%E8%A3%85MySQL8/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p><strong>注意：</strong> 自2013年起，MariaDB就被Arch Linux当作官方默认的MySQL实现[<a href="https://archlinux.org/news/mariadb-replaces-mysql-in-repositories/">1]</a>。Oracle MySQL 已被移动到 <a href="https://wiki.archlinux.org/title/AUR">AUR</a>，推荐所有用户<a href="https://wiki.archlinux.org/title/MariaDB_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#%E7%94%B1_Oracle_MySQL_%E5%8D%87%E7%BA%A7%E5%88%B0_MariaDB">升级</a>到 MariaDB。参见<a href="https://archlinux.org/news/mariadb-replaces-mysql-in-repositories/">这条公告</a>。<a href="https://wiki.archlinux.org/title/MariaDB_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29">ArchWiki</a></p></blockquote><h1 id="安装Mariadb"><a href="#安装Mariadb" class="headerlink" title="安装Mariadb"></a>安装Mariadb</h1><ol><li><p>安装<code>sudo pacman -S mariadb</code></p></li><li><p>初始化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mariadb-install-db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span></span><br></pre></td></tr></table></figure><blockquote><p>安装 <a href="https://archlinux.org/packages/?name=mariadb">mariadb</a> 软件包之后，你必须在启动 <code>mariadb.service</code> <strong>之前</strong>运行下面这条命令：</p></blockquote><p>输出信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Installing MariaDB/MySQL system tables in &#x27;/var/lib/mysql&#x27; ...</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">To start mysqld at boot time you have to copy</span><br><span class="line">support-files/mysql.server to the right place for your system</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Two all-privilege accounts were created.</span><br><span class="line">One is root@localhost, it has no password, but you need to</span><br><span class="line">be system &#x27;root&#x27; user to connect. Use, for example, sudo mysql</span><br><span class="line">The second is mysql@localhost, it has no password either, but</span><br><span class="line">you need to be the system &#x27;mysql&#x27; user to connect.</span><br><span class="line">After connecting you can set the password, if you would need to be</span><br><span class="line">able to connect as any of these users with a password and without sudo</span><br><span class="line"></span><br><span class="line">See the MariaDB Knowledgebase at https://mariadb.com/kb</span><br><span class="line"></span><br><span class="line">You can start the MariaDB daemon with:</span><br><span class="line">cd &#x27;/usr&#x27; ; /usr/bin/mysqld_safe --datadir=&#x27;/var/lib/mysql&#x27;</span><br><span class="line"></span><br><span class="line">You can test the MariaDB daemon with mysql-test-run.pl</span><br><span class="line">cd &#x27;/usr/mysql-test&#x27; ; perl mysql-test-run.pl</span><br><span class="line"></span><br><span class="line">Please report any problems at https://mariadb.org/jira</span><br><span class="line"></span><br><span class="line">The latest information about MariaDB is available at https://mariadb.org/.</span><br><span class="line"></span><br><span class="line">Consider joining MariaDB&#x27;s strong and vibrant community:</span><br><span class="line">https://mariadb.org/get-involved/</span><br></pre></td></tr></table></figure></li><li><p>启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>配置命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mysql_secure_installation</span></span><br></pre></td></tr></table></figure><p>输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ sudo mysql_secure_installation</span><br><span class="line"></span><br><span class="line">NOTE: RUNNING ALL PARTS OF THIS SCRIPT IS RECOMMENDED FOR ALL MariaDB</span><br><span class="line">      SERVERS IN PRODUCTION USE!  PLEASE READ EACH STEP CAREFULLY!</span><br><span class="line"></span><br><span class="line">In order to log into MariaDB to secure it, we&#x27;ll need the current</span><br><span class="line">password for the root user. If you&#x27;ve just installed MariaDB, and</span><br><span class="line">haven&#x27;t set the root password yet, you should just press enter here.</span><br><span class="line"></span><br><span class="line">Enter current password for root (enter for none):</span><br><span class="line">OK, successfully used password, moving on...</span><br><span class="line"></span><br><span class="line">Setting the root password or using the unix_socket ensures that nobody</span><br><span class="line">can log into the MariaDB root user without the proper authorisation.</span><br><span class="line"></span><br><span class="line">You already have your root account protected, so you can safely answer &#x27;n&#x27;.</span><br><span class="line"></span><br><span class="line">Switch to unix_socket authentication [Y/n]</span><br><span class="line">Enabled successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">You already have your root account protected, so you can safely answer &#x27;n&#x27;.</span><br><span class="line"></span><br><span class="line">Change the root password? [Y/n] y</span><br><span class="line">New password:</span><br><span class="line">Re-enter new password:</span><br><span class="line">Password updated successfully!</span><br><span class="line">Reloading privilege tables..</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">By default, a MariaDB installation has an anonymous user, allowing anyone</span><br><span class="line">to log into MariaDB without having to have a user account created for</span><br><span class="line">them.  This is intended only for testing, and to make the installation</span><br><span class="line">go a bit smoother.  You should remove them before moving into a</span><br><span class="line">production environment.</span><br><span class="line"></span><br><span class="line">Remove anonymous users? [Y/n]</span><br><span class="line"> ... Success!</span><br><span class="line"> </span><br><span class="line">Normally, root should only be allowed to connect from &#x27;localhost&#x27;.  This</span><br><span class="line">ensures that someone cannot guess at the root password from the network.</span><br><span class="line"></span><br><span class="line">Disallow root login remotely? [Y/n]</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">By default, MariaDB comes with a database named &#x27;test&#x27; that anyone can</span><br><span class="line">access.  This is also intended only for testing, and should be removed</span><br><span class="line">before moving into a production environment.</span><br><span class="line"></span><br><span class="line">Remove test database and access to it? [Y/n]</span><br><span class="line"> - Dropping test database...</span><br><span class="line"> ... Success!</span><br><span class="line"> - Removing privileges on test database...</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Reloading the privilege tables will ensure that all changes made so far</span><br><span class="line">will take effect immediately.</span><br><span class="line"></span><br><span class="line">Reload privilege tables now? [Y/n]</span><br><span class="line"> ... Success!</span><br><span class="line"></span><br><span class="line">Cleaning up...</span><br><span class="line"></span><br><span class="line">All done!  If you&#x27;ve completed all of the above steps, your MariaDB</span><br><span class="line">installation should now be secure.</span><br><span class="line"></span><br><span class="line">Thanks for using MariaDB!</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>连接Mariadb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mysql -u root -p</span><br><span class="line">Enter password:</span><br><span class="line">Welcome to the MariaDB monitor.  Commands end with ; or \g.</span><br><span class="line">Your MariaDB connection id is 3</span><br><span class="line">Server version: 10.7.3-MariaDB Arch Linux</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.</span><br><span class="line"></span><br><span class="line">Type &#x27;help;&#x27; or &#x27;\h&#x27; for help. Type &#x27;\c&#x27; to clear the current input statement.</span><br><span class="line"></span><br><span class="line">MariaDB [(none)]&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建用户，用户名后面带的<code>@&#39;%&#39;</code>表示可以任何主机连接，如需指定主机比如<code>@192.168.1.101``@localhost</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [mysql]&gt; create user user_name@&#x27;%&#x27; identified by &#x27;passwd&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者直接插入表数据</span></span><br><span class="line">MariaDB [mysql]&gt; insert into mysql.user(Host,User,Password) values(&quot;localhost&quot;,&quot;user_name &quot;,password(&quot;passwd&quot;));</span><br></pre></td></tr></table></figure><p>查看<code>mysql.user</code>表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; select user,host from mysql.user;</span><br><span class="line">+-------------+-----------+</span><br><span class="line">| User        | Host      |</span><br><span class="line">+-------------+-----------+</span><br><span class="line">| minghui     | %         |</span><br><span class="line">| mariadb.sys | localhost |</span><br><span class="line">| mysql       | localhost |</span><br><span class="line">| root        | localhost |</span><br><span class="line">+-------------+-----------+</span><br><span class="line">4 rows in set (0.002 sec)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>如果需要 root 用户远程连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; UPDATE mysql.global_priv SET Host=&#x27;%&#x27; WHERE User=&#x27;root&#x27;;</span><br><span class="line">MariaDB [(none)]&gt; flush privileges;</span><br><span class="line">Query OK, 0 rows affected (0.001 sec)</span><br></pre></td></tr></table></figure><p>然后重启服务<code>systemctl restart mariadb</code></p></li><li></li></ol><h1 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h1><blockquote><p>MySQL 默认禁用客户端自动补全功能。要在整个系统中启用它，编辑 <code>/etc/my.cnf.d/mysql-clients.cnf</code>，在<code>mysql</code>下 添加 <code>auto-rehash</code>。注意：不要将<code>auto-rehash</code>写在<code>mysqld</code>下，下次客户端启动时就会启用自动补全。</p></blockquote><h1 id="安装mycli"><a href="#安装mycli" class="headerlink" title="安装mycli"></a>安装mycli</h1><ol><li><p><code>pip3 install mycli</code></p><p>安装后警告，说我的不再环境变量中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WARNING: The script tabulate is installed in &#x27;/home/minghui/.local/bin&#x27; which is not on PATH.</span><br><span class="line">Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.</span><br><span class="line">WARNING: The script sqlformat is installed in &#x27;/home/minghui/.local/bin&#x27; which is not on PATH.</span><br><span class="line">Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.</span><br><span class="line">WARNING: The script mycli is installed in &#x27;/home/minghui/.local/bin&#x27; which is not on PATH.</span><br><span class="line">Consider adding this directory to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.</span><br></pre></td></tr></table></figure><p>添加至环境变量，我用的是ZSH，所以直接编辑<code>~/.zshrc</code>文件，后面添加<code>export PATH=/home/minghui/.local/bin/:$PATH</code></p></li><li><p>连接<code>mycli -u user_name -h user_host my_database</code>或<code>mycli -u user_name</code></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle-安全管理</title>
      <link href="2022/03/25/Oracle11g%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9AOracle-%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/"/>
      <url>2022/03/25/Oracle11g%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9AOracle-%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>掌握oracle数据库安全管理的基本方法</p><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>数据库 orcl  用户名 sys 密码 oracle； 用户名 scott 密码 tiger</p><ol><li><p>创建数据库用户usera，口令usera，默认表空间users001，默认临时表空间temp001，在users001上的配额为50M，初始账户锁定，口令为过期状态。</p></li><li><p>创建数据库用户userb，口令userb，默认表空间为example，配额100M。</p></li><li><p>使用usera连接到数据库orcl，创建表t2，表中数据与scott用户的emp表中数据相同。在t2表上的第一个字段上创建唯一性索引。</p></li><li><p>将usera上的现有权限转授给userb。</p></li><li><p>禁止usera将获得的权限再转授给其他用户。</p></li><li><p>创建角色rolea和roleb。将create table，scott.emp上的insert和update权限授予rolea。将connect，resource角色授予roleb。</p></li><li><p>将角色rolea和roleb授予用户userb。</p></li><li><p>查询usera和userb用户所具有的系统全新和对象权限信息。</p></li><li><p>创建概要文件，限定用户最长会话时间为60分钟，最长连续空闲时间为25分钟，口令有效期30天，连续登录5次失败则锁定账户。将此概要文件指定给用户usera和userb。</p></li></ol><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><ol><li><p>创建数据库用户usera，口令usera，默认表空间users001，默认临时表空间temp001，在users001上的配额为50M，初始账户锁定，口令为过期状态。P123</p><ul><li>先创建表空间user001,大小为10M，每个分区大小为512K<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE users001 </span><br><span class="line">DATAFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/users001.DBF&#x27;</span> SIZE <span class="number">10</span>M </span><br><span class="line">EXTENT MANAGEMENT <span class="keyword">LOCAL</span> UNIFORM SIZE <span class="number">512</span>K;</span><br></pre></td></tr></table></figure></li><li>再创建临时表空间temp001，大小为50M，每个分区大小为10M<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY TABLESPACE temp001 </span><br><span class="line">TEMPFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/temp001.DBF&#x27;</span> SIZE <span class="number">50</span>M </span><br><span class="line">EXTENT MANAGEMENT <span class="keyword">LOCAL</span> UNIFORM SIZE <span class="number">10</span>M;</span><br></pre></td></tr></table></figure></li><li>再创建数据库用户usera<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> usera IDENTIFIED <span class="keyword">BY</span> usera</span><br><span class="line"><span class="keyword">DEFAULT</span> TABLESPACE users001</span><br><span class="line">TEMPORARY TABLESPACE temp001</span><br><span class="line">QUOTA <span class="number">50</span>M <span class="keyword">ON</span> userS001</span><br><span class="line">ACCOUNT LOCK</span><br><span class="line">PASSWORD EXPIRE;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建数据库用户userb，口令userb，默认表空间为example，配额100M。P123</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> userb IDENTIFIED <span class="keyword">BY</span> userb</span><br><span class="line"><span class="keyword">DEFAULT</span> TABLESPACE example</span><br><span class="line">QUOTA <span class="number">100</span>M <span class="keyword">ON</span> example</span><br></pre></td></tr></table></figure></li><li><p>使用usera连接到数据库orcl，创建表t2，表中数据与scott用户的emp表中数据相同。在t2表上的第一个字段上创建唯一性索引。</p><ul><li><p>重新打开终端输入sqlplus，然后输入用户名和密码登录 </p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsDNtL5N.jpg" alt="img"> </p><p>提示用户已锁定，用下面命令解锁</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> usera ACCOUNT UNLOCK;</span><br></pre></td></tr></table></figure></li><li><p>然后再次登录,发现了新问题</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsFwEoZV.jpg" alt="img"> </p></li><li><p>根据上面的提示赋予usera用户创建会话的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> SESSION <span class="keyword">TO</span> usera;</span><br></pre></td></tr></table></figure></li><li><p>再次登录，发现已能够登录上去</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsBePYJb.jpg" alt="img"> </p></li><li><p>然后创建t2表，结构和scoot用户模式下的emp表相同</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsoLAccH.jpg" alt="img"> </p><p>下面用sys用户给usera赋予创建表的权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> usera;</span><br></pre></td></tr></table></figure><p>在重新执行创建t2表语句，创建成功</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsllPdwt.jpg" alt="img"> </p></li><li><p>创建唯一索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX unique_index_empno <span class="keyword">ON</span> t2(EMPNO);</span><br></pre></td></tr></table></figure></li><li><p>给t2表插入scott模式下emp表的数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 (empno, ename, job, mgr, hiredate, sal, comm, deptno)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">7369</span>, <span class="string">&#x27;SMITH&#x27;</span>, <span class="string">&#x27;CLERK&#x27;</span>, <span class="number">7902</span>, to_date(<span class="string">&#x27;17-12-1980&#x27;</span>, <span class="string">&#x27;dd-mm-yyyy&#x27;</span>), <span class="number">1000</span>, <span class="keyword">null</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t2 (empno, ename, job, mgr, hiredate, sal, comm, deptno)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">7499</span>, <span class="string">&#x27;ALLEN&#x27;</span>, <span class="string">&#x27;SALESMAN&#x27;</span>, <span class="number">7698</span>, to_date(<span class="string">&#x27;20-02-1981&#x27;</span>, <span class="string">&#x27;dd-mm-yyyy&#x27;</span>), <span class="number">1800</span>, <span class="number">300</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">下面省略多条插入数据</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将usera上的现有权限转授给userb。</p><ul><li><p>在登录用户为usera下，查看自己的权限信息</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsU9fDwE.jpg" alt="img"> </p></li><li><p>然后将usera的全部权限转授给userb</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> SESSION, <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> userb;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsefNhQk.jpg" alt="img"> </p><p>原因是usera没有转授权限的权限，需要使用sys用户授予转授权(WITH ADMIN OPTION)给usera</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> SESSION,<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> usera <span class="keyword">WITH</span> ADMIN OPTION;</span><br></pre></td></tr></table></figure><p>然后再次执行授权给userb权限的命令，成功授权。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wps265iZL.jpg" alt="img"> </p></li></ul></li><li><p>禁止usera将获得的权限再转授给其他用户。</p><ul><li>先用sys用户收回usera的所有权限<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">REVOKE</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span>,<span class="keyword">CREATE</span> SESSION <span class="keyword">FROM</span> usera;</span><br></pre></td></tr></table></figure></li><li>然后在用sys用户赋予刚刚所收回权限，但是不加WITH ADMIN OPTION<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> SESSION,<span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> usera;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建角色rolea和roleb。将create table，scott.emp上的insert和update权限授予rolea。将connect，resource角色授予roleb。</p><ul><li>用sys用户创建rolea和roleb角色<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> ROLE rolea;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">CREATE</span> ROLE roleb;</span><br></pre></td></tr></table></figure></li><li>将create table，scott.emp上的insert和update权限授予rolea<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">TO</span> ROLEA;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">INSERT</span>,UPDATE <span class="keyword">ON</span> SCOTT.EMP <span class="keyword">TO</span> ROLEA;</span><br></pre></td></tr></table></figure></li><li>将connect，resource角色授予roleb<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> <span class="keyword">CONNECT</span>, RESOURCE <span class="keyword">TO</span> ROLEB;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>将角色rolea和roleb授予用户userb。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">GRANT</span> ROLEA,ROLEB <span class="keyword">TO</span> USERB;</span><br></pre></td></tr></table></figure></li><li><p>查询usera和userb用户所具有的系统全新和对象权限信息。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> DBA_SYS_PRIVS <span class="keyword">where</span> GRANTEE <span class="keyword">IN</span> (<span class="string">&#x27;USERA&#x27;</span>,<span class="string">&#x27;USERB&#x27;</span>);</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wps9fsJwz.jpg" alt="img"> </p></li></ol><ol start="9"><li><p>创建概要文件，限定用户最长会话时间为60分钟，最长连续空闲时间为25分钟，口令有效期30天，连续登录5次失败则锁定账户。将此概要文件指定给用户usera和userb。</p><ul><li>先创建概要文件<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> PROFILE profile_usera_userb LIMIT</span><br><span class="line">CONNECT_TIME <span class="number">60</span> IDLE_TIME <span class="number">25</span></span><br><span class="line">PASSWORD_LIFE_TIME <span class="number">30</span></span><br><span class="line">FAILED_LOGIN_ATTEMPTS <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li>将此概要文件指定给用户usera和userb<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> usera PROFILE profile_usera_userb;</span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">USER</span> userb PROFILE profile_usera_userb;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ol><li><p>在第3小问中，登录usera用户的时候，打开终端输入sqlplus。①第一次输入用户名和密码之后，提示ORA-28000: the account is locked（用户未解锁），然后通过命令（ALTER USER usera ACCOUNT UNLOCK;）解锁之后；②进行第二次登录，因为创建usera用户的口令为过期状态，所以提示ORA-28001: the password has expired（密码过期），要求重新设置密码，在输入新密码两次之后提示ORA-01045: user USERA lacks CREATE SESSION privilege; logon denied（没有创建会话的权限），通过命令（GRANT CREATE SESSION TO usera;）赋予usera创建会话权限；③然后再次登录即可登录。</p></li><li><p>当我还未给userb赋予usera现有权限的时候尝试登录userb用户，错误提示如下，没有usera登录时提示密码过期，因为没有设置初始口令为过期。</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wps79XccA.jpg" alt="img"> </p><p> 然后我做完实验的第4小题之后，userb应当拥有了创建会话的权利，因为usera赋予给了userb，我再次登录userb，验证是否授权成功，从下图得出成功授权。</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsYpdYJF.jpg" alt="img"> </p></li><li><p>当我使用usera用户登录之后，创建了t2表，然后往里面也插入数据成功了，但是查询的时候没有任何数据</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsy37wZg.jpg" alt="img"> </p><p> 不知道为什么里面没有数据，显示插入成功了。</p><p> 最后网上查找说insert之后没有提交（commit;)，果然是这个问题。</p></li><li><p>在第6小题给角色赋予权限之后可以查看是否赋予成功</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> dba_sys_privs <span class="keyword">where</span> grantee<span class="operator">=</span><span class="string">&#x27;ROLEA&#x27;</span>;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsKN1uhg.jpg" alt="img"> </p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> role_role_privs <span class="keyword">where</span> role<span class="operator">=</span><span class="string">&#x27;ROLEB&#x27;</span>;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpssUgsMF.jpg" alt="img"> </p><p> 这里有几个表不太清楚：</p><p> dba_sys_privs，role_sys_privs，role_role_privs</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Oracle11g实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux用户和权限管理习题</title>
      <link href="2022/03/20/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%A0%E9%A2%98/"/>
      <url>2022/03/20/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ol><li><p>Linux中的用户管理主要涉及用户账号文件________、用户密码文件________、用户组文件________。</p><ul><li>用户帐号文件：<code>/etc/passwd</code></li><li>用户密码文件：<code>/etc/shadow</code></li><li>用户组文件：<code>/etc/group</code></li></ul></li><li><p>通过id命令查看student 用户的身份信息，并将命令执行后的信息全部重定向到黑洞文件中。</p></li><li><p>显示系统中用户账号的个数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">minghui@Linux ~ $ who</span><br><span class="line">minghui  tty1         2022-03-30 09:51</span><br><span class="line">minghui  pts/0        2022-03-30 09:54 (192.168.164.1)</span><br><span class="line">minghui@Linux ~ $ who | wc -l</span><br><span class="line">2</span><br><span class="line">minghui@Linux ~ $</span><br></pre></td></tr></table></figure></li><li><p>将student 用户的家目录复制到/tmp目录中，并保持源文件的属性不变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minghui@Linux ~ $ sudo useradd student</span><br><span class="line">[sudo] minghui 的密码：</span><br><span class="line">minghui@Linux ~ $ sudo cp -rp /home/student /tmp</span><br><span class="line">[sudo] minghui 的密码：</span><br><span class="line">minghui@Linux ~ $</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为financial的组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Linux ~ $ sudo groupadd financial</span><br></pre></td></tr></table></figure></li><li><p>创建一个名为test1的用户，指定其UID为1600,将financial组设置为test1用户的基本组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Linux ~ $ sudo useradd -u 1600 -g financial test1</span><br><span class="line">minghui@Linux ~ $ id test1</span><br><span class="line">uid=1600(test1) gid=1011(financial) 组=1011(financial)</span><br></pre></td></tr></table></figure></li><li><p>通过非交互方式为用户test1设置密码123。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # sudo echo &quot;123&quot; | passwd --stdin test1</span><br><span class="line">更改用户 test1 的密码 。</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure><blockquote><p>–stdin</p><pre><code>         This option is used to indicate that passwd should read the new         password from standard input, which can be a pipe.</code></pre></blockquote></li><li><p>另外打开一个终端，以test1用户的身份登录系统。在test1的家目录中创建一个名为test1.txt的文件，并查看test1.txt 文件的权限设置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">minghui@Linux ~ $ su - test1</span><br><span class="line">密码：</span><br><span class="line">[test1@Linux ~]$ touch test1.txt</span><br><span class="line">[test1@Linux ~]$ ll test1.txt</span><br><span class="line">-rw-r--r-- 1 test1 financial 0 3月  30 11:24 test1.txt</span><br><span class="line">[test1@Linux ~]$</span><br></pre></td></tr></table></figure></li><li><p>首先对文件test1.txt进行权限设置，要求文件所有者具有读写权限，所属组和其他用户具有只读权限。然后，使test1用户退出登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[test1@Linux ~]$ chmod 644 test1.txt</span><br><span class="line">[test1@Linux ~]$ ll</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r-- 1 test1 financial 0 3月  30 11:24 test1.txt</span><br><span class="line">[test1@Linux ~]$</span><br></pre></td></tr></table></figure></li><li><p>将test1用户锁定，禁止其登录。再次打开一个终端，尝试能否以test1 用户的身份登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # passwd -l test1</span><br><span class="line">锁定用户 test1 的密码 。</span><br><span class="line">passwd: 操作成功</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">minghui@Linux ~ $ ssh test1@192.168.164.131</span><br><span class="line">The authenticity of host &#x27;192.168.164.131 (192.168.164.131)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:5bZfq74NYyTEpwAjym7vK8HR9IK2WoIe/7z9YBrG1OI.</span><br><span class="line">ECDSA key fingerprint is MD5:85:fd:85:65:02:41:c2:ee:44:1f:c8:2a:b3:00:f0:ca.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.164.131&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">test1@192.168.164.131&#x27;s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">test1@192.168.164.131&#x27;s password:</span><br></pre></td></tr></table></figure></li><li><p>将test1用户解锁，在终端中尝试能否以test1 用户的身份登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # passwd -u test1</span><br><span class="line">解锁用户 test1 的密码。</span><br><span class="line">passwd: 操作成功</span><br><span class="line">Linux ~ # su - test1</span><br><span class="line">上一次登录：三 3月 30 11:24:11 CST 2022pts/0 上</span><br><span class="line">最后一次失败的登录：日 4月 10 15:15:21 CST 2022从 192.168.164.1ssh:notty 上</span><br><span class="line">最有一次成功登录后有 2 次失败的登录尝试。</span><br><span class="line">[test1@Linux ~]$</span><br></pre></td></tr></table></figure></li><li><p>将用户test1家目录中的test1.txt文件的所有者改为root，所属组改为users。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[test1@Linux ~]$ su - root</span><br><span class="line">密码：</span><br><span class="line">上一次登录：日 4月 10 15:17:52 CST 2022pts/0 上</span><br><span class="line">最后一次失败的登录：日 4月 10 15:24:19 CST 2022pts/0 上</span><br><span class="line">最有一次成功登录后有 2 次失败的登录尝试。</span><br><span class="line">Linux ~ # chown root:users /home/test1/test1.txt</span><br><span class="line">Linux ~ # ll /home/test1/test1.txt</span><br><span class="line">-rw-r--r-- 1 root users 0 3月  30 11:24 /home/test1/test1.txt</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>将test1用户连同家目录一并删除。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # userdel -r test1</span><br><span class="line">userdel: user test1 is currently used by process 3092</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>创建用户test2，要求没有家目录，并且禁止其登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # useradd -s /sbin/nologin -M test2</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>创建用户test3, 并指定其家目录为/test3。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # useradd -d /test3 test3</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>将test3用户加入root组，使root组成为其附加组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # id test3</span><br><span class="line">uid=1602(test3) gid=1602(test3) 组=1602(test3)</span><br><span class="line">Linux ~ # usermod -aG root test3</span><br><span class="line">Linux ~ # id test3</span><br><span class="line">uid=1602(test3) gid=1602(test3) 组=1602(test3),0(root)</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>将用户test3的基本组修改为users。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # id test3</span><br><span class="line">uid=1602(test3) gid=1602(test3) 组=1602(test3)</span><br><span class="line">Linux ~ # usermod -aG root test3</span><br><span class="line">Linux ~ # id test3</span><br><span class="line">uid=1602(test3) gid=1602(test3) 组=1602(test3),0(root)</span><br></pre></td></tr></table></figure><blockquote><p>注意：-G 参数是添加附加组，之前的附加组全部清空，所以要达到追加效果需要与 -a 参数使用，具体看下面</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # id test3</span><br><span class="line">uid=1602(test3) gid=1602(test3) 组=1602(test3),1009(minghui)</span><br><span class="line">Linux ~ # usermod -G root test3</span><br><span class="line">Linux ~ # id test3</span><br><span class="line">uid=1602(test3) gid=1602(test3) 组=1602(test3),0(root)</span><br><span class="line">Linux ~ # usermod -aG minghui test3</span><br><span class="line">Linux ~ # id test3</span><br><span class="line">uid=1602(test3) gid=1602(test3) 组=1602(test3),0(root),1009(minghui)</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>将用户test3的家目录/test3移动到/home目录中，然后将其家目录改为/home/test3。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # grep &quot;test3&quot; /etc/passwd</span><br><span class="line">test3:x:1602:1602::/test3:/bin/bash</span><br><span class="line">Linux ~ # usermod -md /home/test3 test3</span><br><span class="line">Linux ~ # grep &quot;test3&quot; /etc/passwd</span><br><span class="line">test3:x:1602:1602::/home/test3:/bin/bash</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>当用户对目录有写权限，但对目录下的文件没有写权限时，能否修改此文件内容？能否删除此文件？</p><p>下面用 test1 用户作实验，首先先在 test1 用户家目录创建一个文件夹<code>test</code>，权限设置为<code>d-w--w--w-</code></p><p>然后到 test 目录下创建一个 test.txt 文件，权限设置为``</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line">20. Linux 文件的权限位x对目录和文件有何不同？</span><br><span class="line"></span><br><span class="line">- 目录：代表可以进入该目录</span><br><span class="line"></span><br><span class="line">- 文件：代表具有执行该文件的权限，比如只要拥有 x 的脚本文件才可以执行</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">21. 新建目录/tmp/mike,并设置如下权限。</span><br><span class="line"></span><br><span class="line">- 将此目录的所有者设置为 mike，并设置读、写和执行权限。</span><br><span class="line"></span><br><span class="line">- 将此目录的所属组设置为sales，并设置读和执行权限。</span><br><span class="line"></span><br><span class="line">- 其他用户没有任何权限。</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">首先需要创建用户 mike 和组 sales</span></span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">Linux ~ # mkdir /tmp/mike</span><br><span class="line">Linux ~ # useradd mike</span><br><span class="line">Linux ~ # groupadd sales</span><br><span class="line">Linux ~ # chown mike:sales /tmp/mike</span><br><span class="line">Linux ~ # ll -d /tmp/mike</span><br><span class="line">drwxr-xr-x 2 mike sales 4.0K 4月  10 22:20 /tmp/mike</span><br><span class="line">Linux ~ # chmod 750 /tmp/mike</span><br><span class="line">Linux ~ # ll -d /tmp/mike</span><br><span class="line">drwxr-x--- 2 mike sales 4.0K 4月  10 22:20 /tmp/mike</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="/home/minghui/Pictures/%E6%89%AB%E9%9B%B7.png"></p><table><thead><tr><th align="left">111</th><th align="left">222</th><th align="left">333</th></tr></thead><tbody><tr><td align="left">122</td><td align="left">233</td><td align="left">333</td></tr></tbody></table></li><li><p>创建/var/test 目录，要求在此目录中任何用户都可以创建文件或目录，但只有用户自身和root用户可以删除用户所创建的文件或目录。</p><p>需要实现题目条件，需要给目录设置粘滞位SBIT权限（SBIT权限仅仅对目录有效）    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # mkdir /var/test</span><br><span class="line">Linux ~ # ll -d /var/test</span><br><span class="line">drwxr-xr-x 2 root root 4.0K 4月  10 22:30 /var/test</span><br><span class="line">Linux ~ # chmod o+t /var/test</span><br><span class="line">Linux ~ # ll -d /var/test</span><br><span class="line">drwxr-xr-t 2 root root 4.0K 4月  10 22:30 /var/test</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>新建一个名为manager的用户组，创建两个用户账号: natasha 和harry,并将manager组设为这两个用户的附加组。复制文件/etc/fstab 到/var/tmp目录中，对文件/var/tmp/fstab进行权限设置。</p><ul><li><p>添加ACL条目，使manager组具有读取权限。</p></li><li><p>添加ACL条目，使用户harry具有读写权限。</p></li><li><p>添加ACL条目,使用户natasha没有任何权限。</p></li><li><p>删除manager 组的ACL条目。</p></li><li><p>删除所有附加的ACL条目。</p></li></ul></li><li><p>假设/var/test目录的所属组是users，要求对/var/test目录进行权限设置，使得任何用户在该目录中所创建的文件或子目录的所属组都自动使用users组。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # chown :users /var/test</span><br><span class="line">Linux ~ # ll -d /var/test</span><br><span class="line">drwxr-xr-t 2 root users 4.0K 4月  10 22:30 /var/test</span><br><span class="line">Linux ~ # chmod g+s /var/test</span><br><span class="line">Linux ~ # ll -d /var/test</span><br><span class="line">drwxr-sr-t 2 root users 4.0K 4月  10 22:30 /var/test</span><br><span class="line">Linux ~ # touch /var/test/root_test</span><br><span class="line">Linux ~ # ll /var/test</span><br><span class="line">总用量 0</span><br><span class="line">-rw-r--r-- 1 root users 0 4月  10 22:39 root_test</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>假设普通用户student已经被授权，要求以该用户身份将系统的IP地址修改为192.168.80.10/24。</p><p>通过 man 手册查看 ifconfig 命令，可以通过该命令修改 IP 地址</p><p>命令格式为：<code>ifconfig 接口 address</code></p><blockquote><p>NAME</p><pre><code>  ifconfig - 配置网络接口</code></pre><p>总览</p><pre><code>  ifconfig [接口]  ifconfig 接口 [aftype] options | address ...</code></pre></blockquote><p>下面进行 IP 地址的更改，先查看原 IP 地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[student@Linux ~]$ ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.164.131  netmask 255.255.255.0  broadcast 192.168.164.255</span><br><span class="line">[student@Linux ~]$ sudo ifconfig ens33 192.168.80.10</span><br><span class="line">[student@Linux ~]$ ifconfig</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">inet 192.168.80.10  netmask 255.255.255.0  broadcast 192.168.80.255</span><br></pre></td></tr></table></figure><blockquote><p>如果出现下面的问题，需要将 student 用户赋予执行所有命令的权限</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[student@Linux ~]$ sudo ifconfig ens33 192.168.80.10</span><br><span class="line"></span><br><span class="line">我们信任您已经从系统管理员那里了解了日常注意事项。</span><br><span class="line">总结起来无外乎这三点：</span><br><span class="line"></span><br><span class="line">    #1) 尊重别人的隐私。</span><br><span class="line">    #2) 输入前要先考虑(后果和风险)。</span><br><span class="line">    #3) 权力越大，责任越大。</span><br><span class="line"></span><br><span class="line">[sudo] student 的密码：</span><br><span class="line">student 不在 sudoers 文件中。此事将被报告。</span><br><span class="line">[student@Linux ~]$</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> root 用户使用命令 visudo 找到下面内容，添加一条 student 用户的记录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Allows people in group wheel to run all commands</span></span></span><br><span class="line"><span class="meta">%</span><span class="bash">wheel  ALL=(ALL)       ALL</span></span><br><span class="line">student ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure></li><li><p>为/etc/passwd文件添加只读属性。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # ll /etc/passwd</span><br><span class="line">-rw-r--r-- 1 root root 2.6K 4月  10 22:19 /etc/passwd</span><br><span class="line">Linux ~ # chattr +i /etc/passwd</span><br><span class="line">Linux ~ # ll /etc/passwd</span><br><span class="line">-rw-r--r-- 1 root root 2.6K 4月  10 22:19 /etc/passwd</span><br><span class="line"><span class="meta">#</span><span class="bash"> 需要通过 lsattr 命令查看拓展属性</span></span><br><span class="line">Linux ~ # lsattr /etc/passwd</span><br><span class="line">----i--------e-- /etc/passwd</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure><p>发现设置了只读属性后，无法创建用户了，因为创建用户需要向<code>/etc/passwd</code>写入条目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # lsattr /etc/passwd</span><br><span class="line">----i--------e-- /etc/passwd</span><br><span class="line">Linux ~ # useradd test4</span><br><span class="line">useradd：无法打开 /etc/passwd</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>将/var/log/message文件设置为只能向其中追加写入数据，但不能删除原有数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # chattr +a /var/log/messages</span><br><span class="line">Linux ~ # lsattr /var/log/messages</span><br><span class="line">-----a-------e-- /var/log/messages</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li><li><p>在系统中查找所有人都有写权限的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Linux ~ # find / -perm -222 -type d</span><br><span class="line">/opt/rh/devtoolset-7/root/var/tmp</span><br><span class="line">/opt/rh/devtoolset-7/root/tmp</span><br><span class="line">/var/tmp</span><br><span class="line">/var/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-chronyd.service-0qLJ0T/tmp</span><br><span class="line">/var/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-vgauthd.service-mXdhtl/tmp</span><br><span class="line">/var/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-cups.service-4Z1WUM/tmp</span><br><span class="line">/var/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-vmtoolsd.service-6wjrwN/tmp</span><br><span class="line">/dev/mqueue</span><br><span class="line">/dev/shm</span><br><span class="line">/tmp</span><br><span class="line">/tmp/.XIM-unix</span><br><span class="line">/tmp/.ICE-unix</span><br><span class="line">/tmp/.font-unix</span><br><span class="line">/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-cups.service-KI9PbY/tmp</span><br><span class="line">/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-chronyd.service-I5LWHN/tmp</span><br><span class="line">/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-vmtoolsd.service-UqTfdz/tmp</span><br><span class="line">/tmp/.X11-unix</span><br><span class="line">/tmp/.Test-unix</span><br><span class="line">/tmp/systemd-private-367eb46c14004e9bb2fcccfa95ceafe3-vgauthd.service-OrRFJ7/tmp</span><br><span class="line">Linux ~ #</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle-模式对象管理</title>
      <link href="2022/03/18/Oracle11g%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%9AOracle-%E6%A8%A1%E5%BC%8F%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86/"/>
      <url>2022/03/18/Oracle11g%E5%AE%9E%E9%AA%8C%E4%B8%89%EF%BC%9AOracle-%E6%A8%A1%E5%BC%8F%E5%AF%B9%E8%B1%A1%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ol><li><p>掌握表和索引的管理方法。</p></li><li><p>掌握其他模式对象的管理方法。</p></li></ol><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>数据库 orcl  用户名 sys 密码 oracle； 用户名 scott 密码 tiger</p><ol><li><p>用scott登录数据库，创建class表和student表。Class表的字段包括班号cno,班名cname和人数num。Student表的字段包括学号sno，姓名sname，年龄sage和班号cno。字段类型和长度自定。</p></li><li><p>创建一个会话级别的临时表，结构与student表相同。</p></li><li><p>为student表的sage字段添加一个约束，保证该列值在0-100之间。</p></li><li><p>在class表的cname列上建立一个唯一性索引。</p></li><li><p>对class表进行表结构重组，将其移动到orcltbs1表空间。</p></li><li><p>创建一个student_range表（结构与student相同）。按学生年龄分3个区，低于20岁的放入part1区，存储在example表空间；20-30岁的放在part2区，放在orcltbs1表空间；其他数据放在part3区，放在users表空间。</p></li><li><p>创建一个序列，起始值1000，步长为2，最大值为10000，不可循环。</p></li></ol><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><ol><li><p>用scott登录数据库，创建class表和student表。Class表的字段包括班号cno,班名cname和人数num。Student表的字段包括学号sno，姓名sname，年龄sage和班号cno。字段类型和长度自定。</p><ul><li>创建class表SQL语句如下，cno作为主码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> class(</span><br><span class="line">    cno varchar2(<span class="number">5</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    cname varchar2(<span class="number">50</span>),</span><br><span class="line">    num number(<span class="number">2</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>创建student表SQL语句如下，sno作为主码，cno为外码<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student(</span><br><span class="line">    sno number(<span class="number">11</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    sname varchar2(<span class="number">10</span>),</span><br><span class="line">    cno varchar2(<span class="number">5</span>),</span><br><span class="line">    sage number(<span class="number">3</span>),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(cno) <span class="keyword">REFERENCES</span> class(cno)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个会话级别的临时表，结构与student表相同。P89</p><p> 创建了会话级别的临时表student_temp，创建语句如下：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">CREATE</span> <span class="keyword">GLOBAL</span> TEMPORARY <span class="keyword">TABLE</span> student_temp(</span><br><span class="line">    sno number(<span class="number">11</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    sname varchar2(<span class="number">10</span>),</span><br><span class="line">    cno varchar2(<span class="number">5</span>)</span><br><span class="line">) <span class="keyword">ON</span> <span class="keyword">COMMIT</span> PRESERVE <span class="keyword">ROWS</span>;</span><br></pre></td></tr></table></figure></li><li><p>为student表的sage字段添加一个约束，保证该列值在0-100之间。P93</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> student <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> P_AGE <span class="keyword">CHECK</span> (sage <span class="keyword">BETWEEN</span> <span class="number">0</span> <span class="keyword">AND</span> <span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>在class表的cname列上建立一个唯一性索引。P100</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX cname_unique_index <span class="keyword">ON</span> class(cname);</span><br></pre></td></tr></table></figure></li><li><p>对class表进行表结构重组，将其移动到orcltbs1表空间。P97</p><ul><li>先切换到sys模式，不然没有权限创建表空间<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> conn sys<span class="operator">/</span>oracle <span class="keyword">as</span> sysdba</span><br></pre></td></tr></table></figure></li><li>然后创建表空间orcltbs1<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE orcltbs1 DATAFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/orcltbs1.DBF&#x27;</span> SIZE <span class="number">10</span>M EXTENT MANAGEMENT <span class="keyword">LOCAL</span> UNIFORM SIZE <span class="number">512</span>K;</span><br></pre></td></tr></table></figure></li><li>然后对class表结构重组<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> class MOVE TABLESPACE orcltbs1;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个student_range表（结构与student相同）。按学生年龄分3个区，低于20岁的放入part1区，存储在example表空间；20-30岁的放在part2区，放在orcltbs1表空间；其他数据放在part3区，放在users表空间。P104</p><ul><li><p>首先检查，这3个表空间都存在</p></li><li><p>然后按照要求创建</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student_range(</span><br><span class="line">    sno number(<span class="number">11</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    sname varchar2(<span class="number">10</span>),</span><br><span class="line">    sage number(<span class="number">3</span>),</span><br><span class="line">    cno varchar2(<span class="number">5</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">PARTITION</span> <span class="keyword">BY</span> <span class="keyword">RANGE</span>(sage)(</span><br><span class="line">    <span class="keyword">PARTITION</span> part1 <span class="keyword">VALUES</span> LESS THAN(<span class="number">20</span>) TABLESPACE example,</span><br><span class="line">    <span class="keyword">PARTITION</span> part2 <span class="keyword">VALUES</span> LESS THAN(<span class="number">31</span>) TABLESPACE orcltbs1,</span><br><span class="line">    <span class="keyword">PARTITION</span> part3 <span class="keyword">VALUES</span> LESS THAN(maxvalue) TABLESPACE users</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个序列，起始值1000，步长为2，最大值为10000，不可循环。P115</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> SEQUENCE test_sequence</span><br><span class="line">  <span class="keyword">START</span> <span class="keyword">WITH</span> <span class="number">1000</span></span><br><span class="line">  INCREMENT <span class="keyword">BY</span> <span class="number">2</span></span><br><span class="line">  MAXVALUE <span class="number">10000</span></span><br><span class="line">  NOCYCLE;</span><br></pre></td></tr></table></figure><p> 查看创建的序列</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wps4flnmO.jpg" alt="img"> </p></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ol><li><p>查看表的命令，比如第一题中创建表，检查是否创建成功</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">from</span> all_tables;</span><br></pre></td></tr></table></figure><p> 第三个USERS是表空间，创建表时没有指定表空间，默认是当前登录用户所使用的表空间。</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsRld6rj.jpg" alt="img"> </p></li><li><p>在创建临时表的时候，有一个外码，没有创建成功</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsoYCUxO.jpg" alt="img"> </p></li><li><p>查看表的约束</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONSTRAINT_NAME,CONSTRAINT_TYPE,DEFERRED,STATUS <span class="keyword">FROM</span> USER_CONSTRAINTS <span class="keyword">WHERE</span> TABLE_NAME<span class="operator">=</span><span class="string">&#x27;student&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看表的索引</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> INDEX_NAME,INDEX_TYPE <span class="keyword">FROM</span> USER_INDEXES <span class="keyword">WHERE</span> TABLE_NAME<span class="operator">=</span><span class="string">&#x27;class&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>对表进行重组之后，用以下命令查看是否重组成功</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">from</span> all_tables <span class="keyword">where</span> OWNER<span class="operator">=</span><span class="string">&#x27;SCOTT&#x27;</span>;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpspSR4kj.jpg" alt="img"> </p></li><li><p>查看创建的序列</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="keyword">from</span> user_sequences;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpst2wOrZ.jpg" alt="img"> </p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Oracle11g实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux文件和目录管理习题</title>
      <link href="2022/03/16/Linux%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/"/>
      <url>2022/03/16/Linux%E6%96%87%E4%BB%B6%E5%92%8C%E7%9B%AE%E5%BD%95%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><ol><li><p>分别说明根目录下常见的子目录 /root、/etc、/dev、/var、/home、/bin 和 /sbin 的作用</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/d0c50-linux2bfile2bsystem2bhierarchy.jpg" alt="img"></p><table><thead><tr><th>文件目录</th><th>作用</th></tr></thead><tbody><tr><td>/root</td><td>该目录为系统管理员，也称作超级权限者的用户主目录</td></tr><tr><td>/etc</td><td>etc 是 Etcetera(等等) 的缩写,这个目录用来存放所有的系统管理所需要的配置文件和子目录</td></tr><tr><td>/dev</td><td>dev 是 Device(设备) 的缩写, 该目录下存放的是 Linux 的外部设备，在 Linux 中访问设备的方式和访问文件的方式是相同的</td></tr><tr><td>/var</td><td>var 是 variable(变量) 的缩写，这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件</td></tr><tr><td>/home</td><td>用户的主目录，在 Linux 中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名</td></tr><tr><td>/bin</td><td>bin 是 Binaries (二进制文件) 的缩写, 这个目录存放着最经常使用的命令</td></tr><tr><td>/sbin</td><td>s 就是 Super User 的意思，是 Superuser Binaries (超级用户的二进制文件) 的缩写，这里存放的是系统管理员使用的系统管理程序</td></tr></tbody></table></li><li><p>切换到工作目录到/usr/src，并执行命令查看当前所在的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ cd /usr/src</span><br><span class="line">minghui@Mingarch /usr/src $ pwd</span><br><span class="line">/usr/src</span><br><span class="line">minghui@Mingarch /usr/src $</span><br></pre></td></tr></table></figure></li><li><p>当前所在的工作目录是 /usr/src，切换工作目录到当前目录的上一级目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch /usr/src $ cd ..</span><br><span class="line">minghui@Mingarch /usr $</span><br></pre></td></tr></table></figure></li><li><p>将工作目录切换到当前用户的家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch /usr $ cd ~</span><br><span class="line">minghui@Mingarch ~ $</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">minghui@Mingarch /usr $ cd</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>查看 /dev 目录中所有文件的详细信息（包含隐藏文件），在 Linux 系统中，隐藏文件的标识是什么？在显示的文件详细信息中，第一组数的第一个字符代表文件类型，”-“ “d” “l” “c” “b” 分别代表的是哪种类型的文件？</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_10-25.png"></p><ul><li>隐藏文件标识：前面带个小数点</li><li>第一个字符的含义：<code>-</code>：普通文件、<code>d</code>：目录、<code>l</code>：软链接、<code>b</code>：块设备、<code>c</code>：字符设备</li></ul></li><li><p>以长格式显示 /etc/inittab 文件的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ ll /etc/inittab</span><br><span class="line">-rw-r--r--. 1 root root 511 8月   4 2017 /etc/inittab</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>再root用户的家目录下创建一个名为 temp1 的空文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo mkdir /root/test1</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>在 /root/test1 目录中创建一个名为temp1的空文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ touch /root/test1/temp1</span><br><span class="line">touch: 无法创建 &#x27;/root/test1/temp1&#x27;: 权限不够</span><br><span class="line">minghui@Mingarch ~ $ sudo touch /root/test1/temp1</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>复制文件 /root/test1/temp1 进行备份，仍然保存再</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo cp /root/test1/temp1 /root/test1/temp1.bak</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>将文件 /root/test1/temp1.bak 移动到 /tmp/ 目录下，并改名为 temp.bak</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo mv /root/test1/temp1.bak /tmp/temp.bak</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>将 /root/test1/ 目录强制删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo rm -rf /root/temp1</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>以长格式显示 /etc/ 目录本身的详细信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ ls -dl /etc/</span><br><span class="line">drwxr-xr-x. 141 root root 12288 3月  18 20:10 /etc/</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>查看操作系统的版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ uname -a</span><br><span class="line">Linux Mingarch 5.16.14-arch1-1 #1 SMP PREEMPT Fri, 11 Mar 2022 17:40:36 +0000 x86_64 GNU/Linux</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>将 /etc 目录中所有以 “.d“ 结尾的文件或目录复制到 /tmp 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo cp -r /etc/*.d /tmp</span><br><span class="line">[sudo] minghui 的密码：</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>将 /etc 目录中所有以 .conf 结尾并且以 m、n、r 或 p 开头的文件或目录复制到 /tmp 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo cp -r /etc/[mnrp]*.conf /tmp</span><br><span class="line">[sudo] minghui 的密码：</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>显示 /etc 目录中所有以 ”pa“ 开头的文件，如果它是目录，则只显示目录本身</p><blockquote><p>有歧义感觉，如果 /etc 目录下的目录的文件有 pa 开头的算不算？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ ls /etc/ | grep &quot;^pa&quot;</span><br><span class="line">pam.d</span><br><span class="line">passwd</span><br><span class="line">passwd-</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>显示 /dev 目录中所有以 ”d“ ”f“ 开头并且文件名为 3 个字符的文件</p><blockquote><p>有歧义感觉，如果 /dev 目录下的目录的文件有  满足条件的算不算？</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ find /dev/ -name &quot;[df]??&quot;</span><br><span class="line">/dev/</span><br><span class="line">/dev/fb0</span><br><span class="line">/dev/dri</span><br></pre></td></tr></table></figure></li><li><p>查看 /etc/passwd 的内容，并显示行号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ cat -n /etc/passwd</span><br><span class="line">     1  root:x:0:0::/root:/bin/bash</span><br><span class="line">     2  bin:x:1:1::/:/usr/bin/nologin</span><br><span class="line">     3  daemon:x:2:2::/:/usr/bin/nologin</span><br><span class="line">     4  mail:x:8:12::/var/spool/mail:/usr/bin/nologin</span><br><span class="line">     5  ftp:x:14:11::/srv/ftp:/usr/bin/nologin</span><br><span class="line">     6  http:x:33:33::/srv/http:/usr/bin/nologin</span><br><span class="line">     7  nobody:x:65534:65534:Nobody:/:/usr/bin/nologin</span><br><span class="line">     8  dbus:x:81:81:System Message Bus:/:/usr/bin/nologin</span><br><span class="line">     9  systemd-coredump:x:981:981:systemd Core Dumper:/:/usr/bin/nologin</span><br><span class="line">    10  systemd-network:x:980:980:systemd Network Management:/:/usr/bin/nologin</span><br><span class="line">    11  systemd-oom:x:979:979:systemd Userspace OOM Killer:/:/usr/bin/nologin</span><br><span class="line">    12  systemd-journal-remote:x:978:978:systemd Journal Remote:/:/usr/bin/nologin</span><br><span class="line">    13  systemd-resolve:x:977:977:systemd Resolver:/:/usr/bin/nologin</span><br><span class="line">    14  systemd-timesync:x:976:976:systemd Time Synchronization:/:/usr/bin/nologin</span><br><span class="line">    15  uuidd:x:68:68::/:/usr/bin/nologin</span><br><span class="line">    16  git:x:975:975:git daemon user:/:/usr/bin/git-shell</span><br><span class="line">    17  minghui:x:1000:1000::/home/minghui:/usr/bin/zsh</span><br><span class="line">    18  avahi:x:974:974:Avahi mDNS/DNS-SD daemon:/:/usr/bin/nologin</span><br><span class="line">    19  mysql:x:973:973:MariaDB:/var/lib/mysql:/usr/bin/nologin</span><br><span class="line">    20  polkitd:x:102:102:PolicyKit daemon:/:/usr/bin/nologin</span><br><span class="line">    21  rtkit:x:133:133:RealtimeKit:/proc:/usr/bin/nologin</span><br><span class="line">    22  saned:x:972:972:SANE daemon user:/:/usr/bin/nologin</span><br><span class="line">    23  sddm:x:971:971:Simple Desktop Display Manager:/var/lib/sddm:/usr/bin/nologin</span><br><span class="line">    24  usbmux:x:140:140:usbmux user:/:/usr/bin/nologin</span><br><span class="line">    25  nvidia-persistenced:x:143:143:NVIDIA Persistence Daemon:/:/usr/bin/nologin</span><br><span class="line">    26  geoclue:x:970:970:Geoinformation service:/var/lib/geoclue:/usr/bin/nologin</span><br><span class="line">    27  tomcat8:x:57:57:Tomcat 8 user:/usr/share/tomcat8:/usr/bin/nologin</span><br><span class="line">    28  tss:x:969:969:tss user for tpm2:/:/usr/bin/nologin</span><br><span class="line">minghui@Mingarch ~ $</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>分别用 more、less 命令分屏查看 /etc/passwd 文件的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ more -20 /etc/passwd</span><br><span class="line">minghui@Mingarch ~ $ less /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>查看 /etc/passwd 文件的前 10 行内容，并将结果保存到 /tmp/1.txt 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ head -10 /etc/passwd &gt; /tmp/1.txt</span><br></pre></td></tr></table></figure></li><li><p>查看 /etc/passwd 文件的后 5 行内容，并将结果保存到 /tmp/2.txt 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ tail -5 /etc/passwd &gt; /tmp/2.txt</span><br></pre></td></tr></table></figure></li><li><p>统计 /etc 目录中扩展名是 ”.conf” 的文件个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ ls /etc/*.conf | wc -l</span><br><span class="line">30</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>查找 /etc 目录下以 net 开头的文件，将结果保存到 /tmp/net.file 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ ls /etc/net* &gt; /tmp/net.file</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>在 /boot 目录中查找大小超过 1024KB 且文件名以 “init” 开头的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ find /boot +size 1024KB -name &quot;init*&quot;</span><br><span class="line">/boot/initramfs-linux.img</span><br><span class="line">/boot/initramfs-linux-fallback.img</span><br><span class="line">find: ‘+size’: 没有那个文件或目录</span><br><span class="line">find: ‘1024KB’: 没有那个文件或目录</span><br></pre></td></tr></table></figure></li><li><p>在 /etc/passwd 文件中查找包含“root”字符串的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ grep &quot;root&quot; /etc/passwd</span><br><span class="line">root:x:0:0::/root:/bin/bash</span><br><span class="line">minghui@Mingarch ~ $</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">minghui@Mingarch ~ $ cat /etc/passwd | grep &quot;root&quot;</span><br><span class="line">root:x:0:0::/root:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>查找 /etc/profile 文件中所有不以“#”开头并且不是空白的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ grep -v &quot;^#&quot; /etc/profile | grep -v &quot;^$&quot;</span><br><span class="line">umask 022</span><br><span class="line">append_path () &#123;</span><br><span class="line">    case &quot;:$PATH:&quot; in</span><br><span class="line">        *:&quot;$1&quot;:*)</span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            PATH=&quot;$&#123;PATH:+$PATH:&#125;$1&quot;</span><br><span class="line">    esac</span><br><span class="line">&#125;</span><br><span class="line">append_path &#x27;/usr/local/sbin&#x27;</span><br><span class="line">append_path &#x27;/usr/local/bin&#x27;</span><br><span class="line">append_path &#x27;/usr/bin&#x27;</span><br><span class="line">export PATH</span><br><span class="line">if test -d /etc/profile.d/; then</span><br><span class="line">        for profile in /etc/profile.d/*.sh; do</span><br><span class="line">                test -r &quot;$profile&quot; &amp;&amp; . &quot;$profile&quot;</span><br><span class="line">        done</span><br><span class="line">        unset profile</span><br><span class="line">fi</span><br><span class="line">unset -f append_path</span><br><span class="line">if test &quot;$BASH&quot; &amp;&amp;\</span><br><span class="line">   test &quot;$PS1&quot; &amp;&amp;\</span><br><span class="line">   test -z &quot;$POSIXLY_CORRECT&quot; &amp;&amp;\</span><br><span class="line">   test &quot;$&#123;0#-&#125;&quot; != sh &amp;&amp;\</span><br><span class="line">   test -r /etc/bash.bashrc</span><br><span class="line">then</span><br><span class="line">        . /etc/bash.bashrc</span><br><span class="line">fi</span><br><span class="line">unset TERMCAP</span><br><span class="line">unset MANPATH</span><br><span class="line">minghui@Mingarch ~ $</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查看系统中已经设置的别名命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ alias</span><br><span class="line">-=&#x27;cd -&#x27;</span><br><span class="line">...=../..</span><br><span class="line">....=../../..</span><br><span class="line">.....=../../../..</span><br><span class="line">......=../../../../..</span><br><span class="line">1=&#x27;cd -1&#x27;</span><br><span class="line">2=&#x27;cd -2&#x27;</span><br><span class="line">3=&#x27;cd -3&#x27;</span><br><span class="line">4=&#x27;cd -4&#x27;</span><br><span class="line">5=&#x27;cd -5&#x27;</span><br><span class="line">6=&#x27;cd -6&#x27;</span><br><span class="line">7=&#x27;cd -7&#x27;</span><br><span class="line">8=&#x27;cd -8&#x27;</span><br><span class="line">9=&#x27;cd -9&#x27;</span><br><span class="line">_=&#x27;sudo &#x27;</span><br><span class="line">afind=&#x27;ack -il&#x27;</span><br><span class="line">diff=&#x27;diff --color&#x27;</span><br><span class="line">egrep=&#x27;egrep --color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn,.idea,.tox&#125;&#x27;</span><br><span class="line">fgrep=&#x27;fgrep --color=auto --exclude-dir=&#123;.bzr,CVS,.git,.hg,.svn,.idea,.tox&#125;&#x27;</span><br><span class="line">l=&#x27;ls -lah&#x27;</span><br><span class="line">la=&#x27;ls -lAh&#x27;</span><br><span class="line">ll=&#x27;colorls -l&#x27;</span><br><span class="line">ls=colorls</span><br><span class="line">lsa=&#x27;ls -lah&#x27;</span><br><span class="line">md=&#x27;mkdir -p&#x27;</span><br><span class="line">rd=rmdir</span><br><span class="line">run-help=man</span><br><span class="line">which-command=whence</span><br></pre></td></tr></table></figure></li><li><p>创建名为 wcl 的命令别名，统计 /etc/profile 文件中不以 # 开头且不是空白行的行数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ alias wcl=&quot;grep -v &quot;^#&quot; /etc/profile | grep -v &quot;^$&quot; | wc -l&quot;</span><br><span class="line">minghui@Mingarch ~ $ wcl</span><br><span class="line">30</span><br></pre></td></tr></table></figure></li><li><p>找到 find 命令的命令文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ which find</span><br><span class="line">/usr/bin/find</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>查看 find 命令的简要帮助信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ find --help</span><br></pre></td></tr></table></figure></li><li><p>查看 grep 命令的帮助手册</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ man grep</span><br></pre></td></tr></table></figure></li><li><p>查看历史命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ history</span><br></pre></td></tr></table></figure></li><li><p>查找 /etc/passwd 文件中所有以“nologin”结尾的行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ grep &quot;nologin$&quot; /etc/passwd</span><br><span class="line">bin:x:1:1::/:/usr/bin/nologin</span><br><span class="line">daemon:x:2:2::/:/usr/bin/nologin</span><br><span class="line">mail:x:8:12::/var/spool/mail:/usr/bin/nologin</span><br><span class="line">ftp:x:14:11::/srv/ftp:/usr/bin/nologin</span><br><span class="line">http:x:33:33::/srv/http:/usr/bin/nologin</span><br><span class="line">nobody:x:65534:65534:Nobody:/:/usr/bin/nologin</span><br><span class="line">dbus:x:81:81:System Message Bus:/:/usr/bin/nologin</span><br><span class="line">systemd-coredump:x:981:981:systemd Core Dumper:/:/usr/bin/nologin</span><br><span class="line">systemd-network:x:980:980:systemd Network Management:/:/usr/bin/nologin</span><br><span class="line">systemd-oom:x:979:979:systemd Userspace OOM Killer:/:/usr/bin/nologin</span><br><span class="line">systemd-journal-remote:x:978:978:systemd Journal Remote:/:/usr/bin/nologin</span><br><span class="line">systemd-resolve:x:977:977:systemd Resolver:/:/usr/bin/nologin</span><br><span class="line">systemd-timesync:x:976:976:systemd Time Synchronization:/:/usr/bin/nologin</span><br><span class="line">uuidd:x:68:68::/:/usr/bin/nologin</span><br><span class="line">avahi:x:974:974:Avahi mDNS/DNS-SD daemon:/:/usr/bin/nologin</span><br><span class="line">mysql:x:973:973:MariaDB:/var/lib/mysql:/usr/bin/nologin</span><br><span class="line">polkitd:x:102:102:PolicyKit daemon:/:/usr/bin/nologin</span><br><span class="line">rtkit:x:133:133:RealtimeKit:/proc:/usr/bin/nologin</span><br><span class="line">saned:x:972:972:SANE daemon user:/:/usr/bin/nologin</span><br><span class="line">sddm:x:971:971:Simple Desktop Display Manager:/var/lib/sddm:/usr/bin/nologin</span><br><span class="line">usbmux:x:140:140:usbmux user:/:/usr/bin/nologin</span><br><span class="line">nvidia-persistenced:x:143:143:NVIDIA Persistence Daemon:/:/usr/bin/nologin</span><br><span class="line">geoclue:x:970:970:Geoinformation service:/var/lib/geoclue:/usr/bin/nologin</span><br><span class="line">tomcat8:x:57:57:Tomcat 8 user:/usr/share/tomcat8:/usr/bin/nologin</span><br><span class="line">tss:x:969:969:tss user for tpm2:/:/usr/bin/nologin</span><br></pre></td></tr></table></figure></li><li><p>假设存在 3 个目录：/tmp/a、/tmp/b 和 /tmp/c，要求用一条命令强制删除这 3 个目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ rm -rf /tmp/&#123;a,b,c&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者下面</span></span><br><span class="line">minghui@Mingarch ~ $ rm -rf /tmp/&#123;a..c&#125;</span><br></pre></td></tr></table></figure></li><li><p>查找 /etc 目录下大于 1MB 且类型为普通文件的所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo find /etc/ -type f -size +1M</span><br><span class="line">[sudo] minghui 的密码：</span><br><span class="line">/etc/pacman.d/gnupg/pubring.gpg~</span><br><span class="line">/etc/pacman.d/gnupg/pubring.gpg</span><br><span class="line">minghui@Mingarch ~ $</span><br></pre></td></tr></table></figure></li><li><p>在 /tmp 目录中创建一个名为 hi.txt 的文件，文件内容为”Hello World”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ echo &quot;Hello World&quot; &gt;&gt; /tmp/hi.txt</span><br></pre></td></tr></table></figure></li><li><p>将执行“find / - user student”命令时产生的错误信息重定向到 /dev/null 文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo find / - user student &gt;&gt; /dev/null</span><br></pre></td></tr></table></figure></li><li><p>如何查看系统时钟于硬件时钟</p><ul><li><p>系统时钟</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ timedatectl</span><br><span class="line">               Local time: 四 2022-03-17 10:20:36 CST</span><br><span class="line">           Universal time: 四 2022-03-17 02:20:36 UTC</span><br><span class="line">                 RTC time: 四 2022-03-17 02:20:36</span><br><span class="line">                Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">System clock synchronized: yes</span><br><span class="line">              NTP service: active</span><br><span class="line">          RTC in local TZ: no</span><br></pre></td></tr></table></figure></li><li><p>硬件时钟</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo hwclock</span><br><span class="line">[sudo] minghui 的密码：</span><br><span class="line">2022-03-17 10:24:38.969795+08:00</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以“年/月/日 时:分:秒”的形式显示当前日期和时间，如“2018/05/26 15:02:48”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ date +&quot;%Y/%m/%d %H:%M:%S&quot;</span><br><span class="line">2022/03/17 10:26:54</span><br></pre></td></tr></table></figure></li><li><p>某台 Linux 服务器疑似正在遭受黑客攻击，作为管理员的你需要实时观察日志文件 /var/log/message 中的最新内容，该如何用命令实现？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ tail -f /var/log/messages</span><br></pre></td></tr></table></figure></li><li><p>在 /etc 目录中查找最近 1 天之内被改动过的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ find /etc -type f -mtime +1</span><br></pre></td></tr></table></figure></li><li><p>从 /tmp 目录及其子目录中找出扩展名为 .txt 的文件，并将之删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minghui@Mingarch ~ $ sudo find /tmp -name &quot;*.txt&quot; -delete</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle-存储结构管理</title>
      <link href="2022/03/07/Oracle11g%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%9AOracle-%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%AE%A1%E7%90%86/"/>
      <url>2022/03/07/Oracle11g%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%9AOracle-%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ol><li><p>掌握物理存储结构的管理方法。</p></li><li><p>掌握逻辑存储结构的管理方法。</p></li></ol><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>数据库 orcl  用户名 sys 密码 oracle</p><p>用命令行模式启动SQL* Plus，用sys用户登录到orcl数据库。</p><ol><li><p>创建一个本地管理方式下的表空间USERTBS1，包含一个数据文件，名称为USERTBS101.dbf，大小为10M。每个区大小为512K。</p></li><li><p>为USERTBS1添加一个数据文件，文件名为USERTBS102.dbf，自动扩展，每次扩展1M，最大为10M。</p></li><li><p>将数据文件USERTBS102.dbf更名为USERTBS105.dbf。</p></li><li><p>为数据库添加一个重做日志文件组，组内包含一个成员文件，名称为redo5.log，大小为5M。</p></li><li><p>将组号为1的重做日志文件组的第一个成员文件移动到D盘根目录下。</p></li><li><p>创建一个本地管理方式下的临时表空间TEMP3，将其作为当前数据库实例的默认临时表空间。</p></li><li><p>查看SYSAUX和USERS表空间的空闲空间大小(MB)。</p></li></ol><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><p>初始工作：先用SQL*Plus连接到ORCL数据库。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsm1dPhv.jpg" alt="img"> </p><ol><li><p>创建一个本地管理方式下的表空间USERTBS1，包含一个数据文件，名称为USERTBS101.dbf，大小为10M。每个区大小为512K。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span>SPACE USERTBS1 DATAFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/USERTBS1.DBF&#x27;</span> SIZE <span class="number">10</span>M EXTENT MANAGEMENT <span class="keyword">LOCAL</span> UNIFORM SIZE <span class="number">512</span>K;</span><br></pre></td></tr></table></figure></li><li><p>为USERTBS1添加一个数据文件，文件名为USERTBS102.dbf，自动扩展，每次扩展1M，最大为10M。</p><p> 创建SQL文件create_datafile,内容如下：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>SPACE USERTBS1 <span class="keyword">ADD</span> DATAFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/USERTBS102.DBF&#x27;</span> SIZE <span class="number">5</span>M AUTOEXTEND <span class="keyword">ON</span> NEXT <span class="number">1</span>M MAXSIZE <span class="number">10</span>M;</span><br></pre></td></tr></table></figure></li><li><p>将数据文件USERTBS102.dbf更名为USERTBS105.dbf。</p><ul><li><p>先将包含数据文件的表空间置为脱机状态（为了下一步的执行）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="keyword">TABLE</span>SPACE USERTBS1 OFFLINE;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsSneqwb.jpg" alt="img"> </p></li><li><p>然后手动重命名（上一步不执行会显示该文件在OracleServiceORCL中打开）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsIfODbF.jpg" alt="img"> </p></li><li><p>最后使用ALTER修改控制文件中的信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>SPACE USERTBS1 RENAME DATAFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/USERTBS102.DBF&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/USERTBS105.DBF&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>为数据库添加一个重做日志文件组，组内包含一个成员文件，名称为redo5.log，大小为5M。</p><p> 新建一个SQL脚本文件create_logfile_group,内容如下：</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">ADD</span> LOGFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/redo5.log&#x27;</span> SIZE <span class="number">5</span>M;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsvFk40t.jpg" alt="img"> </p></li><li><p>将组号为1的重做日志文件组的第一个成员文件移动到D盘根目录下。</p><ul><li><p>检查要移动的成员文件所在重做日志组状态</p></li><li><p>看到组1的状态为INACTIVE，可以直接下面工作，否则要手动日志切换。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsLt6kUi.jpg" alt="img"> </p></li><li><p>在系统中将文件移动到指定位置</p><p>即把D:/DataBase/Oracle11g/oradata/orcl/REDO01.LOG文件移动到D:/</p></li><li><p>然后在数据库中作数据更新</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE RENAME FILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/REDO01.LOG&#x27;</span> <span class="keyword">TO</span> <span class="string">&#x27;D:/REDO01.LOG&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建一个本地管理方式下的临时表空间TEMP3，将其作为当前数据库实例的默认临时表空间。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY TABLESPACE TEMP3 TEMPFILE <span class="string">&#x27;D:/DataBase/Oracle11g/oradata/orcl/TEMP3.DBF&#x27;</span> SIZE <span class="number">50</span>M EXTENT MANAGEMENT <span class="keyword">LOCAL</span> UNIFORM SIZE <span class="number">10</span>M;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> DATABASE <span class="keyword">DEFAULT</span> TEMPORARY TABLESPACE TEMP3;</span><br></pre></td></tr></table></figure></li><li><p>查看SYSAUX和USERS表空间的空闲空间大小(MB)。</p><p> 注意：查询出来的默认是字节数，计算MB大小需要除以1024^2。</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLESPACE_NAME, <span class="built_in">SUM</span>(BYTES)<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span> FREE_SPACES <span class="keyword">FROM</span> DBA_FREE_SPACE <span class="keyword">GROUP</span> <span class="keyword">BY</span> TABLESPACE_NAME <span class="keyword">HAVING</span> TABLESPACE_NAME <span class="keyword">IN</span> (<span class="string">&#x27;SYSAUX&#x27;</span>,<span class="string">&#x27;USERS&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1></li><li><p>数据文件改名的时候将所在表空间设置为脱机时出现下面问题</p><p> 先查看代码报错：</p><p> ORA-01012: ORA-01012: 没有登录</p><p> ORA-01034: ORA-01034: ORACLE不可用</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsJRfW6D.jpg" alt="img"> </p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpslB7zzu.jpg" alt="img"> </p><p> 解决方法，尝试先执行shutdown abort然后在执行startup，最后重新登录账户。</p></li><li><p>在移动日志文件的时候忘记需要在系统中手动复制到指定地点，然后更新数据字典，如果没有手动复制会出现下图报错。</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsxgrE2L.jpg" alt="img"> </p></li><li><p>比较容易犯错的两点：</p><ul><li><p>移动日志文件：移动日志文件需要先手动移动，然后在数据字典中更新记录值。但是前提是待移动的日志文件是处于INACTIVE和UNUSED状态。否则需要手动日志切换（ALTER SYSTEM SWITCH LOGFILE）。日志文件组信息查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">group</span>#,sequence#,members,status,archived <span class="keyword">from</span> V$LOG;</span><br></pre></td></tr></table></figure></li><li><p>文件重命名：先将所处表空间设置为脱机状态（ALTER TABLESPACE USERTBS1 OFFLINE），然后手动重命名文件，最后才在数据字典中更新记录值。</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Oracle11g实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux PPPoE拨号</title>
      <link href="2022/03/02/ArchLinux%20PPPoE%E6%8B%A8%E5%8F%B7/"/>
      <url>2022/03/02/ArchLinux%20PPPoE%E6%8B%A8%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="PPPoE拨号"><a href="#PPPoE拨号" class="headerlink" title="PPPoE拨号"></a>PPPoE拨号</h1><ol><li><p>先安装<code>ppp、re-pppoe</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S ppp re-pppoe</span></span><br></pre></td></tr></table></figure></li><li><p>配置<code>pppoe</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pppoe-setup</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-04_10-31.png"></p><blockquote><p>欢迎使用 RP-PPPoE 客户端设置。首先，我会对您的系统进行一些检查以确保已安装 PPPoE 客户端 适当地… /usr/bin/pppoe-setup: 抱歉，您必须是 root 才能运行此脚本</p></blockquote><p>使用 root 运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pppoe-setup</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Enter your PPPoE user name (default bxxxnxnx@sympatico.ca):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Enter the Ethernet interface connected to the DSL modem</span></span><br><span class="line">For Solaris, this is likely to be something like /dev/hme0.</span><br><span class="line">For Linux, it will be ethn, where &#x27;n&#x27; is a number.</span><br><span class="line">(default eth0):</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Enter the demand value (default no):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Enter the DNS information here:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Please enter your PPPoE password:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Please re-enter your PPPoE password:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Choose a <span class="built_in">type</span> of firewall (0-2):</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Accept these settings and adjust configuration files (y/n)? y</span></span><br><span class="line">Adjusting /etc/ppp/pppoe.conf</span><br><span class="line">Adjusting /etc/ppp/pap-secrets and /etc/ppp/chap-secrets</span><br><span class="line">  (But first backing it up to /etc/ppp/pap-secrets-bak)</span><br><span class="line">  (But first backing it up to /etc/ppp/chap-secrets-bak)</span><br><span class="line">  </span><br><span class="line">Congratulations, it should be all set up!</span><br><span class="line"></span><br><span class="line">Type &#x27;pppoe-start&#x27; to bring up your PPPoE link and &#x27;pppoe-stop&#x27; to bring</span><br><span class="line">it down.  Type &#x27;pppoe-status&#x27; to see the link status.</span><br></pre></td></tr></table></figure><blockquote><p>把配置写入了<code>/etc/ppp/pppoe.conf and /etc/ppp/pap-secrets and /etc/ppp/chap-secrets</code></p></blockquote></li><li><p>使用命令</p><ul><li>pppoe-start</li><li>pppoe-stop</li><li>pppoe-status</li></ul></li><li><p>下面测试</p><p>先把 wifi 关闭：<code>nmcli radio wifi off</code></p></li><li><p>待续</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装VMware</title>
      <link href="2022/03/01/ArchLinux%E5%AE%89%E8%A3%85VMware/"/>
      <url>2022/03/01/ArchLinux%E5%AE%89%E8%A3%85VMware/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p>安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S fuse2 gtkmm linux-headers pcsclite libcanberra</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yay -S ncurses5-compat-libs</span></span><br></pre></td></tr></table></figure></li><li><p>安装 VMware</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pacman -S vmware-workstation</span></span><br></pre></td></tr></table></figure><p>如果出现下面问题，只需要安装<code>linux-headers</code>，通过命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pacman -S linux-headers</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-08_15-34.png"></p></li><li><p>安装好之后记得打开两个服务，否则进入虚拟机系统会没有网络</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start vmware-networks.service  vmware-usbarbitrator.service       <span class="comment">#启动虚拟机的网络,USB,共享等服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl <span class="built_in">enable</span> vmware-networks.service  vmware-usbarbitrator.service      <span class="comment">#启动虚拟机的网络,USB,共享等服务</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo modprobe -a vmw_vmci vmmon<span class="comment">#加载VMware模块</span></span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ranger</title>
      <link href="2022/03/01/ranger/"/>
      <url>2022/03/01/ranger/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Ranger-安装"><a href="#Ranger-安装" class="headerlink" title="Ranger 安装"></a>Ranger 安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S ranger</span></span><br></pre></td></tr></table></figure><h2 id="安装图标"><a href="#安装图标" class="headerlink" title="安装图标"></a>安装图标</h2><p>没装之前</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-04-01_11-57.png"></p><p>下面装图标</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;default_linemode devicons&quot;</span> &gt;&gt; <span class="variable">$HOME</span>/.config/ranger/rc.conf</span></span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-04-01_12-05.png"></p><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><blockquote><p>安装完成之后用<code>ranger</code>打开</p><p>但是预览文件没有高亮显示，以及图片没有预览</p></blockquote><p>下面进行插件安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S libcaca highlight lynx w3m elinks mediainfo</span></span><br></pre></td></tr></table></figure><h2 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h2><ol><li><p>安装<code>ueberzug</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S ueberzug</span><br></pre></td></tr></table></figure></li><li><p>编辑文件<code>vim ~/.config/ranger/rc.conf</code></p><p>修改为<code>set preview_images true</code></p></li></ol><h2 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h2><p>编辑文件<code>vim ~/.config/ranger/rc.conf</code></p><p>设置如下：</p><p><code>set draw_borders true</code></p><p><code>set preview_images_method ueberzug</code></p><h2 id="压缩包预览"><a href="#压缩包预览" class="headerlink" title="压缩包预览"></a>压缩包预览</h2><p>安装插件即可，不用修改配置文件，默认设置好了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yay -S atool</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装wine</title>
      <link href="2022/02/27/ArchLinux%E5%AE%89%E8%A3%85wine/"/>
      <url>2022/02/27/ArchLinux%E5%AE%89%E8%A3%85wine/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装-wine"><a href="#安装-wine" class="headerlink" title="安装 wine"></a>安装 wine</h1><ol><li><p>直接用 pacman 安装 wine</p><p>发现安装不了，解决方法：编辑<code>/etc/pacman.conf</code>文件</p><p>打开两行注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist</span><br></pre></td></tr></table></figure><p>然后更新源<code>sudo pacman -Sy</code></p><p>然后就可以下载了，下面是<a href="https://wiki.archlinux.org/title/Wine_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">官方</a>建议安装的 3 个包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S wine wine-gecko wine-mono</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/archlinux%20install%20wine.png"></p><blockquote><p>可以通过启用<a href="https://wiki.archlinux.org/title/Multilib">multilib</a> 库来 <a href="https://wiki.archlinux.org/title/Install">安装</a> <a href="https://archlinux.org/packages/?name=wine">wine</a> (稳定) 或 <a href="https://archlinux.org/packages/?name=wine-staging">wine-staging</a> (测试) 包。 <a href="https://wine-staging.com/">Wine Staging</a>是<a href="https://www.winehq.org/">Wine</a>的修补版本 <a href="https://www.winehq.org/">Wine</a>, 其中包含了 bug 修复和尚未集成到稳定或开发分支中的特性。</p><p>另请参阅<a href="https://wiki.archlinux.org/title/Wine_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Graphics_drivers">#图形驱动程序</a>和<a href="https://wiki.archlinux.org/title/Wine_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)#Sound"># 声音</a>以了解其他需求。</p><p>可以考虑为依赖于 Internet Explorer 和 .NET 的应用程序分别安装<a href="https://archlinux.org/packages/?name=wine-gecko">wine-gecko</a>和<a href="https://archlinux.org/packages/?name=wine-mono">wine-mono</a>。这些软件包并不是严格要求的，因为 Wine 会根据需要下载相关文件。但是，提前下载文件可以让您离线工作，这样 Wine 就不会为每个需要它们的 Wine 前缀下载文件。</p></blockquote></li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h3 id="缺少DLL"><a href="#缺少DLL" class="headerlink" title="缺少DLL"></a>缺少DLL</h3><p>在运行软件的时候提示缺少DLL文件</p><blockquote><p>问题代码：<code>0024:err:module:import_dll Library MSVBVM60.DLL</code></p></blockquote><p>解决方法：</p><p>下载<code>winetricks</code>工具，可以下载一些库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S winetrick</span></span><br></pre></td></tr></table></figure><p>然后需要下载<code>vb6run</code>，使用下面命令即可下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh winetricks vb6run</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你下载有问题的话，请看下面</p></blockquote><p>当下载出错（curl 拒绝连接）时，我们按照它的提示手动下载<code>VB6.0-KB290887-X86.exe</code>文件并且放到<code>~/.cache/winetricks/vb6run</code>目录下，然后再次运行下面命令即可解决。</p><p>下载 VB6.0 地址：<a href="https://web.archive.org/web/20210706045249/https://lon-01.lo4d.com/files/visual-basic-runtime-files/VB6.0-KB290887-X86.exe">https://web.archive.org/web/20210706045249/https://lon-01.lo4d.com/files/visual-basic-runtime-files/VB6.0-KB290887-X86.exe</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh winetricks vb6run</span></span><br></pre></td></tr></table></figure><h3 id="字体变方块"><a href="#字体变方块" class="headerlink" title="字体变方块"></a>字体变方块</h3><ol><li>拷贝 Windows 的字体<code>c:/Windows/Fonts</code>到<code>~/.wine/drive_c/windows/fonts/</code></li><li>来到<code>~/.wine/drive_c/windows/fonts/</code>目录下执行命令<code>sudo fc-cache -fv</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle及其管理工具</title>
      <link href="2022/02/25/Oracle11g%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOracle%E5%8F%8A%E5%85%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>2022/02/25/Oracle11g%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOracle%E5%8F%8A%E5%85%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>掌握SQL* Plus的使用方法</p><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><p>数据库 orcl  用户名 sys  密码 oracle</p><ol><li><p>用命令行模式启动SQL* Plus，用sys用户登录到orcl数据库。</p></li><li><p>使用动态性能视图查看orcl数据库的初始化参数设置。 </p></li><li><p>修改初始化参数open_cursors，设置其值为300。</p></li><li><p>用set命令来设置SQL* Plus的环境变量arraysize,pagesize和time，变量值自定。</p></li><li><p>切换用户到scott，密码 tiger。</p></li><li><p>编写一个脚本文件，内容为：查询emp表中的员工信息，并将每位员工的工资增加200。执行该文件。</p></li><li><p>查看emp表的结构。</p></li><li><p>使用PL/SQL Developer 连接数据库orcl，编写SQL语句，查询emp表中各员工的员工号和所在部门。</p></li></ol><h1 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h1><ol><li><p>用命令行模式启动SQL* Plus，用sys用户登录到orcl数据库</p><p>打开终端执行下面命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sqlplus sys<span class="operator">/</span>oracle<span class="variable">@ORCL</span> <span class="keyword">as</span> sysdba</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsmxZqPB.jpg"></p></li><li><p>使用动态性能视图查看orcl数据库的初始化参数设置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">show</span> <span class="keyword">parameter</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsOM1KFV.jpg" alt="img"></p><p>查看ORCL数据库初始化参数（部分参数截图)</p></li><li><p>修改初始化参数open_cursors，设置其值为300。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">alter</span> <span class="keyword">system</span> <span class="keyword">set</span> open_cursors<span class="operator">=</span><span class="number">300</span>;</span><br></pre></td></tr></table></figure></li><li><p>用set命令来设置SQL* Plus的环境变量arraysize,pagesize和time，变量值自定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">set</span> arraysize <span class="number">30</span> pagesize <span class="number">28</span> <span class="type">time</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsXUZ6xS.jpg" alt="img"></p></li><li><p>切换用户到scott，密码 tiger。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> conn scott<span class="operator">/</span>tiger<span class="variable">@orcl</span></span><br></pre></td></tr></table></figure><blockquote><p>解锁用户：SQL&gt; alter user scott account unlock;</p><p>更改密码：SQL&gt; alter user scott identified by tiger;（tiger为修改的密码）</p></blockquote></li><li><p>编写一个脚本文件，内容为：查询emp表中的员工信息，并将每位员工的工资增加200。执行该文件。</p><ul><li>先进行下面两个设置，否则终端显示数据杂乱。</li><li>设置每行显示的数据长度：SQL&gt; set linesize 300</li><li>设置每页显示的数据条数：SQL&gt; set pagesize 100</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsfJieUB.jpg" alt="img"></p><ul><li><p>然后编写emp_update.sql文件，我放到了默认路径下（用户目录)，sql文件内容如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update emp <span class="keyword">set</span> sal<span class="operator">=</span>sal<span class="operator">+</span><span class="number">200</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure></li><li><p>然后执行该sql文件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> edit emp_update.sql</span><br><span class="line"></span><br><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="variable">@emp</span>_update</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsszGvkV.jpg" alt="img"></p></li></ul></li><li><p>查看emp表的结构。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SQL</span><span class="operator">&gt;</span> <span class="keyword">desc</span> emp;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpspOiaH7.jpg" alt="img"></p></li><li><p>使用PL/SQL Developer 连接数据库orcl，编写SQL语句，查询emp表中各员工的员工号和所在部门。</p><ul><li><p>使用PL/SQL Developer工具连接数据库ORCL</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpskielnY.jpg" alt="img"></p></li><li><p>编写sql语句并执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> EMPNO,JOB <span class="keyword">from</span> emp;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/wpsTRsy6m.jpg" alt="img"></p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Oracle11g实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL性能优化</title>
      <link href="2022/01/26/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
      <url>2022/01/26/MySQL%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="索引的分类及创建"><a href="#索引的分类及创建" class="headerlink" title="索引的分类及创建"></a>索引的分类及创建</h2><ol><li><p>主键索引：主键自带索引（一个表必须创建主码）</p></li><li><p>普通索引：为普通列创建索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名称 <span class="keyword">on</span> 表名(列名);</span><br><span class="line"># 例子</span><br><span class="line"><span class="keyword">create</span> index inx_name <span class="keyword">on</span> student(name);</span><br></pre></td></tr></table></figure></li><li><p>唯一索引：唯一列，列中的数据是唯一的，比普通索引性能好</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> index 索引名称 <span class="keyword">on</span> 表名(列名); </span><br><span class="line"># 例子</span><br><span class="line"><span class="keyword">create</span> index inx_unique_name <span class="keyword">on</span> student(name);</span><br></pre></td></tr></table></figure></li><li><p>组合索引（组合索引）：一次性为表中的多个字段一起创建索引，最左前缀法则（如何命中联合索引的索引列）</p><p>注意：一个联合索引建议不要超过5个列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> index 索引名称 <span class="keyword">on</span> 表名(列名<span class="number">1</span>,列名<span class="number">2.</span>......); </span><br><span class="line"># 例子</span><br><span class="line"><span class="keyword">create</span> index inx_name_age <span class="keyword">on</span> student(name,age);</span><br></pre></td></tr></table></figure></li><li><p>全文索引</p><p>在进行查询的时候，数据源可能来自于不同的表或者不同的列，比如百度查找MySQL，来自于网页的标题或者网页的内容</p><p>MyISAM存储引擎支持全文索引，但是在实际生产环境中，不会使用MySQL提供的MyISAM存储引擎的全文索引功能来实现全文索引，而是使用第三方的全文索引中间件，比如ElasticSearch、Solr等</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DWM-动态窗口管理器</title>
      <link href="2022/01/22/DWM/"/>
      <url>2022/01/22/DWM/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装-DWM"><a href="#安装-DWM" class="headerlink" title="安装 DWM"></a>安装 DWM</h1><p>来到官网：<a href="https://dwm.suckless.org/">https://dwm.suckless.org/</a></p><p><strong>下面需要克隆dwm st dmenu</strong></p><blockquote><p>dwm：</p><p>st：</p><p>dmenu：</p></blockquote><ol><li><p>先克隆到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://git.suckless.org/dwm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://git.suckless.org/st</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://git.suckless.org/dmenu</span></span><br></pre></td></tr></table></figure></li><li><p>编译</p><p>来到克隆好的<code>dwm</code>文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo make clean install</span></span><br></pre></td></tr></table></figure><blockquote><p>执行完之后会多出两个文件<code>config.h</code>、<code>dwm</code></p></blockquote><p>来到克隆好的<code>st</code>文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo make clean install</span></span><br></pre></td></tr></table></figure><p>来到克隆好的<code>dmenu</code>文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo make clean install</span></span><br></pre></td></tr></table></figure><p>这些编译好的文件会移动到<code>/usr/local/bin</code>下</p></li><li><p>安装<code>xorg-xinit</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S xorg-xinit</span></span><br></pre></td></tr></table></figure></li><li><p>把<code>xorg-xinit</code>配置文件移动到家目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cp /etc/X11/xinit/xinitrc ~/.xinitrc</span></span><br></pre></td></tr></table></figure></li><li><p>来到家目录编辑<code>.xinitrc</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim ~/.xinitrc</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220122131242878.png" alt="image-20220122131242878"></p></li><li><p>控制台输入<code>startx</code>打开 dwm</p><blockquote><p>由于我现在还是 KED 桌面</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查当前的默认启动</span></span><br><span class="line">sudo systemctl get-default</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改默认启动为命令行</span></span><br><span class="line">sudo systemctl set-default multi-user.target</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改默认启动为图形界面</span></span><br><span class="line">sudo systemctl set-default graphical.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> startx</span>           </span><br><span class="line"></span><br><span class="line">/usr/lib/Xorg.wrap: Only console users are allowed to run the X server</span><br><span class="line">xinit: giving up</span><br><span class="line">xinit: unable to connect to X server: Connection refused</span><br><span class="line">xinit: server error</span><br><span class="line">Couldn&#x27;t get a file descriptor referring to the console.</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>前面已经装好了 dwm（动态窗口管理器）、st（终端）、dmenu（启动器）</p><p>下面进行状态栏和终端美化</p><p>状态栏用到 <strong>slstatus</strong> 工具，这个工具可以显示一些系统参数，比如系统时间，CPU内存信息，当然，如果需要显示其他的信息，则可以安装第三方小工具进行查看。其实就是用命令查看信息， 然后把信息截取（正则表达式等）得到我们需要在状态栏展示的信息。</p><p>终端使用上述安装的 st，它可以通过打补丁的形式对终端进行美化与功能拓展</p></blockquote><h1 id="slstatus-状态栏信息"><a href="#slstatus-状态栏信息" class="headerlink" title="slstatus 状态栏信息"></a>slstatus 状态栏信息</h1><blockquote><p>用来美化状态栏</p></blockquote><ol><li><p>先克隆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://git.suckless.org/slstatus</span></span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo make clean install</span></span><br></pre></td></tr></table></figure></li><li><p>配置</p><p>这是我的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static const struct arg args[] = &#123;</span><br><span class="line">        /* function format          argument */</span><br><span class="line">        &#123; run_command,  &quot;Kernel:%s | &quot;, &quot;uname -r | awk -F \&quot;-\&quot; &#x27;&#123; print $1 &#125;&#x27;&quot; &#125;,</span><br><span class="line">        &#123; disk_free,    &quot;Disk:%s | &quot;,   &quot;/&quot; &#125;,</span><br><span class="line">        &#123; cpu_perc,     &quot;CPU:%s%% | &quot;,  NULL &#125;,</span><br><span class="line">        &#123; ram_perc,     &quot;RAM:%s%%&quot;,     NULL &#125;,</span><br><span class="line">        &#123; ram_free,     &quot;/%s%% | &quot;,NULL &#125;,</span><br><span class="line">        &#123; run_command,  &quot;VOL:%s | &quot;,    &quot;amixer sget Master | awk -F \&quot;[][]\&quot; &#x27; /Mono:/ &#123; print $2 &#125;&#x27;&quot; &#125;,</span><br><span class="line">        &#123; run_command,  &quot;LIGHT:%s | &quot;,  &quot;light&quot; &#125;,</span><br><span class="line">        &#123; run_command,  &quot;MIC:%s | &quot;,    &quot;amixer sget Capture | awk -F \&quot;[][]\&quot; &#x27; /Left:/ &#123; print $2 &#125;&#x27;&quot; &#125;,</span><br><span class="line">        &#123; battery_perc, &quot;BAT:%s%% | &quot;,  &quot;BAT1&quot; &#125;,</span><br><span class="line">        &#123; datetime, &quot;%s &quot;,           &quot;%F %T&quot; &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要安装下面几个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S amixer</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S light</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="dwm-配置"><a href="#dwm-配置" class="headerlink" title="dwm 配置"></a>dwm 配置</h1><p><strong>dwm</strong> 配置主要包括基本设置和补丁</p><ul><li>基本设置：通过修改<code>config.h</code>参数实现快捷键的修改、组合键绑定脚本实现音量增减以及亮度的调节</li><li>补丁：<a href="https://dwm.suckless.org/patches/">到官网</a>下载补丁并打上补丁，但是打补丁可能会失败，这个时候需要手动打补丁，还是比较麻烦的</li></ul><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><ol><li><p>快捷键设置</p><p>Win = Mod4Mask</p><p>Alt = Mod1Mask</p></li><li><p>组合键绑定实现音量加减</p><ul><li>音量减：<code>amixer sset Master 5%- unmute</code></li><li>音量加：<code>amixer sset Master 5%+ unmute</code></li></ul><p>写两个脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">amixer sset Master 5%- unmute</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">amixer sset Master 5%+ unmute</span><br></pre></td></tr></table></figure><p>还有一个音量静音比较坎坷，即使可以通过命令</p><p><code>amixer sset Master toggle</code>实现静音，但是开启的话是不行的（有些电脑是可以的），虽然它显示音量是 ON，但是还是没有声音</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-02-27_19-45.png"></p><p>现在打开音量成了问题，然后在 <a href="https://wiki.archlinux.org/title/Advanced_Linux_Sound_Architecture_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">ArchWiki</a> 上找到了解决方法</p><p>两种方法</p><ol><li><p>使用amixer解除声卡的主音量静音</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> amixer sset Master unmute</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> amixer sset Speaker unmute</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> amixer sset Headphone unmute</span></span><br></pre></td></tr></table></figure></li><li><p>使用 alsamixer 解除声卡静音</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> alsmixer</span></span><br></pre></td></tr></table></figure><p>把下面两个地方设置为 00 即可解除静音</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-02-27_19-52.png"></p></li></ol></li><li><p>组合键绑定实现亮度调节</p><p><del>按照网上的教程：</del><a href="https://wiki.archlinux.org/title/Backlight_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">https://wiki.archlinux.org/title/Backlight_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)</a></p><p><del>先查看电脑是否存在<code>intel_backlight</code></del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /sys/class/backlight</span></span><br><span class="line">intel_backlight</span><br></pre></td></tr></table></figure><p><del>有的话使用英特尔的显卡可以使用<code>xbacklight</code>命令，但是我电脑没有效果</del></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> xbacklight -inc 10</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xbacklight -dec 10</span></span><br></pre></td></tr></table></figure><p>然后使用另外一个工具<code>light</code></p><p>首先安装：<code>sudo pacman -S light</code></p><p>light 的亮度调节为：减/增</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> light -U 10</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> light -A 10</span></span><br></pre></td></tr></table></figure><p>使用了没有效果（但是命令前面加 sudo 有效果），需要把当前用户添加到<code>video</code>组中</p><p>因为调节亮度是修改的<code>/sys/class/backlight/intel_backlight/brightness</code>文件，这个文件属于 video 组，想要获得该文件的执行权，加入该组就可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-02-27_19-19.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo usermod -a -G video minghui</span></span><br></pre></td></tr></table></figure><p>现在的话使用普通用户就可以修改亮度了。</p><p>同样写两个脚本，每次变化 5 的亮度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">light -U 5</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">light -A 5</span><br></pre></td></tr></table></figure><p>最后绑定到快捷键中去，打开 dwm 的配置文件<code>config.h</code></p></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-02-27_19-59.png"></p><h2 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h2><blockquote><p>dwm 中的一个桌面称为一个标签</p></blockquote><ol><li>+alpha：状态栏透明</li><li>+fullgaps-toggle：窗口边框间隙调整</li><li>+hide_vacant_tags：隐藏没有使用的标签</li><li>+rotatestack：改变打开应用的栈的结构</li><li>-r1522-viewontag：把当前聚焦窗口切换到其他标签时同时会切换过去，原来是切换过去停留在原标签</li><li>+pertag：每个标签使用不同的样式（平铺，浮动，层叠）</li><li>+fullscreen：标签全屏</li><li>+vanitygaps：增加窗口应用之间的间隙</li><li>+hide-and-restore：隐藏和显示窗口应用</li><li>-awesomebar：dwm启动时自动启动脚本，脚本路径可改变</li><li>+scratchpad：临时小窗口</li><li>-autostart：自动启动脚本</li><li>-awesomebar：显示状态栏多窗口名字</li></ol><p><em>win+数字：切换到对应的标签中</em></p><p><em>win+shift+数字：将当前聚焦的窗口移动的对应的标签</em></p><p><em>win+m： 切换标签模式为层叠</em></p><p><em>win+空格：切换窗口布局</em></p><p><em>win+j/k：切换聚焦程序</em></p><p><em>win+shift+j/k：对聚焦程序进行替补和降级</em></p><p><em>win+o：隐藏当前窗口的程序</em></p><p><em>win+shift+o：显示隐藏程序</em></p><p><em>然后是一些自己定义的一些打开程序的快捷键</em></p><p><em>win+shift+i: 打开idea</em></p><p><em>win+shift+t: 打开typora</em></p><p><em>win+shift+m: 打开网易云音乐</em></p><p><em>win+p: 打开dmenu</em></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux-Typora-Picgo</title>
      <link href="2022/01/15/ArchLinux-Typora-Picgo/"/>
      <url>2022/01/15/ArchLinux-Typora-Picgo/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Typora-安装"><a href="#Typora-安装" class="headerlink" title="Typora 安装"></a>Typora 安装</h1><ol><li><p>使用 cur 安装 1.0 版本以下的 Typora（pacman 只搜索到了 1.0 版本以上的）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yay typora</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115172823825.png" alt="image-20220115172823825"></p><blockquote><p>但是我此时是下载失败的，所以采用了下面的方法安装</p></blockquote></li><li><p>下载 tar 包，<a href="https://wwe.lanzout.com/iX1vkyt8aij">蓝奏云下载链接</a>，密码<code>9999</code></p><p>下载好后，我是复制到<code>/opt</code>目录下解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo tar -zxvf typora-0-11-18.tar.gz</span></span><br></pre></td></tr></table></figure><p>然后进入目录并且编辑<code>typora.desktop</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> typora</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo vim typora.desktop</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 我的编辑内容如下，如果路径不同则替换即可</span></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Name=Typora</span><br><span class="line">Exec=/opt/typora/Typora</span><br><span class="line">Type=Application</span><br><span class="line">Icon=/opt/typora/resources/assets/icon/icon_512x512.png</span><br></pre></td></tr></table></figure><blockquote><p>说明：<code>/opt/typora/Typora</code>这个文件是启动文件</p></blockquote><p>然后把这个启动快捷方式复制到<code>/usr/share/applications</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo cp typora.desktop /usr/share/applications</span></span><br></pre></td></tr></table></figure></li><li><p>安装完成</p><p>然后就可以在菜单中搜索到，但是没有图标还不知道怎么回事（图标路径没有错误）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115175515384.png" alt="image-20220115175515384"></p><blockquote><p>我的安装过程没有遇到什么错误，如果有错误网上查找即可</p></blockquote></li></ol><h1 id="Picgo-core-安装"><a href="#Picgo-core-安装" class="headerlink" title="Picgo(core) 安装"></a>Picgo(core) 安装</h1><ol><li><p>在下载<code>picgo</code>之前，确保本机已经安装了<code>nodejs</code>和<code>npm</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115190223518.png" alt="image-20220115190223518"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S nodejs npm</span></span><br></pre></td></tr></table></figure></li><li><p>满足1条件后，接下来用<code>npm</code>安装<code>picgo</code>（全局安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install picgo -g</span></span><br></pre></td></tr></table></figure><p><code>picgo</code>安装的位置是<code>/usr/lib/node_modules/</code>（即 npm 模块的保存位置，我没有修改 npm 下载模块的保存位置）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/picgo%E5%AE%89%E8%A3%85.png" alt="picgo安装"></p></li></ol><h1 id="Picgo-配置"><a href="#Picgo-配置" class="headerlink" title="Picgo 配置"></a>Picgo 配置</h1><p>先提前说明一下，上面安装好<code>picgo</code>之后，它还有一些文件是在<code>~/.picgo/</code>目录下，之后下载的插件以及配置文件都在这里！</p><blockquote><p>大致流程很简单：先下载两个插件，然后编辑配置文件指定上传到哪里</p><p>注意：下面的安装命令前面不要带<code>sudo</code></p></blockquote><ol><li><p>由于我是使用<code>gitee</code>作为图床，所以还要安装<code>picgo</code>插件</p><blockquote><p><code>gitee-uploader</code>：用于使用 gitee 作为图床</p><p><code>super-prefix</code>：上传图片时能在文件后缀加上时间戳</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> picgo install gitee-uploader super-prefix</span></span><br></pre></td></tr></table></figure><p>启用插件，空格键确定，上下键移动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> picgo use plugins</span></span><br></pre></td></tr></table></figure></li><li><p>接下来编辑上传的图床参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> picgo <span class="built_in">set</span> uploader</span></span><br></pre></td></tr></table></figure><blockquote><p>用键盘上下键选择<code>gitee</code>按回车</p><p><code>repo</code>：填写 gitee 仓库名称（用户名/仓库名）</p><p><code>branch</code>：上传分支，默认是 master</p><p><code>token</code>：gitee 生成的私人令牌</p><p><code>path</code>：上传到仓库的什么位置，默认是仓库根目录</p><p><code>customPath</code>：默认即可</p><p><code>customUrl</code>：默认即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115182224560.png" alt="image-20220115182224560"></p><p>当然也可以直接编辑配置文件，路径<code>~/.picgo/config.json</code></p><p>可以看到上面配置已经写入了文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115185245688.png" alt="image-20220115185245688"></p></li><li><p>编辑好图床参数后，选择使用<code>gitee</code>图床</p><p>上下键选择<code>gitee</code>并回车即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> picgo use uploader</span></span><br></pre></td></tr></table></figure></li><li><p>终于要打开<code>Typora</code>了，按图编辑</p><blockquote><p>这里为什么是填写<code>picgo upload</code></p><p>我们之前通过 npm 全局安装了 picgo，这里就是调用了这个上传命令（而上传到图床的参数我们又设置好了）</p><p>Typora 需要上传图片的时候，就会自动将图片的绝对路径拼接载在该命令的后面，然后调用该命令上传图片到图床，当看到步骤 5 的测试就会明白</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115183802691.png" alt="image-20220115183802691"></p></li><li><p>最后测试是否可以上传成功</p><blockquote><p>两种方式</p></blockquote><ul><li><p>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> picgo upload <span class="string">&quot;图片路径&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115183202296.png" alt="image-20220115183202296"></p></li><li><p>Typora 软件内有测试按钮</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220115183952539.png" alt="image-20220115183952539"></p></li></ul><blockquote><p>如果上传失败的话，注意看报错</p></blockquote></li><li><p>最后献上</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/picgo%E5%AE%89%E8%A3%85-%E6%99%AE%E9%80%9A%E7%94%A8%E6%88%B7.png" alt="picgo安装-普通用户"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux开发环境配置</title>
      <link href="2022/01/11/ArchLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>2022/01/11/ArchLinux%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li><p><code>vscode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yay -S visual-studio-code-bin</span></span><br></pre></td></tr></table></figure><p>程序主体文件在<code>/opt/visual-studio-code/</code></p><p>如果要登录<code>Github</code>等帐号同步时，发现不能登录成功，请安装<code>qtkeychain</code>和<code>gnome-keyring</code>，然后就可以正常登录了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S qtkeychain gnome-keyring</span></span><br></pre></td></tr></table></figure></li><li><p><code>IDEA</code>下面两种都行，安装的是最新版本的（我此时是 2021.3-1）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S intellij-idea-ultimate-edition</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yay -S intellij-idea-ultimate-edition</span></span><br></pre></td></tr></table></figure><p>程序主体文件在<code>/opt/intellij-idea-ultimate-edition/</code></p><blockquote><p>安装好了之后还要破解：参考教程：<a href="https://www.cnblogs.com/LzsCxb/p/15691203.html">https://www.cnblogs.com/LzsCxb/p/15691203.html</a></p></blockquote><p>下载:<a href="https://wwe.lanzout.com/iQGkbyz13ha">https://wwe.lanzout.com/iQGkbyz13ha</a> 密码:9999</p><p>然后解压，将里面的<code>ja-netfilter</code>文件夹放到自己喜欢的位置，我放到了和 IDEA 程序一个目录下</p><p>来到 IDEA 点击<code>help -&gt; Edit Custom VM Options...</code>写入下面文件，路径替换成自己的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-javaagent:/opt/intellij-idea-ultimate-edition/ja-netfilter/ja-netfilter.jar</span><br></pre></td></tr></table></figure><p>然后重启 IDEA 即可</p></li><li><p><code>JDK</code></p><blockquote><p>可以共存多个 JDK</p></blockquote><ul><li><p>JDK8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S jdk8-openjdk</span></span><br></pre></td></tr></table></figure></li><li><p>JDK11</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S jdk11-openjdk</span></span><br></pre></td></tr></table></figure><p>安装位置<code>/usr/lib/jvm/</code></p></li></ul><blockquote><p>查看现在所使用的 jdk 版本</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> archlinux-java status</span></span><br><span class="line">Available Java environments:</span><br><span class="line">  java-11-openjdk (default)</span><br><span class="line">  java-8-openjdk</span><br></pre></td></tr></table></figure><blockquote><p>更改默认 JDK，比如切换为 JDK8</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo archlinux-java <span class="built_in">set</span> java-8-openjdk</span></span><br></pre></td></tr></table></figure></li><li><p><code>nodejs</code></p></li><li><p><code>npm</code></p></li><li><p><code>tomcat</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S tomcat8</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S tomcat9</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman -S tomcat10</span></span><br></pre></td></tr></table></figure><p>各个文件位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119120009047.png" alt="image-20220119120009047"></p><p>在 IDEA 里面设置找到 tomcat 的主文件夹</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119120253705.png" alt="image-20220119120253705"></p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装中文输入法及软件</title>
      <link href="2022/01/10/ArchLinux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
      <url>2022/01/10/ArchLinux%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="中文输入法-rime"><a href="#中文输入法-rime" class="headerlink" title="中文输入法-rime"></a>中文输入法-rime</h1><blockquote><p>安装好 ArchLinux 后是没有中文输入法，需要自己安装</p></blockquote><ol><li><p><code>fcitx</code>：输入法引擎</p></li><li><p><code>fcitx-qt5</code>：输入法模块</p></li><li><p><code>fcitx-configtool</code>：用于配置 Fcitx 输入法的 GUI 工具</p></li><li><p><code>fcitx-rime</code></p></li><li><p>安装上面四个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx fcitx-qt5 fcitx-configtool fcitx-rime</span><br></pre></td></tr></table></figure></li><li><p>写入下面内容到<code>~/.xprofile</code>文件，似乎原来是没有的，创建一个就行了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure></li><li><p>然后打开<code>fcitx</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220118185904774.png" alt="image-20220118185904774"></p></li><li><p>看到已经有了<code>rime</code>输入法，不过这里显示的是繁体</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220118190009929.png" alt="image-20220118190009929"></p></li></ol><h1 id="终端-zsh"><a href="#终端-zsh" class="headerlink" title="终端 zsh"></a>终端 zsh</h1><ol><li><p>安装<code>zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zsh</span><br></pre></td></tr></table></figure></li><li><p>安装<code>oh-my-zsh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>如果安装不了，到 oh-my-zsh 的仓库找到<code>install.sh</code>文件，并复制里面的内容，在你喜欢的位置新建文件<code>install.sh</code>并粘贴复制内容，然后给予执行权限并执行该脚本</p><p><code>sudo chmod +x install.sh</code></p><p><code>./install.sh</code></p></blockquote></li><li><p>后面就是插件的安装了</p><blockquote><p>插件集合：<a href="https://github.com/zsh-users">https://github.com/zsh-users</a></p></blockquote><ul><li><p><code>zsh-autosuggestions</code>：记录命令，提示命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zh/custom&#125;</span>/plugins/zsh-autosuggestions</span></span><br></pre></td></tr></table></figure><p>下好之后在<code>~/.zshrc</code>文件导入插件即可</p></li><li><p><code>zsh-syntax-highlighting</code>：语法高亮</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span></span><br></pre></td></tr></table></figure><p>下好之后在<code>~/.zshrc</code>文件导入插件即可</p></li><li><p><code>colorls</code>：<a href="https://github.com/athityakumar/colorls">详情：https://github.com/athityakumar/colorls</a>，安装它需要<code>ruby version &gt;= 2.5</code>和<code>Nerd font</code>字体</p><ul><li><p>没有<code>ruby</code>先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pacman ruby</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ruby --version</span></span><br></pre></td></tr></table></figure></li><li><p>没有字体先安装：<a href="https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/SourceCodePro/Semibold/complete/Sauce%20Code%20Pro%20Semibold%20Nerd%20Font%20Complete%20Mono.ttf">链接</a></p></li><li><p>然后安装本体<code>colorls</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem install colorls</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119093437484.png" alt="image-20220119093437484"></p><blockquote><p>这里要把上面的路径添加到 zsh 的 PATH（环境变量）中，不导入 zsh 识别不到，如下图</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119093716902.png" alt="image-20220119093716902"></p><p>添加环境变量：编辑<code>~/.zshrc</code>文件（我把编辑内容放到了文件最后），PATH 替换成自己的，然后 source 重新导入配置文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119094047444.png" alt="image-20220119094047444"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119094518280.png" alt="image-20220119094518280"></p><p>最后，不想每次都输入<code>colorls</code>查看，需要在<code>~/.zshrc</code>文件中绑定命令，然后记得 source 一下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119094916464.png" alt="image-20220119094916464"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20220119095024415.png" alt="image-20220119095024415"></p></li></ul></li></ul></li></ol><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><blockquote><p>下面这些均可从<code>aur</code>库搜索到，可用<code>pacman</code>或者<code>yay</code>命令下载</p></blockquote><ol><li><code>vim/neovim</code>：vim 编辑器</li><li><code>google-chrome</code>：谷歌浏览器</li><li><code>firefox</code>：火狐浏览器</li><li><code>ranger</code>：终端文件浏览器，像用 vim 一样</li><li><code>zy-player</code>：在线视频播放器，可观看在线电影等</li><li><code>vlc</code>：强大的视频播放器</li><li><code>yesplaymusic</code>：音乐播放器，用网易云账户登录</li><li><code>utools</code>：神器</li><li><code>neofetch</code>：装逼神器</li><li><code>flameshot</code>：截图工具</li><li><code>telegram</code>：电报</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux系统安装</title>
      <link href="2022/01/08/ArchLinux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
      <url>2022/01/08/ArchLinux%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="ArchLinux安装步骤"><a href="#ArchLinux安装步骤" class="headerlink" title="ArchLinux安装步骤"></a>ArchLinux安装步骤</h1><h2 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h2><blockquote><p>由于我使用的是WIFI，所以需要手动连接，如果你连接的是路由器LAN口的网线，那么插上就行了！</p></blockquote><ol><li><p>输入<code>iwctl</code>，会进入这个工具的使用模式</p></li><li><p>输入<code>device list</code>查看网卡设备，我是有一个 <strong>wlan0</strong> 的网卡设备</p></li><li><p>输入<code>station wlan0 scan</code>，扫描 WIFI</p></li><li><p>输入<code>station wlan0 get-networks</code>，查看可用 WIFI 列表</p></li><li><p>下面连接WIFI，输入<code>station wlan0 connect 要连接的WIFI名称</code>，回车后输入密码</p></li><li><p>然后更新一下系统时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> timedatectl set-ntp <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>注意看我下面WIFI名称显示方块， 其实就是中文字符显示不出来，建议将WIFI名称改为非中文！</p></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_20-50.png"></p><h2 id="分区并挂载"><a href="#分区并挂载" class="headerlink" title="分区并挂载"></a>分区并挂载</h2><ol><li><p>查看当前磁盘分区<code>fdisk -l</code>详情</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_21-14.png"></p></li><li><p>分区可以使用两个工具，<code>cfdisk</code>和<code>gdisk</code>，前者是有DOS界面的，后者命令行，下面我用的是 gdisk</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_21-17.png"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_21-16_1.png"></p></li><li><p>然后就是分区了，最少建立两个分区（有boot分区的情况下），即<code>根分区</code>和<code>swap</code>分区</p><ul><li>swap分区大小可以分内存一半，或者与内存等大</li><li>根分区为其他未分配空间</li></ul><blockquote><p>如果是硬盘里面只装这一个系统就还需要建立<code>boot</code>分区，用来引导系统。因为我原本是还有一个Windows系统，Windows已经创建了boot分区，我就可以不用创建了。</p></blockquote><p>这里分区分好之后，假设分区情况如下</p><ul><li>boot分区：/dev/nvme0n1p1</li><li>根分区：/dev/nvme0n1p5</li><li>swap分区：/dev/nvme0n1p6</li></ul><p>下面将分区格式化，执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkfs.ext4 -L ArchFSBoot /dev/nvme0n1p5<span class="comment"># -L 指定卷标名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkswap /dev/nvme0n1p6</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> swapon /dev/nvme0n1p6<span class="comment"># 打开交换分区</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_21-05.png"></p></li><li><p>分区完成后，进行挂载</p><p>挂载的目的就是写文件到刚刚所建分区上（刚刚已经格式化了，什么东西都没有），因为我们现在所处的是光盘镜像（可以看到是红色的root），还未安装系统到新建分区上，因此需要通过挂载刚刚新建分区到光盘镜像的某个目录下，与此同时，Linux挂载目录通常是/mnt下</p><p>下面把根分区（/dev/nvme0n1p5）挂载到<code>/nmt</code>下</p><p>swap分区（/dev/nvme0n1p6）挂载到<code>/mnt/boot</code>下，在挂载前，需要创建<code>/mnt/boot</code>目录</p><p>下面开始挂载，注意挂载顺序，先挂载外面的<code>/mnt</code>，然后挂载/mnt下的boot，当然，挂载前需要创建该<code>/mnt/boot</code>目录</p><p>下面假设先创建<code>/mnt/boot</code>目录并将此目录作为硬盘<code>/dev/nvme0n1p6</code>的挂载点，直到这里没有任何问题，然后挂载硬盘<code>/dev/nvme0n1p5</code>到<code>/mnt</code>，然后你查看/mnt下的文件<code>ls /mnt</code>，会发现刚刚挂载的<code>/mnt/boot</code>没有了。这里我是认为是先挂载的<code>/mnt/boot</code>这个目录被后面挂载的<code>/mnt</code>所掩盖了，即挂载一个目录后，该目录原始的文件会看不到了，具体原因还未知！类比刚刚，先挂载的<code>/mnt/boot</code>被后面挂载的<code>/mnt</code>掩盖掉了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mount /dev/nvme0n1p5 /mnt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir /mnt/boot</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mount /dev/nvme0n1p1 /mnt/boot</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_21-06.png"></p></li></ol><h2 id="设置镜像源"><a href="#设置镜像源" class="headerlink" title="设置镜像源"></a>设置镜像源</h2><p>编辑<code>/etc/pacman.d/mirrorlist</code>文件，查找 <strong>China</strong> ，把国内源复制到最前面，最上面的源优先级最高</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-16_20-26.png"></p><blockquote><p>补充一个生成镜像源的网站：<a href="https://archlinux.org/mirrorlist/">https://archlinux.org/mirrorlist/</a></p></blockquote><h2 id="开始装系统"><a href="#开始装系统" class="headerlink" title="开始装系统"></a>开始装系统</h2><p>书接上文，我们把上面的所做的工作用一个图表示</p><p>这里很好理解，<code>/mnt</code>等价于需装系统(ArchLinux)的<code>/</code></p><p>而<code>/mnt/boot</code>等价于<code>/boot</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-05_11-53.png"></p><p>知道了<code>/mnt</code>就是待装系统的<code>/</code>那么现在在<code>/mnt</code>下装系统，官方提供了一条命令<code>pacstrap</code>，下面是我安装的一些东西，按个人需求安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pacstrap /mnt base base-devel linux linux-firmware networkmanager vim intel-ucode git</span></span><br></pre></td></tr></table></figure><p>等待即可！！！</p><p>安装好了之后生成文件表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</span></span><br></pre></td></tr></table></figure><blockquote><p>/etc/fstab是Linux系统下的n硬盘挂载点文件</p></blockquote><h2 id="新系统配置"><a href="#新系统配置" class="headerlink" title="新系统配置"></a>新系统配置</h2><p>刚刚已经将系统安装好了，并且生成了文件表，下面切换到新安装的ArchLinux系统</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> arch-chroot /mnt</span></span><br></pre></td></tr></table></figure><ol><li><p>语言</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /ect/local.gen</span></span><br></pre></td></tr></table></figure><p>找到<code>zh_CN.UTF-8 UTF-8</code>和<code>en_US.UTF-8 UTF-8</code>前面<code>#</code>删除</p><p>生成语言文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> locale-gen</span></span><br></pre></td></tr></table></figure><p>设置系统缺省语言文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf</span></span><br></pre></td></tr></table></figure></li><li><p>设置时区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> timedatectl set-ntp <span class="literal">true</span></span></span><br></pre></td></tr></table></figure></li><li><p>硬件时钟</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hwclock --systohc</span></span><br></pre></td></tr></table></figure></li><li><p>主机名，我这里设置为 Mingarch</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> Mingarch &gt; /etc/hostname</span></span><br></pre></td></tr></table></figure></li><li><p>域名解析文件（hosts）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/hosts</span></span><br></pre></td></tr></table></figure><p>我的内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Static table lookup <span class="keyword">for</span> hostnames.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> See hosts(5) <span class="keyword">for</span> details.</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">::1             localhost</span><br><span class="line">127.0.1.1       Mingarch.localdomain    Mingarch</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里面的 Mingarch 是主机名，不要搞错了</p></blockquote></li><li><p>给普通用户执行sudo命令权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> visudo</span></span><br></pre></td></tr></table></figure><p>找到<code>%wheel ALL=(ALL) ALL</code>，前面<code>#</code>删除</p></li><li><p>给 root 用户重新设密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> passwd</span></span><br></pre></td></tr></table></figure></li><li><p>新建用户并加入组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> useradd -m minghui</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> usermod -aG wheel,audio,video,optical,storage minghui</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> passwd minghui</span></span><br></pre></td></tr></table></figure></li><li><p>重要一部，安装引导，使用 systemd-boot 安装</p><p><a href="https://wiki.archlinux.org/title/Systemd-boot_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)">systemd-boot</a>系统自带：这是一个<a href="https://www.cxyzjd.com/article/weixin_42571210/90610334">教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> bootctl install</span></span><br></pre></td></tr></table></figure><p>安装好了之后，进行简单配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/2022-03-05_12-44.png"></p><p>需要配置<code>/boot/loader/loader.conf</code>和<code>/boot/loader/entries/</code></p><ul><li><p>首先到<code>/boot/loader/entries/</code>新建一个<code>.conf</code>文件，我这里建为<code>Arch.conf</code>，然后编辑它，我的内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title Arch Linux</span><br><span class="line">linux   /vmlinuz-linux</span><br><span class="line">initrd  /intel-ucode.img</span><br><span class="line">initrd  /initramfs-linux.img</span><br><span class="line">options root=&quot;PARTUUID=87898fba-ac8a-4703-b317-a858ca9a7ffd&quot; rw</span><br></pre></td></tr></table></figure><blockquote><p>vmlinuz-linux：内核文件</p></blockquote><p>上面的<code>options root=</code>指点根文件系统在哪里，我这里使用了PARTUUID，具体查看方法，如果是在 vim 编辑器下，直接输入<code>:r!blkid</code>会写在当前打开文件，然后找到根分区的PARTUUID复制过去，最后别忘记删除无关内容</p></li><li><p>编辑<code>/boot/loader/loader.conf</code>文件</p><p>我的内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default Arch</span><br><span class="line">timeout 5</span><br></pre></td></tr></table></figure><blockquote><p>default Arch：表示的是默认读取名为Arch的配置文件，该文件即为刚刚创建的，<code>/boot/loader/entries/Arch.conf</code></p></blockquote></li></ul></li></ol><h2 id="新系统重启"><a href="#新系统重启" class="headerlink" title="新系统重启"></a>新系统重启</h2><ol><li><p>先回到光盘镜像文件<code>exit</code>或者<code>Ctrl+D</code></p></li><li><p>卸载开始挂载的分区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> umount -R /mntr</span></span><br></pre></td></tr></table></figure></li><li><p>终于可以<code>reboot</code>了，完成</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Study</title>
      <link href="2021/12/27/Vue/"/>
      <url>2021/12/27/Vue/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 导航，可以展开</span><br><span class="line">&lt;el-submenu index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">      &lt;template slot&#x3D;&quot;title&quot;&gt;</span><br><span class="line">        &lt;i class&#x3D;&quot;el-icon-location&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;title&quot;&gt;导航一&lt;&#x2F;span&gt;</span><br><span class="line">      &lt;&#x2F;template&gt;</span><br><span class="line">      &lt;el-menu-item-group&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;title&quot;&gt;分组一&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-2&quot;&gt;选项2&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">      &lt;el-menu-item-group title&#x3D;&quot;分组2&quot;&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-3&quot;&gt;选项3&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-menu-item-group&gt;</span><br><span class="line">      &lt;el-submenu index&#x3D;&quot;1-4&quot;&gt;</span><br><span class="line">        &lt;span slot&#x3D;&quot;title&quot;&gt;选项4&lt;&#x2F;span&gt;</span><br><span class="line">        &lt;el-menu-item index&#x3D;&quot;1-4-1&quot;&gt;选项1&lt;&#x2F;el-menu-item&gt;</span><br><span class="line">      &lt;&#x2F;el-submenu&gt;</span><br><span class="line">    &lt;&#x2F;el-submenu&gt;</span><br></pre></td></tr></table></figure><h1 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h1><ol><li><p>安装<code>node.js</code></p></li><li><p>安装<code>vue-cli</code>脚手架构建工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g @vue/cli</span></span><br></pre></td></tr></table></figure><p><code>vue -V</code>查看信息</p><p>指定版本:<br>如是3.0以下<br>npm install -g vue-cli版本号</p><p>如是3.0以上<br>npm install -g @vue/cli@版本号心</p></li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口URL： http://huige.link:8080/info-academic/SignIn</span><br><span class="line">请求方式：POST</span><br><span class="line">请求参数：Name、Password</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验六：BurpSuite 捕获并修改 HTTP 报文</title>
      <link href="2021/12/25/%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9ABurpSuite%E6%8D%95%E8%8E%B7%E5%B9%B6%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/"/>
      <url>2021/12/25/%E5%AE%9E%E9%AA%8C%E5%85%AD%EF%BC%9ABurpSuite%E6%8D%95%E8%8E%B7%E5%B9%B6%E4%BF%AE%E6%94%B9HTTP%E6%8A%A5%E6%96%87/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><ol><li>安装与配置</li><li>捕获 HTTP 报文并分析其格式</li><li>修改 HTTP 报文（选做）</li></ol><h2 id="BurpSuite-安装"><a href="#BurpSuite-安装" class="headerlink" title="BurpSuite 安装"></a>BurpSuite 安装</h2><blockquote><p>如果已经安装了可以忽略</p></blockquote><blockquote><p>下面我安装的是汉化版本</p></blockquote><blockquote><p>BurpSuite 资源包由网名为<code>轮回百转长相依</code>同学赞助提供！</p></blockquote><ol><li><p>下载 BurpSuite 资源包 和 JDK1.8（如果自身电脑JDK是1.8就不用下载）</p><p>我电脑是 JDK 14，所以我需要 JDK1.8</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225191819.png" alt="image-20211225191819534"></p></li><li><p>解压得到如下文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225192058.png" alt="image-20211225192058358"></p></li><li><p>打开<code>BurpSuite v2.1</code>文件夹，用记事本编辑<code>link.bat</code>文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225192207.png" alt="image-20211225192207084"></p><p>在红框编辑 JDK1.8 的路径，并保存退出</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225192407.png" alt="image-20211225192407362"></p></li><li><p>然后点击<code>Start.vbs</code>，来到此界面</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225192652.png" alt="image-20211225192652280"></p></li><li><p>这个时候请输入许可证秘钥，双击<code>burp-loader-keygen-2.jar</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225193218.png" alt="image-20211225193218707"></p><blockquote><p>如果双击不是打开这个激活工具界面，那是你电脑打开 jar 文件的默认方式不是用 java 打开，这样就需要用命令运行 jar 文件（前提是有 java 环境，不过应该都有吧！）</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211227143656.png" alt="image-20211227143656043"></p><p>然后再输入<code>java -jar burp-loader-keygen-2.jar</code>并按回车就会运行这个 jar 文件了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211227144018.png" alt="image-20211227144018450"></p></li><li><p>选择手动激活</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225193302.png" alt="image-20211225193302247"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225193551.png" alt="image-20211225193551405"></p></li><li><p>然后就完成了，</p></li></ol><h2 id="捕获-HTTP-报文并分析其格式"><a href="#捕获-HTTP-报文并分析其格式" class="headerlink" title="捕获 HTTP 报文并分析其格式"></a>捕获 HTTP 报文并分析其格式</h2><blockquote><p>捕获 HTTP 报文需要用到浏览器，火狐浏览器比较好配置，下载链接：<a href="https://www.firefox.com.cn/">https://www.firefox.com.cn/</a></p></blockquote><ol><li><p>配置火狐浏览器</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225210142.png" alt="image-20211225210142377"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226134238.png" alt="image-20211226134238432"></p></li><li><p>通过火狐浏览器访问<code>www.51cpc.com</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225211928.png" alt="image-20211225211928673"></p></li><li><p>看到已经被拦截了，浏览器一直是加载状态</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225212036.png" alt="image-20211225212036351"></p></li><li><p>下面对该 HTTP 请求报文放包处理，也就是 BurpSuite 会将从浏览器拦截到的 HTTP 请求发送给对应服务器，服务器就会将 HTTP 响应报文发给 BurpSuite，BurpSuite 再将响应数据给浏览器，浏览器解析该数据，展示出来</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225212056.png" alt="image-20211225212056914"></p><p>放包之后可以看到已经得到了响应</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211225212114.png" alt="image-20211225212114588"></p></li><li><p>下面分析其报文格式</p><blockquote><p>请求行</p></blockquote><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>GET</strong></td><td><strong>请求方法，该请求是 GET 请求</strong></td></tr><tr><td><strong>/</strong></td><td><strong>请求 URL，/ 表示请求网站根目录</strong></td></tr><tr><td><strong>HTTP/1.1</strong></td><td><strong>HTTP 协议及版本</strong></td></tr></tbody></table><blockquote><p>请求头</p></blockquote><table><thead><tr><th><strong>参数</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>Host</strong></td><td><strong>Host</strong></td></tr><tr><td><strong>User_Agent</strong></td><td><strong>表示用户本地环境（工具环境）</strong></td></tr><tr><td><strong>Accept</strong></td><td><strong>浏览器可解析的应用环境</strong></td></tr><tr><td><strong>Accept-Language</strong></td><td><strong>浏览器可解析的语言类型</strong></td></tr><tr><td><strong>Accept-Encoding</strong></td><td><strong>浏览器可解析的编码方式</strong></td></tr><tr><td><strong>DNT</strong></td><td><strong>禁止追踪，1表示用户不想被第三方网站追踪，0代表接受追踪</strong></td></tr><tr><td><strong>Connection</strong></td><td><strong>表示连接类型，close表示连接以经关闭，</strong></td></tr><tr><td><strong>Upgrade-Insecure-Requests</strong></td><td><strong>是一个请求首部，用来向服务器端发送信号，表示客户端优先选择加密及带有身份验证的响应</strong></td></tr><tr><td><strong>Pragma</strong></td><td><strong>是一个在 HTTP/1.0 中规定的通用首部，</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Pragma">详情</a></td></tr><tr><td><strong>Cache-Control</strong></td><td><strong>通过指定指令来实现缓存机制，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control">详情</a></strong></td></tr></tbody></table><blockquote><p>请求头还有很多参数，具体查看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers</a></p></blockquote></li></ol><h2 id="修改-HTTP-报文"><a href="#修改-HTTP-报文" class="headerlink" title="修改 HTTP 报文"></a>修改 HTTP 报文</h2><ol><li><p>重新来到火狐浏览器，通过必应搜索来修改 HTTP 报文</p><p>先地址栏输入<code>https://cn.bing.com</code>进入必应搜索首页</p><blockquote><p>这里为什么不用百度的原因：百度首页是异步更新，每次输入一个字符就会发一个请求，会产生很多与此次实验无关的报文，到时候太难找到需要修改的报文，所以用必应搜索更加容易找到我们需要修改的报文</p></blockquote><p>遇到这种情况需要安装证书，下面安装证书</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226134755.png" alt="image-20211226134755283"></p><p>打开新标签输入<code>http://burp</code>，点击<code>CA Certificate</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226134942.png" alt="image-20211226134942544"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135039.png" alt="image-20211226135039391"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135137.png" alt="image-20211226135137579"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135159.png" alt="image-20211226135159910"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135315.png" alt="image-20211226135314975"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135409.png" alt="image-20211226135409006"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135539.png" alt="image-20211226135539622"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135602.png" alt="image-20211226135602078"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135610.png" alt="image-20211226135610761"></p><p>再来到火狐浏览器设置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135841.png" alt="image-20211226135841798"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226135959.png" alt="image-20211226135959079"></p><p>火狐下载路径一般是在下载目录下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226140031.png" alt="image-20211226140031795"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226140128.png" alt="image-20211226140128267"></p><p>然后重新打开一个新标签页<code>https://cn.bing.com</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226140433.png" alt="image-20211226140433164"></p><p>然后点放包，浏览器就把响应的数据解析出来了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226140702.png" alt="image-20211226140702715"></p></li><li><p>在必应搜索栏输入<code>Hello World</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226140829.png" alt="image-20211226140829277"></p></li><li><p>然后找到该搜索的<code>HTTP请求报文</code></p><p>前面可能有很多包，需要放包，一个个观察，找到 URL 中包含<code>Hello World</code>的包</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226141119.png" alt="image-20211226141119039"></p></li><li><p>下面对该请求报文进行修改</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226141550.png" alt="image-20211226141550681"></p></li><li><p>点击放包，看浏览器变化</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226141632.png" alt="image-20211226141632489"></p><p>然后看到浏览器的搜索内容由原来的<code>Hello World</code>变成了<code>BurpSuite</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211226141709.png" alt="image-20211226141709216"></p></li><li><p>修改 HTTP 报文完成！</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Burp Suite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7 安装组件</title>
      <link href="2021/12/19/CentOS7%20%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/"/>
      <url>2021/12/19/CentOS7%20%E5%AE%89%E8%A3%85%E7%9B%B8%E5%85%B3%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install java-11-openjdk-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash">java -version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install java-11-openjdk</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --config java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum install java-1.8.0-openjdk-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> alternatives --config java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -version</span></span><br></pre></td></tr></table></figure><ol><li><p>安装 JDK 11</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install java-11-openjdk-devel</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211219152348.png" alt="image-20211219152348376"></p></li><li><p>安装 JDK 8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install java-1.8.0-openjdk-devel</span></span><br></pre></td></tr></table></figure></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211219152748.png" alt="image-20211219152748259"></p><h1 id="安装-tomcat"><a href="#安装-tomcat" class="headerlink" title="安装 tomcat"></a>安装 tomcat</h1><ol><li><p>下载 tomcat</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.73/bin/apache-tomcat-8.5.73.tar.gz</span></span><br></pre></td></tr></table></figure><blockquote><p>如果报错</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y ca-certificates</span></span><br></pre></td></tr></table></figure></li><li><p>开启</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211219160230.png" alt="image-20211219160229941"></p></li></ol><h1 id="部署war"><a href="#部署war" class="headerlink" title="部署war"></a>部署war</h1><ol><li><p>来到<code>/usr/local/tomcat/apache-tomcat-8.5.73/webapps</code></p></li><li><p>上传<code>war</code>文件到这个目录，使用<code>rz</code>上传文件</p></li><li><p>来到<code> /usr/local/tomcat/apache-tomcat-8.5.73/conf</code>打开<code>service.xml</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Context path=&quot;/&quot; docBase=&quot;/usr/local/tomcat/apache-tomcat-8.5.73/webapps/info-academic.war&quot; debug=&quot;0&quot; reloadable=&quot;true&quot;/&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211219161834.png" alt="image-20211219161834022"></p></li><li><p>来到<code>/usr/local/tomcat/apache-tomcat-8.5.73/bin</code>，启动<code>tomcat</code></p><blockquote><p>下面是汇总</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211219162413.png" alt="image-20211219162413672"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7搭建FTP服务器</title>
      <link href="2021/12/15/CentOS7%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/12/15/CentOS7%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="安装下载"><a href="#安装下载" class="headerlink" title="安装下载"></a>安装下载</h1><ol><li><p>查看是否安装</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216121639.png" alt="image-20211216121631860"></p></li><li><p>安装</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216121758.png" alt="image-20211216121757951"></p></li><li><p>主配置文件<code>/etc/vsftpd/vsftpd.conf</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216121932.png" alt="image-20211216121932300"></p></li><li><p>查看配置，并去掉注释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat vsftpd.conf | grep -v <span class="string">&quot;#&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216122216.png" alt="image-20211216122216041"></p></li><li><p>为了更好的配置，做一下处理</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216122437.png" alt="image-20211216122437658"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216131216.png" alt="image-20211216131216046"></p></li></ol><h1 id="本地登录"><a href="#本地登录" class="headerlink" title="本地登录"></a>本地登录</h1><blockquote><p>本地用户模式是通过 Linux 系统<code>本地的账户密码</code>信息进行认证的模式，相较于匿名开放模式更安全，而且配置起来相对简单。但是如果被黑客破解了账户的信息，就可以畅通无阻地登录FTP服务器，从而完全控制整台服务器。</p></blockquote><ol><li><p>先关闭匿名登录，开启本地登录（默认是开启的）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216133709.png" alt="image-20211216133709569"></p></li><li><p>下面用<code>ftp</code>用户登录</p><p>先修改<code>ftp</code>用户的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> passwd ftp</span></span><br></pre></td></tr></table></figure><p><code>/var/ftp/</code>默认是登录后可以看到的文件夹</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216132908.png" alt="image-20211216132908857"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216133640.png" alt="image-20211216131514671"></p></li><li><p>创建文件发现被拒绝了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216134030.png" alt="image-20211216134030339"></p><p>给权限</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216134226.png" alt="image-20211216134226534"></p></li><li><p>下面就可以创建并修改了</p></li></ol><h1 id="如果无法登录"><a href="#如果无法登录" class="headerlink" title="如果无法登录"></a>如果无法登录</h1><blockquote><p>无法登录考虑到防火墙</p></blockquote><ol><li><p>查看是否打开</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216144256.png" alt="image-20211216144255926"></p></li><li><p>核实防火墙是否加载了FTP 模块，发现结果为空</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216144323.png" alt="image-20211216144323523"></p></li><li><p>开放和关闭 FTP 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">暂时开放 FTP 服务</span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --add-service=ftp</span></span><br><span class="line"></span><br><span class="line">永久开放 FTP 服务</span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --add-service=ftp --permanent</span></span><br><span class="line"></span><br><span class="line">永久关闭 FTP 服务</span><br><span class="line"><span class="meta">$</span><span class="bash"> firewall-cmd --remove-service=ftp --permanent</span></span><br></pre></td></tr></table></figure></li><li><p>开发和检查是否生效</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211216144717.png" alt="image-20211216144717781"></p></li></ol><blockquote><p>参考：</p></blockquote><ul><li><a href="https://www.modb.pro/db/111811">https://www.modb.pro/db/111811</a></li><li><a href="https://zhuanlan.zhihu.com/p/354583347">https://zhuanlan.zhihu.com/p/354583347</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验五：Wireshark 抓包分析</title>
      <link href="2021/12/08/%E5%AE%9E%E9%AA%8C%E4%BA%94%EF%BC%9AWireshark%E6%8A%93%E5%8C%85/"/>
      <url>2021/12/08/%E5%AE%9E%E9%AA%8C%E4%BA%94%EF%BC%9AWireshark%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1 id="GNS3-的安装和使用"><a href="#GNS3-的安装和使用" class="headerlink" title="GNS3 的安装和使用"></a>GNS3 的安装和使用</h1><blockquote><p>这里我们要装两个东西：<code>GNS3本体</code>、<code>在虚拟机里装上官方提供的GNS3镜像</code></p><p>即下面两个东西</p><p>问：为什么不装 Wireshark？ 因为在装 GNS3 本体的时候可以勾选装与不装 Wireshark，建议勾选，否则还要单独装</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208205348.png" alt="image-20211208205347984"></p><ol><li><p>装 GNS3 本体</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208205610.png" alt="image-20211208205610311"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208205631.png" alt="image-20211208205631612"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208205650.png" alt="image-20211208205650106"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208205749.png" alt="image-20211208205749165"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210004.png" alt="image-20211208210004449"></p><blockquote><p>可能会弹出下图，等待</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210059.png" alt="image-20211208210059590"></p><blockquote><p>抓包需要用到它，安装就是</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210220.png" alt="image-20211208210220773"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210325.png" alt="image-20211208210325257"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210355.png" alt="image-20211208210355765"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210409.png" alt="image-20211208210409354"></p><blockquote><p>网络有问题，下载不了 Wireshark，那么就直接点取消吧，影响不大，到时候单独装就好了</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210653.png" alt="image-20211208210653081"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208210850.png" alt="image-20211208210844309"></p><blockquote><p>等待即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208211456.png" alt="image-20211208211456279"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208211956.png" alt="image-20211208211955934"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208212015.png" alt="image-20211208212015243"></p><blockquote><p>OK，GNS3 程序本体安装好了！！！</p></blockquote><blockquote><p>然后打开</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208212253.png" alt="image-20211208212253252"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208212754.png" alt="image-20211208212734535"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208212819.png" alt="image-20211208212819310"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208223241.png" alt="image-20211208223241823"></p><blockquote><p>OK！先告一段落了，不过等会它还会回来，阴魂不散</p></blockquote><blockquote><p>差点忘记了，如果刚刚下载安装 Wireshark 失败，现在就要重新安装一下 Wireshark</p></blockquote><p><a href="https://www.wireshark.org/">官网下载</a> ，如果不想下载，那个压缩包（群里）都有</p></li><li><p>在虚拟机里装 GNS3 镜像</p><blockquote><p>最简单的方法：找到<code>GNS3 VM.ova</code>直接拖到虚拟机里面去</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208213529.png" alt="image-20211208213528914"></p><blockquote><p>选好存放位置后导入</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208213842.png" alt="image-20211208213842331"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208213948.png" alt="image-20211208213948785"></p><p>然后就有了这个系统，其他设置有需要自行配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208214031.png" alt="image-20211208214031361"></p><blockquote><p>然后打开，请屏幕前的你耐心等待！！！</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208214236.png" alt="image-20211208214236207"></p><blockquote><p>恭喜！经过耐心的等待，终于有了结果</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208214414.png" alt="image-20211208214414616"></p></li><li><p>将 GNS3 本体和虚拟机联合起来（连接）</p><blockquote><p>打开 GNS3，点开箭头所指</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208215111.png" alt="image-20211208215111033"></p><blockquote><p>按图下进行设置</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211209110426.png" alt="image-20211209110426792"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211209110626.png" alt="image-20211209110625972"></p></li><li><p>然后添加 <code>IOU 镜像</code></p><blockquote><p>把下面 3 行信息复制粘贴到下图位置</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[license]</span><br><span class="line">gns3-iouvm = cd11acbc599f2364;</span><br><span class="line">gns3vm = 73635fd3b0a13ad0;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208223501.png" alt="image-20211208223501636"></p><blockquote><p>然后添加 IOU 镜像（包括路由器和交换机）下面演示导入交换机镜像</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208220258.png" alt="image-20211208220258489"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208220333.png" alt="image-20211208220333141"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208220649.png" alt="image-20211208220649700"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208220756.png" alt="image-20211208220756675"></p><blockquote><p>路由器同样的操作，这里就不在赘述了！！！</p></blockquote></li><li><p>新建工程，不要有中文路径以及工程名也不要是中文，开始下面的实验</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208221038.png" alt="image-20211208221038435"></p></li></ol><blockquote><p>IDLE PC 值</p><p>1FE：1个千兆以太网口</p><p>1E：1个百兆以太网口</p><p>1TX：1个双绞线接口</p><p>4T：4个串口（广域网接口）</p><p>16ESW：16个百兆以太网口，充当交换机用</p></blockquote><h1 id="IOS、IOU-简单理解"><a href="#IOS、IOU-简单理解" class="headerlink" title="IOS、IOU 简单理解"></a>IOS、IOU 简单理解</h1><ol><li><p>IOS 镜像运行在本地电脑</p></li><li><p>IOU 镜像运行在虚拟机系统，也就是官方提供的 GNS3 系统镜像，其系统镜像就是一个<code>Ubuntu</code>系统（以桌面应用为主的 Linux 发行版）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211209133527.png" alt="image-20211209133527243"></p><p>那么在 GNS3 软件中导入 IOU 镜像的过程中，当我们选择好了点 OK 之后，它会将本地镜像文件上传到虚拟机系统中去，下面不妨简单验证下，看是否上传到了虚拟机系统中</p><blockquote><p>这里说镜像保存的位置在<code>/opt/gns3</code>路径下</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211209133252.png" alt="image-20211209133251910"></p><p>对该路径进行查看，发现本地选择的镜像这里都有了（且该镜像的大小和本机上的大小一致）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211209133707.png" alt="image-20211209133707244"></p></li><li><p>为什么不选择运行在本地的 IOS 镜像？本地不是更方便吗，还不用安装虚拟机？</p><p>通过上网查阅发现没有本地运行的交换机 IOS 镜像，但是可以通过两种方法解决，<a href="https://ccie.lol/blog/2016/07/03/cisco-ios-image-download/">点击具体查看</a></p><p>最后发现还不如直接用虚拟机装上 GNS3 的系统，然后添加路由器和交换机的 IOU 镜像，而且通过虚拟机运行镜像，功能也比本地的 IOS 镜像多。</p></li></ol><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="前置工作"><a href="#前置工作" class="headerlink" title="前置工作"></a>前置工作</h2><ol><li><p>搭建拓扑图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208183128.png" alt="image-20211208183128576"></p></li><li><p>把拓扑图上的信息配置好</p><p>先打开设备的终端（命令行配置窗口），右击它选择<code>Console</code>，下面进行 IP 等信息的配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208183252.png" alt="image-20211208183252554"></p><blockquote><p>GNS3 的路由器配置和 Packet Tracer 是一样的</p><p>PC 主机要用命令配置，可以输入<code>ip ?</code>查看命令帮助</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208190355.png" alt="image-20211208190355604"></p><p>下面进行 IP、子网掩码等信息配置，PC 要配置网关，想必都已经清楚怎么找网关了</p><blockquote><p>重要：在 GNS3 中，配置好了之后似乎不会自动写入文件中，因此配置好了一定要记得保存</p><p>路由器保存命令是（在特权模式下）：<code>write memory</code></p><p>PC 的保存命令是：<code>save</code></p><p>具体下面会提到！</p></blockquote><ul><li><p>R1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208191934.png" alt="image-20211208191934802"></p><p>记得保存，保存要先进入到特权模式（从配置模式直接输入<code>end</code>按回车即可），即一个<code>#</code>号的那个模式</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208200249.png" alt="image-20211208200249894"></p></li><li><p>R2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208195503.png" alt="image-20211208195503217"></p><p>记得保存，保存要先进入到特权模式（从配置模式直接输入<code>end</code>按回车即可），即一个<code>#</code>号的那个模式</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208200113.png" alt="image-20211208200113796"></p><blockquote><p>当过了一会出现了下面情况（如果你没有出现，那么可以直接跳过），提示意思大概为双工不匹配，执行下面语句即可解决（其实配置 R1 的时候就遇到过了），注：这里我提示是 e0/0 接口不是全双工，所以是<code>int e0/0</code>，如果你此时的接口是 e1/0，那么就是<code>int e1/0</code>，表示对这个接口配置</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208195636.png" alt="image-20211208195636641"></p></li><li><p>PC1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208200516.png" alt="image-20211208200516115"></p><p>记得保存，PC 保存命令为<code>save</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208200609.png" alt="image-20211208200609471"></p></li><li><p>PC2</p><p>记得保存</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208200642.png" alt="image-20211208200642698"></p></li></ul><blockquote><p>最后如何查看是否已经保存成功（写入文件）了呢？</p></blockquote><p>比如我查看 PC1 是否保存成功了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208201254.png" alt="image-20211208201254260"></p></li><li><p>测试 PC1 与 PC2 是否可通信，为后面抓包做准备</p><blockquote><p>目的主机不可到达</p><p>为何这样？前面不是都配置好了</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208202044.png" alt="image-20211208202044153"></p><blockquote><p>原因是忘记配路由协议了，为了简单起见，下面我使用的是静态路由，R1 和 R2 都要添加</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208203414.png" alt="image-20211208203414448"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208203429.png" alt="image-20211208203429746"></p><blockquote><p>再次测试能否通信，能够通信</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211208203511.png" alt="image-20211208203511232"></p></li><li><p>配置工作已经完成，下面用 WireShark 软件进行抓包分析</p></li></ol><hr><h2 id="用-WireShark-软件进行抓包分析"><a href="#用-WireShark-软件进行抓包分析" class="headerlink" title="用 WireShark 软件进行抓包分析"></a>用 WireShark 软件进行抓包分析</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>下面是我们要抓包分析的协议</p></blockquote><ol><li>数据链路层协议<ul><li>PPP 协议（点到点协议）</li></ul></li><li>网际层协议<ul><li>IP 协议</li><li>ICMP 协议</li><li>ARP 协议</li></ul></li><li>传输层协议<ul><li>UDP 协议</li><li>TCP 协议</li></ul></li></ol><h3 id="数据链路层协议"><a href="#数据链路层协议" class="headerlink" title="数据链路层协议"></a>数据链路层协议</h3><h4 id="PPP-协议（P121）"><a href="#PPP-协议（P121）" class="headerlink" title="PPP 协议（P121）"></a>PPP 协议（P121）</h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213154750.png" alt="image-20211213154749912"></p><ol><li><p>准备工作</p><p>根据我们前面搭建好的网络结构，没有单独配置点到点协议，默认会有一个协议，我对 R1 用命令<code>show int s2/0</code>查看（s2/0 表示路由器的接口编号，若不同，替换成你的接口编号）</p><p>发现这个默认协议是 HDLC，因此在分析 PPP 协议抓包的实验中，要将该协议改为 PPP 协议</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211160955.png" alt="image-20211211155602988"></p><p>下面将 R1 和 R2 连线的接口都改为 PPP 协议</p><blockquote><p>R1</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211161008.png" alt="image-20211211160632863"></p><p>此时如果你 ping R2 会发现不通，两个接口协议不一致不可通信</p><blockquote><p>R2</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211160816.png" alt="image-20211211160816346"></p><p>此时 R1 与 R2 可通信了</p></li><li><p>下面进行抓包分析</p><p>鼠标右键 R1 与 R2 之间的链路</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211161524.png" alt="image-20211211161524772"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211161633.png" alt="image-20211211161633298"></p><p>点击 OK 之后会自动打开<code>Wireshark</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211161934.png" alt="image-20211211161934309"></p><p>随便点击一条记录</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211164816.png" alt="image-20211211164816188"></p><p>然后用 R1 ping R2，随便点击一个 ICMP 数据报</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211211165431.png" alt="image-20211211165431065"></p></li></ol><h3 id="网际层协议"><a href="#网际层协议" class="headerlink" title="网际层协议"></a>网际层协议</h3><h4 id="IP、ICMP、ARP协议"><a href="#IP、ICMP、ARP协议" class="headerlink" title="IP、ICMP、ARP协议"></a>IP、ICMP、ARP协议</h4><blockquote><p>这三个协议可以通过 ping 命令全部抓取</p><p>ICMP 报文是在 IP 数据报内部被传输，因此下面用 ping 命令就是，ping 命令就是会产生一个 ICMP 报文发送给目标地址，因此有了 ICMP 报文就有可以抓取到 ICMP、IP 协议的数据包</p><p>不仅如此，在 ping 的同时，如果该终端设备的 ARP 缓存中没有目标 IP 地址的条目，就会以广播发送 ARP 请求帧，那么包含 ARP 协议的数据包也能够抓取到！</p></blockquote><ol><li><p>在 PC1 和交换机的链路右键开始抓包</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213132043.png" alt="image-20211213132043479"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213132118.png" alt="image-20211213132118275"></p></li><li><p>然后用 PC1 ping PC2，先查看PC1本地 ARP 缓存是否有记录，如果有则要清空</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213134452.png" alt="image-20211213134452645"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213133716.png" alt="image-20211213133716595"></p></li><li><p>抓取的数据中有用 IP、ICMP、ARP 协议封装的数据包，下面依次分析它们内部的细节</p></li><li><p>IP 数据包（P252）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213155013.png" alt="image-20211213155012906"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213141309.png" alt="image-20211213141309824"></p></li><li><p>ICMP 报文格式（P277）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213155045.png" alt="image-20211213155045126"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213142944.png" alt="image-20211213142915686"></p></li><li><p>ARP 协议</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213155442.png" alt="image-20211213155441960"></p><blockquote><p>注意：PC1 ping PC2，这两台设备不在同一个网段，因此，ARP 请求的目标 IP 地址就是网关了</p></blockquote><blockquote><p>ARP 请求包</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213145906.png" alt="image-20211213145906577"></p><blockquote><p>ARP 响应包</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213150058.png" alt="image-20211213150058742"></p></li></ol><h3 id="传输层协议"><a href="#传输层协议" class="headerlink" title="传输层协议"></a>传输层协议</h3><blockquote><p>抓取这两个协议数据包不需要用到 GNS3 和 虚拟机了，直接抓取本地网卡数据</p><p>重新打开<code>Wireshark</code>软件</p></blockquote><h4 id="UDP-协议（P349）"><a href="#UDP-协议（P349）" class="headerlink" title="UDP 协议（P349）"></a>UDP 协议（P349）</h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213155221.png" alt="image-20211213155221664"></p><ol><li><p>因为我是无线连接的，因此选择无线网卡对其抓包分析，若为有线，选择对应网卡！</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213151043.png" alt="image-20211213151043388"></p></li><li><p>随便选取一个 UDP 协议数据包分析</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213151715.png" alt="image-20211213151715672"></p></li></ol><h4 id="TCP-协议（P352）"><a href="#TCP-协议（P352）" class="headerlink" title="TCP 协议（P352）"></a>TCP 协议（P352）</h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213155339.png" alt="image-20211213155338944"></p><ol><li><p>在 UDP 的基础上修改过滤条件为<code>TCP</code>并按回车</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213152236.png" alt="image-20211213152236457"></p></li><li><p>随便选取一条 TCP 协议数据包分析</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211213153554.png" alt="image-20211213153553903"></p></li></ol><blockquote><p>参考资料</p></blockquote><ul><li>韩立刚《计算机网络原理创新教材》</li><li><a href="https://www.cnblogs.com/chorm590/p/12674282.html">TCP/IP 与 UDP 报文协议抓包浅析 - 碎岁语 - 博客园 (cnblogs.com)</a></li><li><a href="https://blog.csdn.net/weixin_43871760/article/details/90414406">ARP协议抓包分析_xiaoxiao的博客-CSDN博客_arp报文分析</a></li><li><a href="http://c.biancheng.net/view/6389.html">ARP报文格式详解 (biancheng.net)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Wireshark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL20题</title>
      <link href="2021/12/01/SQL20%E9%A2%98/"/>
      <url>2021/12/01/SQL20%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1 id="建库建表"><a href="#建库建表" class="headerlink" title="建库建表"></a>建库建表</h1><blockquote><p>仅仅为了做测试，可以不做这一步</p></blockquote><blockquote><p>DBMS用的是 MySQL</p></blockquote><blockquote><p>新建一个数据库<code>sql_twenty</code>，然后建表以及添加数据做测试（检验所写 SQL 语句是否正确）</p><p>下面<code>SQL</code>语句包括了建库、建表和数据添加，只需要手动复制并执行即可</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> `sql_twenty`;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE sql_twenty</span><br><span class="line">    <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> <span class="string">&#x27;utf8mb4&#x27;</span>;</span><br><span class="line"></span><br><span class="line">USE sql_twenty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `SC`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Course`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Student`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `Teacher`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Student(</span><br><span class="line">    `S#` <span class="type">CHAR</span>(<span class="number">2</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;学生编号&#x27;</span>,</span><br><span class="line">    `Sname` <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;学生姓名&#x27;</span>,</span><br><span class="line">    `Sage` <span class="type">DATE</span> COMMENT <span class="string">&#x27;出生年月&#x27;</span>,</span><br><span class="line">    `Ssex` <span class="type">CHAR</span>(<span class="number">1</span>) COMMENT <span class="string">&#x27;学生性别&#x27;</span></span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> UTF8 COMMENT <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Teacher(</span><br><span class="line">    `T#` <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;教师编号&#x27;</span>,</span><br><span class="line">    `Tname` <span class="type">VARCHAR</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;教师姓名&#x27;</span></span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> UTF8 COMMENT <span class="string">&#x27;教师表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Course(</span><br><span class="line">    `C#` <span class="type">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY COMMENT <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line">    `Cname` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程名称&#x27;</span>,</span><br><span class="line">    `T#` <span class="type">CHAR</span>(<span class="number">4</span>) COMMENT <span class="string">&#x27;教师编号&#x27;</span>,</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(`T#`) <span class="keyword">REFERENCES</span> Teacher(`T#`)</span><br><span class="line"> ) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> UTF8 COMMENT <span class="string">&#x27;课程表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SC(</span><br><span class="line">    `S#` <span class="type">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生编号&#x27;</span>,</span><br><span class="line">    `C#` <span class="type">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;课程编号&#x27;</span>,</span><br><span class="line">    `score` TINYINT COMMENT <span class="string">&#x27;分数&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(`S#`,`C#`),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(`S#`) <span class="keyword">REFERENCES</span> Student(`S#`),</span><br><span class="line">    <span class="keyword">FOREIGN</span> KEY(`C#`) <span class="keyword">REFERENCES</span> Course(`C#`)</span><br><span class="line">) <span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> UTF8 COMMENT <span class="string">&#x27;成绩表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;赵同学&#x27;</span>,<span class="string">&#x27;2000-1-1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;钱同学&#x27;</span>,<span class="string">&#x27;2001-2-1&#x27;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;孙同学&#x27;</span>,<span class="string">&#x27;2002-3-1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;李同学&#x27;</span>,<span class="string">&#x27;2003-4-1&#x27;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;周同学&#x27;</span>,<span class="string">&#x27;2004-5-1&#x27;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;06&#x27;</span>,<span class="string">&#x27;李同学&#x27;</span>,<span class="string">&#x27;2004-5-1&#x27;</span>,<span class="string">&#x27;女&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;07&#x27;</span>,<span class="string">&#x27;周同学&#x27;</span>,<span class="string">&#x27;2000-5-1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Student(`S#`,`Sname`,`Sage`,`Ssex`) <span class="keyword">VALUES</span>(<span class="string">&#x27;08&#x27;</span>,<span class="string">&#x27;李同学&#x27;</span>,<span class="string">&#x27;2002-9-1&#x27;</span>,<span class="string">&#x27;男&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Teacher(`T#`,Tname) <span class="keyword">VALUES</span>(<span class="string">&#x27;1001&#x27;</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Teacher(`T#`,Tname) <span class="keyword">VALUES</span>(<span class="string">&#x27;1002&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Teacher(`T#`,Tname) <span class="keyword">VALUES</span>(<span class="string">&#x27;1003&#x27;</span>,<span class="string">&#x27;王五&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Teacher(`T#`,Tname) <span class="keyword">VALUES</span>(<span class="string">&#x27;1004&#x27;</span>,<span class="string">&#x27;JACK&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(`C#`,`Cname`,`T#`) <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;数学&#x27;</span>,<span class="string">&#x27;1001&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(`C#`,`Cname`,`T#`) <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;数据库&#x27;</span>,<span class="string">&#x27;1002&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(`C#`,`Cname`,`T#`) <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;计算机网络&#x27;</span>,<span class="string">&#x27;1003&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Course(`C#`,`Cname`,`T#`) <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;外语&#x27;</span>,<span class="string">&#x27;1004&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;01&#x27;</span>,<span class="number">80</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="number">75</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="number">85</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;03&#x27;</span>,<span class="number">65</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;01&#x27;</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;03&#x27;</span>,<span class="number">62</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;01&#x27;</span>,<span class="number">65</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;03&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;01&#x27;</span>,<span class="number">59</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SC(`S#`,`C#`,`score`) <span class="keyword">VALUES</span>(<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;03&#x27;</span>,<span class="number">75</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="T20"><a href="#T20" class="headerlink" title="T20"></a>T20</h1><blockquote><p>下面所写的20个题的 SQL 语句不一定完全正确，但是测试都是正确的，也有可能有些特殊情况没有考虑到！！！</p></blockquote><p>==<strong>前提知识（做题需掌握的知识）</strong>==</p><blockquote><ul><li><code>WHERE</code>子句用法、<code>IN</code>运算符用法</li><li><code>自然连接</code>写法：<code>表一名称 NATURAL JOIN 表二名称</code>，这应当写在 FROM 语句中</li><li><code>左外连接</code>写法：<code>表一名称 LEFT JOIN 表二名称 ON(连接条件)</code></li><li><code>EXISTS</code>谓词的使用：它执行流程详细看书上<code>P109</code></li><li><code>GROUP BY</code>子句、<code>HAVING</code>短语的用法</li></ul></blockquote><blockquote><p>下面每道题后面都有一个<code>SQL</code>语句的结果图</p><p>测试的数据在数据库<code>sql_twenty</code>中，DBMS用的是 MySQL</p><p>下图是<code>sql_twenty</code>数据库里四个表的数据</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204130149.png" alt="image-20211204125828417"></p><blockquote><p>根据热心网友的宝贵发现对以下题做了修改（有错误）</p></blockquote><p>2021/12/07更新了下面几个地方</p><ul><li><p>T19：是输出学生编号，原来写的输出分数、已修改 SQL 语句</p></li><li><p>T16：SELECT 后面漏写了 Sname，不及格学生应该要有学号和姓名（因为有重名的，两个属性一起才是主码）</p></li></ul><ol><li><p>查询”01”课程比”02”课程成绩高的学生编号及课程分数</p><blockquote><p>只涉及<code>SC(成绩)表</code></p><p>使用<code>EXISTS</code>谓词，外层循环先筛选出是“01”课程的元组（即满足<code>C# = &#39;01&#39;</code>这个条件），然后执行<code>EXISTS</code>括号的 SQL 语句，<code>EXISTS</code>括号是内层循环，内层循环从<code>SC</code>表第一条元组开始遍历判断，只有当外层循环元组的学生编号等于内层循环当前元组的学生编号<code>且</code>内层循环元组的课程编号为“02”<code>且</code>外层循环元组的成绩高于内层循环当前元组的成绩，EXISTS 才返回真，反之为假。所以当外层循环的两个条件满足时，即为所求元组，最后投影到学生编号和课程分数。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`, score</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> A.`S#` <span class="operator">=</span> `S#` <span class="keyword">AND</span> `C#` <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span> <span class="keyword">AND</span> A.score <span class="operator">&gt;</span> score</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204123837.png" alt="image-20211204123830022"></p></li><li><p>查询平均成绩大于等于60分的同学的学生编号和平均成绩</p><blockquote><p>涉及<code>Student(学生)表</code>和<code>SC(成绩)表</code></p><p>Student 表和 SC 表自然连接，每个学生可能有多个选课成绩，所以用 <code>GROUP BY</code> 子句按<code>S#(学生学号)</code>进行分组，分组之后再用 <code>HAVING</code>短语筛选出平均成绩大于等于 60 分的元组</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`,<span class="built_in">AVG</span>(score) <span class="keyword">AS</span> <span class="string">&#x27;平均成绩&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `S#`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">AVG</span>(score) <span class="operator">&gt;=</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204123918.png" alt="image-20211204123918884"></p></li><li><p>查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩</p><blockquote><p>涉及<code>Student表</code>和<code>SC表</code></p><p>Student 表与 SC 表按属性<code>S#</code>左外连接，然后按<code>S#</code>进行分组，最后在<code>SELECT</code>后面跟上题目要统计的信息即可</p><p>注：这里不可以用内连接，因为考虑到有些学生一门课也没有选，如果用了内连接就会漏掉这些一门课也没选的学生</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Student.`S#`, Sname, <span class="built_in">COUNT</span>(`C#`), <span class="built_in">SUM</span>(score)</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span>(Student.`S#` <span class="operator">=</span> SC.`S#`)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `S#`;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124016.png" alt="image-20211204124016030"></p></li><li><p>查询”李”姓老师的数量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Teacher</span><br><span class="line"><span class="keyword">WHERE</span> Tname <span class="keyword">LIKE</span> <span class="string">&#x27;李%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124054.png" alt="image-20211204124054533"></p></li><li><p>查询学过”张三”老师授课的同学的信息</p><ul><li><p>法一：</p><blockquote><p>涉及全部表（4个表）</p><p>将四个表自然连接，从连接之后的表中筛选出授课老师是“张三”的元组，最后投影到学生信息的四个属性上</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`, `Sname`, `Sage`, `Ssex`</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> SC <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Course <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Teacher</span><br><span class="line"><span class="keyword">WHERE</span> Tname <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>法二：嵌套查询</p><blockquote><p>也是涉及全部表</p><p>学生表和成绩表连接之后有<code>课程编号</code>这一属性，而一个老师对应一个课程编号</p><p>所以可以通过内循环找到“张三”老师授课的课程编号，然后在外层循环的 <code>WHERE</code> 子句条件中筛选出课程编号是此编号的元组，最后投影到学生信息的四个属性上</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`,`Sname`,`Sage`,`Ssex`</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `C#`</span><br><span class="line"><span class="keyword">FROM</span> Teacher <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Tname <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124114.png" alt="image-20211204124114513"></p></li></ul></li><li><p>查询学过编号为”01”并且也学过编号为”02”的课程的同学的学生编号</p><ul><li><p>法一：</p><blockquote><p>只涉及一个<code>SC表</code>，但是用到两次，因此下面取别名区分它们</p><p>将 SC 表（取别名为A）与 SC 表（取别名为B）通过属性<code>S#</code>等值连接，然后筛选出 A 表选了“01”课程且 B 表选了“02”课程的元组，然后投影到<code>S#(学生编号)</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.`S#`</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">AS</span> A, SC <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">WHERE</span> A.`S#` <span class="operator">=</span> B.`S#` <span class="keyword">AND</span> A.`C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> B.`C#` <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>法二：</p><blockquote><p>只涉及一个<code>SC表</code>，运用 <code>EXISTS</code>谓词</p><p>首先取外层查询中选课表（SC）第一个选了“01”课程的元组，然后到内层循环，内层循环会遍历选课表的元组，判断内层循环的 <code>WHERER</code> 子句是否满足，若不满足则返回假，满足返回真。</p><p>所以只有当一个学生同时选了“01”和“02”课，内层循环返回真给外层循环的<code>WHERE</code>子句，外层循环条件满足将元组放到结果表，最后投影到<code>S#(学生编号)</code></p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> A.`S#` <span class="operator">=</span> `S#` <span class="keyword">AND</span> `C#` <span class="operator">=</span> <span class="string">&#x27;02&#x27;</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124132.png" alt="image-20211204124132243"></p></li></ul></li><li><p>查询没有学全所有课程的同学的信息</p><blockquote><p>涉及<code>SC表</code>和<code>Student表</code></p><p>没有选全可以用学生选课数量与全部课程数量做比较，前者小于后者表示未选全</p><p>内层循环筛选出没有选全课程的学生编号集合，外层用<code>IN</code>谓词筛选出包含该集合元素的元组，最后投影到各个属性上（学生信息）</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`, Sname, Sage, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> `S#` <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> Student.`S#` <span class="comment">-- 选出没有学全所有课程的学号</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span>(Student.`S#` <span class="operator">=</span> SC.`S#`)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `S#`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&lt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)   <span class="comment">-- 统计课程总数量</span></span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124652.png" alt="image-20211204124652707"></p></li><li><p>查询至少有一门课与学号为”01”的同学所学相同的同学的学生编号</p><blockquote><p>只涉及一个<code>SC表</code></p><p>嵌套查询：内层循环找出学号为“01”同学所选的课程编号（C#），外层循环遍历全部元组，包括就放到结果表中，最后用 <code>DISTINCT</code>去重</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `S#`</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `C#`</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> `S#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `S#`; <span class="comment">-- 升序</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124728.png" alt="image-20211204124728872"></p></li><li><p>检索”01”课程分数小于60，按分数降序排列的学生信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`, `Sname`, `Sage`, `Ssex`, `score`</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> score <span class="operator">&lt;</span> <span class="number">60</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `score` <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124748.png" alt="image-20211204124748807"></p></li><li><p>查询没学过”张三”老师讲授的任一门课程的学生编号</p><blockquote><p>涉及到全部表</p><p>先找到张三老师课程编号，然后找到选了张三老师课的学生编号，最后选出不包含选了张三老师课的学生编号</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `S#`</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> `S#` <span class="keyword">NOT</span> <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> `S#`  <span class="comment">-- 找到选了张三老师课的学生编号</span></span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `C#` <span class="comment">-- 找到张三老师课程编号</span></span><br><span class="line"><span class="keyword">FROM</span> Teacher <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> Tname <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124804.png" alt="image-20211204124803899"></p></li><li><p>查询每门课程被选修的学生数</p><blockquote><p>涉及<code>Course表</code>和<code>SC表</code></p><p>Course 表<code>左外连接</code> SC 表，连接条件(写在ON括号里)是课程编号，然后用<code>GROUP BY</code>子句按<code>C#</code>属性分组</p><p>然后按<code>S#</code>属性统计每个分组的数量，最后用<code>ORDER BY</code>对课程编号升序排列</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Course.`C#`, <span class="built_in">COUNT</span>(`S#`)</span><br><span class="line"><span class="keyword">FROM</span> Course <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> SC <span class="keyword">ON</span>(Course.`C#` <span class="operator">=</span> SC.`C#`)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Course.`C#`</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `C#`;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124819.png" alt="image-20211204124819873"></p></li><li><p>查询出只有两门课程的全部学生的学号</p><blockquote><p>只涉<code>SC表</code></p><p>用<code>GROUP BY</code>子句对学号（S#）进行分组，然后用 <code>HAVING</code>短语筛选出学生选课数为 2 的元组</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `S#`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(`C#`) <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124834.png" alt="image-20211204124833957"></p></li><li><p>查询姓名相同的学生名单，并统计同名人数</p><blockquote><p>只涉及<code>Student表</code></p><p>使用<code>EXISTS</code>谓词，外循环对学生表元组依次遍历，遍历一个就进入内循环，然后内循环通过<code>WHERE</code>子句判断返回真假，直到外循环元组遍历完。</p><p>EXISTS 返回真时：内层循环元组的学号与外层循环元组的学号不同<strong>且</strong>内层循环元组的姓名等于外层循环元组的姓名</p><p>所以只有当有同名学生才会返回真</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname, <span class="built_in">COUNT</span>(Sname) <span class="keyword">AS</span> <span class="string">&#x27;同名人数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">AS</span> A</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span>(</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> A.`S#` <span class="operator">&lt;&gt;</span> `S#` <span class="keyword">AND</span> A.Sname <span class="operator">=</span> Sname</span><br><span class="line">)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> Sname;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124850.png" alt="image-20211204124850010"></p></li><li><p>查询课程名称为”数学”，且分数低于60的学生姓名和分数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname, score</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Course <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> Cname <span class="operator">=</span> <span class="string">&#x27;数学&#x27;</span> <span class="keyword">AND</span> score <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124905.png" alt="image-20211204124905231"></p></li><li><p>查询选修了全部课程的学生信息</p><blockquote><p>涉及了<code>Student表、SC表和 Course表</code></p><p>选修全部课程可用学生选修课程数量是否等于课程表的总元组数量判断</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`, Sname, Sage, Ssex</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">WHERE</span> `S#` <span class="keyword">IN</span>(</span><br><span class="line"><span class="keyword">SELECT</span> `S#`</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `S#`</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Course</span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124920.png" alt="image-20211204124920099"></p></li><li><p>查询各学生不及格的课程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`, Sname, Cname</span><br><span class="line"><span class="keyword">FROM</span> Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> SC <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> score <span class="operator">&lt;</span> <span class="number">60</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211207212807.png" alt="image-20211207212800764"></p></li><li><p>查询男生、女生人数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Ssex, <span class="built_in">COUNT</span>(Ssex)</span><br><span class="line"><span class="keyword">FROM</span> Student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> `Ssex`;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204124955.png" alt="image-20211204124955066"></p></li><li><p>查询任何一门课程成绩在70分以上的姓名、课程名称和分数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Sname, Cname, score</span><br><span class="line"><span class="keyword">FROM</span> SC <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Student <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Course</span><br><span class="line"><span class="keyword">WHERE</span> score <span class="operator">&gt;</span> <span class="number">70</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204125008.png" alt="image-20211204125008144"></p></li><li><p>查询”01”课程成绩第二高分的学生编号</p><p>参考链接：<a href="https://leetcode-cn.com/problems/second-highest-salary/solution/tu-jie-sqlmian-shi-ti-ru-he-cha-zhao-di-ngao-de-sh/">https://leetcode-cn.com/problems/second-highest-salary/solution/tu-jie-sqlmian-shi-ti-ru-he-cha-zhao-di-ngao-de-sh/</a></p><ul><li><p>法一：</p><blockquote><p>只涉及<code>SC表</code></p><p>内循环先计算出“01”课程第一高分的分数；然后中间循环计算出比第一高分（内循环的结果）低且是最高的分数，就是第二高分；最后在外循环中找到是“01”课程且分数是第二高分（也就是中间循环返回的分数）的学生学号。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> score <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(<span class="keyword">DISTINCT</span> score)<span class="comment">-- 找到&quot;01&quot;课程第二高分</span></span><br><span class="line"><span class="keyword">FROM</span> SC </span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> score <span class="operator">&lt;</span> (</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">MAX</span>(<span class="keyword">DISTINCT</span> score)<span class="comment">-- 找到&quot;01&quot;课程最高分</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>法二：看参考链接，本质上和法一一样</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`</span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span> <span class="keyword">AND</span> score <span class="operator">=</span> (</span><br><span class="line"><span class="keyword">SELECT</span> score<span class="comment">-- 这里会找到第二高分(01课程)</span></span><br><span class="line"><span class="keyword">FROM</span> SC</span><br><span class="line"><span class="keyword">WHERE</span> `C#` <span class="operator">=</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">1</span>, <span class="number">1</span><span class="comment">-- 跳过排序后的第一个分数(也就是第一高分),读取第二个分数(也就是第二高分)</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211207135613.png" alt="image-20211207135612786"></p></li><li><p>查询各学生的年龄</p><blockquote><p><code>YEAR(DATE)</code>函数传入一个 DATE 类型，返回年</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `S#`, Sname, <span class="number">2021</span> <span class="operator">-</span> <span class="keyword">YEAR</span>(Sage) <span class="keyword">AS</span> <span class="string">&#x27;年龄&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> Student;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211204125101.png" alt="image-20211204125101792"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows-硬链接与软链接</title>
      <link href="2021/11/17/%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/"/>
      <url>2021/11/17/%E7%A1%AC%E9%93%BE%E6%8E%A5%E4%B8%8E%E8%BD%AF%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<hr><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211117105424.png" alt="image-20211117105424293"></p><h1 id="软链接"><a href="#软链接" class="headerlink" title="软链接"></a>软链接</h1><blockquote><p>有两种软链接</p></blockquote><ol><li><code>/D</code> 是创建一个目录的软链接</li><li>不带参数是一个文件的软链接</li></ol><p>注意：软链接是看绝对路径，创建的时候用绝对路径，还有要注意的是，软链接文件要和源文件放在同一个目录下，否则软链接无效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mklink /d <span class="string">&quot;old_dir&quot;</span> <span class="string">&quot;new_dir&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mklink <span class="string">&quot;old_file&quot;</span> <span class="string">&quot;new_file&quot;</span></span></span><br></pre></td></tr></table></figure><h1 id="硬链接"><a href="#硬链接" class="headerlink" title="硬链接"></a>硬链接</h1><blockquote><p>硬链接创建可以使用绝对路径，如果使用相对路径创建的时候就要到需要创建硬链接的源文件所在目录</p><p>一个文件可以有多个硬链接，只要不删除最后一个硬链接，都可以通过它访问</p><p>Windows 下一个文件最多有 2^10 - 1（1023）个硬链接</p></blockquote><p>硬链接两个特点：</p><ol><li>删除具有硬链接的文件，不影响其他链接对内容的访问</li><li>修改其中之一的内容，其他链接文件的内容同时改变</li></ol><p>但是硬链接创建不可以跨分区，Windows系统只能在 NTFS 文件系统使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mklink /h <span class="string">&quot;old_file&quot;</span> <span class="string">&quot;new_file&quot;</span></span></span><br></pre></td></tr></table></figure><p>查看一个文件的硬链接有哪些</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> fsutil hardlink list <span class="string">&quot;file_name&quot;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验四：RIP与OSPF动态路由配置</title>
      <link href="2021/11/15/%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9ARIP%E4%B8%8EOSPF%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/"/>
      <url>2021/11/15/%E5%AE%9E%E9%AA%8C%E5%9B%9B%EF%BC%9ARIP%E4%B8%8EOSPF%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1 id="实验四：RIP与OSPF动态路由配置"><a href="#实验四：RIP与OSPF动态路由配置" class="headerlink" title="实验四：RIP与OSPF动态路由配置"></a>实验四：RIP与OSPF动态路由配置</h1><blockquote><p>按照书上内容配置：</p><ul><li>RIP：P220 ~ P227【RIP协议排错】也要做</li><li>OSPF：P235 ~ P24</li></ul></blockquote><blockquote><p>两个协议配置，放到一个 <strong>Word</strong> 文档里就行</p><p>还有实验文件（pkt）用一个也行，上面是 RIP 下面是 OSPF，如图所示</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116003758.png" alt="image-20211116003758313"></p><h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><ol><li><p>RIP动态路由协议</p><ul><li><p>配置RIP协议</p></li><li><p>学会查看路由表</p></li><li><p>观察RIP协议路由更新活动</p></li><li><p>测试RIP协议健壮性</p></li><li><p>RIP协议排错</p></li></ul></li><li><p>OSPF动态路由协议</p><ul><li><p>配置OSPF协议</p></li><li><p>查看OSPF协议三张表</p></li><li><p>监控OSPF协议的活动</p></li><li><p>验证OSPF协议的健壮性</p></li><li><p>OSPF协议配置排错</p></li></ul></li></ol><h2 id="RIP-协议配置"><a href="#RIP-协议配置" class="headerlink" title="RIP 协议配置"></a>RIP 协议配置</h2><blockquote><p>首先做第一个动态路由协议 <strong>RIP</strong></p></blockquote><blockquote><p>由于前面做了 3 次实验了，这里省略一些细节，直接在图上标注好<code>各个网段</code>以及<code>各个接口的IP地址</code>和<code>子网掩码</code></p></blockquote><ol><li><p>根据拓扑图搭建好框架</p><blockquote><p>路由器可选：<code>PT-Router</code></p><p>交换机可选：<code>2950T</code></p><p>路由器相连可选不带时钟频率的线<code>Serial DTE</code></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115140421.png" alt="image-20211115140421576"></p></li><li><p>然后根据上图写好的各个接口的 IP 地址以及子网掩码给路由器和 PC 配置好（交换机不用配置）</p><blockquote><p>注意：PC 主机要设置网关，这里的网关就是路由器与交换机相连的那个出口：比如 PC1 的网关就是路由器1 fa0/0 的 IP 地址</p></blockquote><blockquote><p>配置前先给路由器重命名，以免混淆。当然不命名也行（/滑稽）</p></blockquote><p>初次打开直接输入 <code>no</code> 跳过一些设置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115095100.png" alt="image-20211115095100681"></p><p><code>下面演示一个路由器，其他自行配置，不要手误打错数字了（/滑稽）</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115095655.png" alt="image-20211115095655405"></p></li><li><p>给每个路由器配置 RIP 协议</p><p>前面只是给各个接口分配了 IP 地址，以及给 PC 主机设置了网关等信息，易知，两台 PC 是不能通信的</p><p>提示目的主机不可到达</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115133339.png" alt="image-20211115133338983"></p><p>接下配置 RIP 协议使之任意终端设备都能通信</p><ul><li><p>R1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115134347.png" alt="image-20211115134347163"></p></li><li><p>R2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115135622.png" alt="image-20211115135622226"></p></li><li><p>R3</p><blockquote><p>我这里忘记打<code>version 2</code>了，自行打上去，不打的话后续 RIP 协议学习到的路由记录可能不完全</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115141341.png" alt="image-20211115141341477"></p></li><li><p>R4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115135743.png" alt="image-20211115135743194"></p></li><li><p>R5</p><blockquote><p>我这里忘记打<code>version 2</code>了，自行打上去，不打的话后续 RIP 协议学习到的路由记录可能不完全</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115141135.png" alt="image-20211115141135133"></p></li></ul></li><li><p>查看路由表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看整张路由表</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> show ip route</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只查看RIP协议路由表</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> show ip route rip</span></span><br></pre></td></tr></table></figure><p>查看 R1 的整张路由表</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115142220.png"></p><p>仅仅查看 R1 路由器 RIP 协议学到的路由</p><p>可以发现除了 R1 的直连网段，其他的网段都通过 RIP 协议学习到了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115185020.png" alt="image-20211115185013615"></p><p>下面查看其他路由器的通过 RIP 协议学到的路由</p><p>通过分析路由表可以知道，每个路由器通往其他网段的路由都有了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115190236.png" alt="image-20211115190236121"></p></li><li><p>测试两台电脑是否可通信</p><p>PC1 ping PC2 可通信</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115190541.png" alt="image-20211115190541660"></p></li><li><p>观察 RIP 协议路由更新活动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 观察 RIP 协议路由更新活动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> debug ip rip</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭诊断输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> undebug all</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115192709.png" alt="image-20211115192709546"></p><blockquote><p>记得用 undebug all 命令关闭，不然一直会输出信息</p></blockquote></li><li><p>测试 RIP 协议健壮性</p><p>动态路由会随着网络的变化重新生成到各个网络的路由，当最佳路径没有了，就会从备用路径中重新选择一个最佳路径。</p><p>下面测试一下 PC1 到 PC2 的数据包路径</p><p>在 PC1 上，用<code>tracert 192.168.3.1</code>命令跟踪到 PC2 的数据包路径，可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R2-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115193628.png" alt="image-20211115193628626"></p><blockquote><p>接下来用一个方法观察路由表更新过程</p></blockquote><p>先在 R3 上启用 RIP 协议诊断</p><p>然后用 <code>shutdown</code>命令关闭 R2 左边的接口（物理断开一样的）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115200612.png" alt="image-20211115200611946"></p><p>然后将高亮部分的路由记录通过 RIP 协议的合并规则合并后即可得到最新的路由表，192.168.1.0 网段是无法到达的</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115200923.png" alt="image-20211115200923520"></p><blockquote><p>再次测试从 PC1 到 PC2 的数据包路径</p></blockquote><p>可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R4-&gt;R5-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115201649.png" alt="image-20211115201649965"></p></li><li><p>RIP 协议排错</p><blockquote><p>先把 R2 左边的接口开启，因为上一步关闭了</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115202151.png" alt="image-20211115202151036"></p><p>下面查看路由器的 RIP 协议配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115202624.png" alt="image-20211115202624232"></p><p>如果我们在配置 R1 路由器的 RIP 协议时，network 少写了一个 192.168.0.0，其他路由器就不能学习到到该网段的路由</p><p>下面取消添加到 192.168.0.0 的网段，该网段不再参与 RIP 协议</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115203257.png"></p><p>然后再 R3 路由器上查看 RIP 协议学到的路由，可以看到已经没有到 192.168.0.0/24 网段的路由了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115203604.png" alt="image-20211115203604373"></p></li></ol><hr><h2 id="OSPF-协议配置"><a href="#OSPF-协议配置" class="headerlink" title="OSPF 协议配置"></a>OSPF 协议配置</h2><ol><li><p>拓扑图和 RIP 的一样</p><blockquote><p>我这里是直接复制（CV 大法好/滑稽） RIP 协议的，然后把 RIP 协议关闭一下就行了（或者前面配置好 IP 之后就复制，然后就不用关闭 RIP 协议的了）</p><p>关闭 RIP 协议如下图，剩下的 R2、R3、R4、R5 都要关闭 RIP 协议，不在赘述</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115232558.png" alt="image-20211115232558349"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115232618.png" alt="image-20211115232618411"></p></li><li><p>配置 OSPF 协议</p><blockquote><p>OSPF 配置方法</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116004230.png" alt="image-20211116004230498"></p><p>下面对 R1 ~ R5 进行 OSPF 配置</p><ul><li><p>R1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115233546.png" alt="image-20211115233546464"></p></li><li><p>R2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115233649.png" alt="image-20211115233649852"></p></li><li><p>R3</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115233815.png" alt="image-20211115233815413"></p></li><li><p>R4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115233909.png" alt="image-20211115233909607"></p></li><li><p>R5</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115233957.png" alt="image-20211115233957472"></p></li></ul></li><li><p>查看 OSPF 协议三张表</p><blockquote><p>邻居表、链路状态数据库表、路由表</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115234824.png" alt="image-20211115234824587"></p><ul><li><p>邻居表</p><p>查看 R1 的邻居表</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115235202.png" alt="image-20211115235202386"></p></li><li><p>链路状态数据库表</p><p>查看 R1 的链路状态数据库表</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211115235457.png" alt="image-20211115235457606"></p></li><li><p>路由表</p><p>查看 R1 的路由表（OSPF 生成的）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116000420.png" alt="image-20211116000420936"></p></li></ul></li><li><p>监控 OSPF 的活动</p><blockquote><p>前面 RIP 协议是观察路由更新活动</p></blockquote><p>下面对 OSPF 进行监控，有两个选项，adj 似乎没啥输出信息，就只查看 events 信息</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116000743.png" alt="image-20211116000743655"></p><p>查看 events 信息（事件信息）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116001412.png" alt="image-20211116001412096"></p></li><li><p>验证 OSPF 协议健壮性</p><p>当网络的链路状态发送改变后，OSPF协议会迅速通过泛洪更新链路状态，每个路由器单独计算到各个网段的路由</p><p>下面验证 OSPF 协议的健壮性</p><p>测试一下 PC1 到 PC2 的数据包路径，可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R2-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116003035.png" alt="image-20211116003035134"></p><p>然后关闭 R1 与 R2 之间的链路：只需要把 R2 左边接口<code>shutdown</code>即可（或者把 R1 右边接口 shutdown）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116003334.png" alt="image-20211116003334528"></p><p>再测试一下 PC1 到 PC2 的数据包路径，可以看到数据完整路径是<code>PC1-&gt;R1-&gt;R4-&gt;R5-&gt;R3-&gt;PC2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116003520.png" alt="image-20211116003520756"></p><p>做完之后重新把 R2 左边接口打开</p></li><li><p>OSPF 协议配置排错</p><p>如果配置了网络中的路由器使用 OSPF 协议，但是查看路由表发现有些网段没有通过 OSPF 学习到，就需要检查路由器接口是否配置了正确的 IP 地址和子网掩码，要是串口还要检查是否配置了时钟频率。进行了这些常规检查，还要检查 OSPF 协议的配置。</p><p>输入 <code>show ip protocols</code>能够显示动态路由协议的配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116001831.png" alt="image-20211116001831536"></p><p>由于这里我们添加的是一个比较大的网段<code>192.168.0.0/16</code>所以这里只有一条 Networks，如果是单独添加就不止一条</p><p>总之出现问题之后可以先看下 OSPF 配置是否正确</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验三：子网划分与静态路由</title>
      <link href="2021/10/31/%E5%AE%9E%E9%AA%8C%E4%B8%89%E2%80%94%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E4%B8%8E%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/"/>
      <url>2021/10/31/%E5%AE%9E%E9%AA%8C%E4%B8%89%E2%80%94%E5%AD%90%E7%BD%91%E5%88%92%E5%88%86%E4%B8%8E%E9%9D%99%E6%80%81%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1 id="实验三：子网划分与静态路由"><a href="#实验三：子网划分与静态路由" class="headerlink" title="实验三：子网划分与静态路由"></a>实验三：子网划分与静态路由</h1><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><ol><li><p>根据拓扑图搭建框架</p><blockquote><p>路由器选择 <code>PT-Router</code></p><p>交换机选择 <code>2950T</code></p><p>路由器之间连接线可选择带时钟频率的<code>Serial DCE</code>线或者不带时钟频率的线<code>Serial DTE</code></p><p>带时钟频率的线多一步设置频率，不带时钟频率的线不用设置</p><p>下面的配置都是针对我这种连线方式进行（比如我中间路由器左边用 Se2/0 口，右边用 Se3/0 口），如你的连线方式不同，找到对应接口配置即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103002408.png" alt="image-20211103002408658"></p></li><li><p>子网划分</p><blockquote><p>该拓扑图中一共有 5 个区域（见下图）</p><p>N1 区域有 100 台电脑</p><p>N2 区域有 50 台电脑</p><p>N3 区域有 25 台电脑</p><p>N4 区域为两端路由器，包括 2 个地址</p><p>N5 区域为两端路由器，包括 2 个地址</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103003222.png" alt="image-20211103003222616"></p><p>现我们有一个 C 类地址 192.168.1.0 255.255.255.0，需要给这 5 个区域分配不同的网段</p><ul><li><p>N1 100 台电脑可分配 128 个可用地址给它</p></li><li><p>N2 50 台电脑可分配 64 个可用地址给它</p></li><li><p>N3 25 台电脑可分配 32 个可用地址给它</p></li><li><p>N4 和 N5 都只有两个地址，可分配 2 个可用地址给它</p></li></ul><p>根据上面分析，我们可以把地址写出来理解一下怎么分给这 5 个区域</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">我们现在拥有 256 个地址</span><br><span class="line">256 个地址如下，前面三段用十进制表示，最后一段用二进制表示</span><br><span class="line"></span><br><span class="line">        ==========以下4个地址给-&gt;N4===========</span><br><span class="line">        192.168.1.00000000  --&gt; 192.168.1.0</span><br><span class="line">        192.168.1.00000001  --&gt; 192.168.1.1</span><br><span class="line">        192.168.1.00000010  --&gt; 192.168.1.2</span><br><span class="line">        192.168.1.00000011  --&gt; 192.168.1.3</span><br><span class="line">        ===================================</span><br><span class="line">        ==========以下4个地址给-&gt;N5===========</span><br><span class="line">        192.168.1.00000100  --&gt; 192.168.1.4</span><br><span class="line">        192.168.1.00000101  --&gt; 192.168.1.5</span><br><span class="line">        192.168.1.00000110  --&gt; 192.168.1.6</span><br><span class="line">        192.168.1.00000111  --&gt; 192.168.1.7</span><br><span class="line">        ===================================</span><br><span class="line">        192.168.1.00001000  --&gt; 192.168.1.8</span><br><span class="line">        192.168.1.00001001  --&gt; 192.168.1.9</span><br><span class="line">        ..............</span><br><span class="line">        ==========以下32个地址给-&gt;N3==========</span><br><span class="line">        192.168.1.00100000  --&gt; 192.168.1.32</span><br><span class="line">        192.168.1.00100001  --&gt; 192.168.1.33</span><br><span class="line">        192.168.1.00100010  --&gt; 192.168.1.34</span><br><span class="line">        ..............</span><br><span class="line">        192.168.1.00111110  --&gt; 192.168.1.62</span><br><span class="line">        192.168.1.00111111  --&gt; 192.168.1.63</span><br><span class="line">        ====================================</span><br><span class="line">        ..............</span><br><span class="line">        ===========以下64个地址给-&gt;N2==========</span><br><span class="line">        192.168.1.01000000  --&gt; 192.168.1.64</span><br><span class="line">        192.168.1.01000001  --&gt; 192.168.1.65</span><br><span class="line">        192.168.1.01000010  --&gt; 192.168.1.66</span><br><span class="line">        ..............</span><br><span class="line">        192.168.1.01111110  --&gt; 192.168.1.126</span><br><span class="line">        192.168.1.01111111  --&gt; 192.168.1.127</span><br><span class="line">        =====================================</span><br><span class="line">        ..............</span><br><span class="line">        ===========以下128个地址-&gt;N1===========</span><br><span class="line">        192.168.1.10000000  --&gt; 192.168.1.128</span><br><span class="line">        192.168.1.10000001  --&gt; 192.168.1.129</span><br><span class="line">        192.168.1.10000010  --&gt; 192.168.1.130</span><br><span class="line">        ..............</span><br><span class="line">        192.168.1.11111111  --&gt; 192.168.1.252</span><br><span class="line">        192.168.1.11111111  --&gt; 192.168.1.253</span><br><span class="line">        192.168.1.11111110  --&gt; 192.168.1.254</span><br><span class="line">        192.168.1.11111111  --&gt; 192.168.1.255</span><br><span class="line">        =====================================</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103130326.png" alt="image-20211103130326207"></p><blockquote><p>补充常用二进制对应十进制数</p></blockquote><table><thead><tr><th align="center">二进制</th><th align="center">十进制</th></tr></thead><tbody><tr><td align="center"><code>1000 0000</code></td><td align="center"><code>128</code></td></tr><tr><td align="center"><code>1100 0000</code></td><td align="center"><code>192</code></td></tr><tr><td align="center"><code>1110 0000</code></td><td align="center"><code>224</code></td></tr><tr><td align="center"><code>1111 0000</code></td><td align="center"><code>240</code></td></tr><tr><td align="center"><code>1111 1000</code></td><td align="center"><code>248</code></td></tr><tr><td align="center"><code>1111 1100</code></td><td align="center"><code>252</code></td></tr><tr><td align="center"><code>1111 1110</code></td><td align="center"><code>254</code></td></tr><tr><td align="center"><code>1111 1111</code></td><td align="center"><code>255</code></td></tr></tbody></table><p>这样就实现了地址的分配，然后进行子网划分，每一段地址表示一个子网，因此可得到下表</p><table><thead><tr><th align="center">区域</th><th align="center">网段</th><th align="center">子网掩码</th><th align="center">CIDR值</th></tr></thead><tbody><tr><td align="center">N1</td><td align="center"><code>191.168.1.0</code></td><td align="center"><code>255.255.255.252</code></td><td align="center"><code>/30</code></td></tr><tr><td align="center">N2</td><td align="center"><code>191.168.1.4</code></td><td align="center"><code>255.255.255.252</code></td><td align="center"><code>/30</code></td></tr><tr><td align="center">N3</td><td align="center"><code>191.168.1.32</code></td><td align="center"><code>255.255.255.224</code></td><td align="center"><code>/27</code></td></tr><tr><td align="center">N4</td><td align="center"><code>191.168.1.64</code></td><td align="center"><code>255.255.255.192</code></td><td align="center"><code>/26</code></td></tr><tr><td align="center">N5</td><td align="center"><code>191.168.1.128</code></td><td align="center"><code>255.255.255.128</code></td><td align="center"><code>/25</code></td></tr></tbody></table></li><li><p>规划好给各个接口分配什么 IP 地址</p><ul><li>经过上面的分析，划分了 5 个子网，现在将他们填写到图上便于后续分配 IP 地址给各个接口</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103134258.png" alt="image-20211103134258370"></p><ul><li><p>到这一步已经知道了每个区域的 IP 地址范围，但是有个细节就是：主机号全为 ‘0’ 和全为 ‘1’ 的地址不可分配，一个是网络地址，一个是广播地址</p><p>下面举例说明</p><blockquote><p>N1 </p><p>N1 网段的子网掩码为 255.255.255.128</p><p>第四段写为为二进制   255.255.255.10000000</p><p>子网掩码为 1 的位表示网络位，为 0 的位表示会主机位</p><p>所以该网段的主机位为后面 7 位，也就是黄色框住的</p><p>所以当主机位全为 ‘0’ 时 IP 地址为 192.168.1.128</p><p>​                  全为 ‘1’ 时 IP 地址为 192.168.1.255</p><p>那么这两个 IP 地址都不可以分配给接口使用</p><p>可分配 IP：192.168.1.129 ~ 192.168.1.254</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103135032.png" alt="image-20211103135032205"></p><blockquote><p>N2</p><p>同理，黄色区域为主机位</p><p>不可以分配 IP 为：192.168.1.64 和 192.168.1.127</p><p>可分配 IP：192.168.1.65 ~ 192.168.1.126</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103135833.png" alt="image-20211103135833752"></p><blockquote><p>N3、N4、N5 如图</p><p>黄色为主机号，两个红色 IP 不可分配</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103140116.png" alt="image-20211103140115961"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103140231.png" alt="image-20211103140231174"></p></li><li><p>知道每个网段都有两个地址（主机号全为 0 和 1）不可以分配后，先规划好各个接口分配哪个 IP</p><p>我的分配思路：每个网段的可分配 IP 的前两个给 PC 主机，最后一个给路由器与交换机的接口，当然 N4 和 N5 只有两个可用 IP 刚好分配给两个接口</p><p>具体如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103141455.png" alt="image-20211103141455327"></p></li></ul></li><li><p>给每个接口分配 IP 地址</p><blockquote><p>先配路由器，从左到右依次改名为：R1、R2、R3</p></blockquote><ul><li><p>R1：配置两个接口：fa0/0、se2/0</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103142516.png" alt="image-20211103142516419"></p></li><li><p>R2：配置三个接口：fa0/0、se2/0、se3/0，并且给 se2/0 和 se3/0 设置时钟频率为 64000</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103211757.png" alt="image-20211103211756978"></p></li><li><p>R3：配置两个接口：fa0/0、se2/0</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103142905.png" alt="image-20211103142905214"></p></li></ul><blockquote><p>然后手动配置 PC IP地址、子网掩码和网关，网关就是连接的路由器的那个接口 IP</p></blockquote><ul><li><p>PC1 和 PC2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103144040.png" alt="image-20211103144040545"></p></li><li><p>PC3 和 PC4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103144255.png" alt="image-20211103144255822"></p></li><li><p>PC5 和 PC6</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103144414.png" alt="image-20211103144413997"></p></li></ul></li><li><p>测试在同一个子网的 PC 是连通的，在不同子网是不连通的</p><blockquote><p>同一子网测试通信</p><p>PC1 ping PC2 通</p><p>R1 ping PC1 和 PC2 通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103144752.png" alt="image-20211103144752789"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103145049.png" alt="image-20211103145049348"></p><blockquote><p>不同子网测试通信</p><p>PC1 ping PC3、PC5 均不通</p><p>R1 ping PC3、PC5 均不通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103144849.png" alt="image-20211103144849240"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103145240.png" alt="image-20211103145239959"></p><blockquote><p>路由器之间 ping，R1 和 R2 通、R1 和 R3 不通、R2 和 R3 通</p></blockquote></li><li><p>配置静态路由表达到全部可通信</p><blockquote><p>配置路由表双向都要配，不然配一方的话，数据能传过去，但是对方发送数据传不过来</p></blockquote><ul><li><p>R1：需要配置两条静态路由，一条是针对 N2 子网，一条是针对 N3 子网</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103151857.png" alt="image-20211103151857290"></p></li><li><p>R2：也需要两条，一条是针对 N1 子网，一条是针对 N3 子网</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103152436.png" alt="image-20211103152435965"></p></li><li><p>R3：也需要两条，一条是针对 N1 子网，一条是针对 N2 子网</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103181331.png" alt="image-20211103152719177"></p></li></ul><blockquote><p>由于 N1 子网设备向 N2 和 N3 子网设备通信都是通过 R2 的 se2/0 转发出去，那么可以使用<code>默认路由</code>简化添加路由表的条目</p><p>同理，N3 子网也可以设置默认路由</p><p>但是 R2 不可以设置默认路由，因为它连接了两个路由，必须指定通往子网的下一跳</p></blockquote><ul><li><p>对 R1 路由器配置：先删除原先配置的两条路由记录，再添加默认路由</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103182252.png" alt="image-20211103182252734"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103182542.png" alt="image-20211103182542512"></p></li><li><p>对 R3 路由器配置：先删除原先配置的两条路由记录，再添加默认路由</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103182918.png" alt="image-20211103182918491"></p></li></ul></li><li><p>配置好路由表之后，测试任何两台 PC 主机都是连通的</p><blockquote><p>PC1 ping PC3 和 PC5 均通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103152906.png" alt="image-20211103152906451"></p><blockquote><p>PC3 ping PC1 和 PC5 均通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103153004.png" alt="image-20211103153004479"></p><blockquote><p>PC5 ping PC1 和 PC3 均通</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103153103.png" alt="image-20211103153103230"></p></li><li><p>最后整理一下拓扑图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211103184120.png" alt="image-20211103184120562"></p></li></ol><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><ol><li><p>IP 地址分类</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">A 类地址：为高位为 0</span><br><span class="line"></span><br><span class="line">网络号全零不可用</span><br><span class="line">00000000 00000000 00000000 00000000 --&gt; 0.0.0.0</span><br><span class="line">00000000 00000000 00000000 00000001 --&gt; 0.0.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">00000000 11111111 11111111 11111110 --&gt; 0.255.255.254</span><br><span class="line">00000000 11111111 11111111 11111111 --&gt; 0.255.255.255</span><br><span class="line">==================可用地址区间=====================</span><br><span class="line">00000001 00000000 00000000 00000000 --&gt; 1.0.0.0</span><br><span class="line">00000001 00000000 00000000 00000001 --&gt; 1.0.0.1可用的最小IP</span><br><span class="line">00000001 00000000 00000000 00000010 --&gt; 1.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########################私有地址########################</span></span></span><br><span class="line">00001010 00000000 00000000 00000000 --&gt;  10.0.0.0</span><br><span class="line">00001010 00000000 00000000 00000001 --&gt;  10.0.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">00001010 11111111 11111111 11111101 --&gt;  10.255.255.253</span><br><span class="line">00001010 11111111 11111111 11111110 --&gt;  10.255.255.254</span><br><span class="line">00001010 11111111 11111111 11111111 --&gt;  10.255.255.255</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################</span></span></span><br><span class="line">.... .... .... ....</span><br><span class="line">01111110 11111111 11111111 11111101 --&gt; 126.255.255.253</span><br><span class="line">01111110 11111111 11111111 11111110 --&gt; 126.255.255.254可用的最大IP</span><br><span class="line">01111110 11111111 11111111 11111111 --&gt; 126.255.255.255</span><br><span class="line">=======================================================</span><br><span class="line">网络号为127的作为保留网段</span><br><span class="line">01111111 00000000 00000000 00000000 --&gt; 127.0.0.0</span><br><span class="line">01111111 00000000 00000000 00000001 --&gt; 127.0.0.1</span><br><span class="line">01111111 00000000 00000000 00000010 --&gt; 127.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line">01111111 11111111 11111111 11111101 --&gt; 127.255.255.253</span><br><span class="line">01111111 11111111 11111111 11111110 --&gt; 127.255.255.254</span><br><span class="line">01111111 11111111 11111111 11111111 --&gt; 127.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">B 类地址：最高位为 10</span><br><span class="line">10000000 00000000 00000000 00000000 --&gt; 128.0.0.0</span><br><span class="line">10000000 00000000 00000000 00000001 --&gt; 128.0.0.1可用的最小IP</span><br><span class="line">10000000 00000000 00000000 00000010 --&gt; 128.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########################私有地址########################</span></span></span><br><span class="line">10101100 00010000 00000000 00000000 --&gt; 172.16.0.0</span><br><span class="line">10101100 00010000 00000000 00000001 --&gt; 172.16.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">10101100 00011111 11111111 11111101 --&gt; 172.31.255.253</span><br><span class="line">10101100 00011111 11111111 11111110 --&gt; 172.31.255.254</span><br><span class="line">10101100 00011111 11111111 11111111 --&gt; 172.31.255.255</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################</span></span></span><br><span class="line">.... .... .... ....</span><br><span class="line">10111111 11111111 11111111 11111101 --&gt; 191.255.255.253</span><br><span class="line">10111111 11111111 11111111 11111110 --&gt; 191.255.255.254 可用的最大IP</span><br><span class="line">10111111 11111111 11111111 11111111 --&gt; 191.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">C 类地址：最高位为 110</span><br><span class="line">11000000 00000000 00000000 00000000 --&gt; 192.0.0.0</span><br><span class="line">11000000 00000000 00000000 00000001 --&gt; 192.0.0.1可用的最小IP</span><br><span class="line">11000000 00000000 00000000 00000010 --&gt; 192.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">########################私有地址########################</span></span></span><br><span class="line">11000000 10101000 00000000 00000000 --&gt; 192.168.0.0</span><br><span class="line">11000000 10101000 00000000 00000001 --&gt; 192.168.0.1</span><br><span class="line">.... .... .... ....</span><br><span class="line">10101100 10101000 11111111 11111101 --&gt; 192.168.255.253</span><br><span class="line">10101100 10101000 11111111 11111110 --&gt; 192.168.255.254</span><br><span class="line">10101100 10101000 11111111 11111111 --&gt; 192.168.255.255</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">######################################################</span></span></span><br><span class="line">.... .... .... ....</span><br><span class="line">11011111 11111111 11111111 11111101 --&gt; 223.255.255.253</span><br><span class="line">11011111 11111111 11111111 11111110 --&gt; 223.255.255.254 可用的最大IP</span><br><span class="line">11011111 11111111 11111111 11111111 --&gt; 223.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">D 类地址：最高位为 1110</span><br><span class="line">11100000 00000000 00000000 00000000 --&gt; 224.0.0.0</span><br><span class="line">11100000 00000000 00000000 00000001 --&gt; 224.0.0.1可用的最小IP</span><br><span class="line">11100000 00000000 00000000 00000010 --&gt; 224.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line">11101111 11111111 11111111 11111101 --&gt; 239.255.255.253</span><br><span class="line">11101111 11111111 11111111 11111110 --&gt; 239.255.255.254 可用的最大IP</span><br><span class="line">11101111 11111111 11111111 11111111 --&gt; 239.255.255.255</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E 类地址：剩下的</span><br><span class="line">11110000 00000000 00000000 00000000 --&gt; 240.0.0.0</span><br><span class="line">11110000 00000000 00000000 00000001 --&gt; 240.0.0.1可用的最小IP</span><br><span class="line">11110000 00000000 00000000 00000010 --&gt; 240.0.0.2</span><br><span class="line">.... .... .... ....</span><br><span class="line">11111111 11111111 11111111 11111101 --&gt; 255.255.255.253</span><br><span class="line">11111111 11111111 11111111 11111110 --&gt; 255.255.255.254可用的最大IP</span><br><span class="line">11111111 11111111 11111111 11111111 --&gt; 255.255.255.255</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211102184039.png" alt="image-20211102184031999"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> route </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实验二：vlan 配置以及 vlan 间通信</title>
      <link href="2021/10/22/vlan%E9%85%8D%E7%BD%AE/"/>
      <url>2021/10/22/vlan%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如果文中有什么纰漏或错误的话，请留言指正！！！</p></blockquote><h1 id="实验二：vlan-配置以及-vlan-间通信"><a href="#实验二：vlan-配置以及-vlan-间通信" class="headerlink" title="实验二：vlan 配置以及 vlan 间通信"></a>实验二：vlan 配置以及 vlan 间通信</h1><blockquote><p>步骤如下</p></blockquote><ol><li><p>根据拓扑图搭建好框架</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022202203.png" alt="image-20211022202203068"></p><blockquote><p><code>FastEthernet</code>是百兆以太网口</p><p><code>GigbitEthernet</code>是千兆以太网口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211026165350.png" alt="image-20211026165343027"></p><p>后面的配置中需要知道每台 PC 主机连接到交换机的接口编号，如果没有，到设置中打开</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022191330.png" alt="image-20211022191330941"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022191421.png" alt="image-20211022191421852"></p></li><li><p>配置 vlan</p><ul><li><p>step1：对各个主机划分不同 <code>vlan</code> ，根据此实验要求，vlan 划分见下表</p><table><thead><tr><th>主机名称</th><th>处于哪一个 vlan</th></tr></thead><tbody><tr><td>PC0</td><td>vlan 1</td></tr><tr><td>PC1</td><td>vlan 1</td></tr><tr><td>PC2</td><td>vlan 2</td></tr><tr><td>PC3</td><td>vlan 3</td></tr><tr><td>PC4</td><td>vlan 4</td></tr><tr><td>PC5</td><td>vlan 2</td></tr></tbody></table></li><li><p>step2：将 PC 主机划分到所处的 vlan 中</p><blockquote><p>在进行 vlan 划分之前，可以先把信息填写到拓扑图上，这样更清晰</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022202238.png" alt="image-20211022202238519"></p><blockquote><p>先对左边交换机进行 vlan 划分的配置</p><p>先改名为 S1 （为了区分并记忆）</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022192712.png" alt="image-20211022192712089"></p><blockquote><p>用命令 <code>show vlan</code> 查看交换机 vlan 配置</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022193147.png" alt="image-20211022193147034"></p><blockquote><p>可以看到交换机的各个接口默认处于 vlan 1</p><p>因此交换机连接的 PC0 和 PC1 接口不用进行 vlan 配置（它们所处的交换机接口默认为 vlan 1）</p><p>下面将 PC2 配置到 valn 2 上</p></blockquote><p>先创建 vlan 2</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022193420.png" alt="image-20211022193420756"></p><p>然后把 PC2 划分（设置）到 vlan 2 中</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022194406.png" alt="image-20211022194406603"></p><blockquote><p>经过上面的演示知道怎么创建 vlan 和划分 vlan，下面简单对右边交换机配置下</p></blockquote><p>先创建 vlan 2、vlan 3、vlan 4</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022200844.png" alt="image-20211022200844669"></p><p>然后根据拓扑图上的注释对各个 PC 主机划分到对应 vlan 中</p><p><code>PC3(fa0/1) -&gt; vlan 3</code></p><p><code>PC4(fa0/2) -&gt; vlan 4</code></p><p><code>PC5(fa0/3) -&gt; vlan 2</code></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022202734.png" alt="image-20211022202734764"></p></li></ul></li><li><p>vlan 划分好了，现在给每个 vlan 分配网段，以及给每个 PC 主机静态分配 IP地址</p><blockquote><p>下面表格一些高亮的数字：<code>91、92、93、94</code> 就是<strong>分配给大家的网段，每个人都不同，使用自己的数字分配即可</strong></p></blockquote><blockquote><p>同一 vlan 下的 PC 主机的 IP 需要和该 vlan 网段一致</p><p>比如 vlan 1 设置为 192.168.91.0，那么所处该 vlan 1 的 PC0 和 PC1 这两台主机的 IP 前面三位固定就是 192.168.91，最后是主机号，自己分配</p><p>这里分配 100、110、120、130、140、150，只是为了与 PC 编号对应</p></blockquote><table><thead><tr><th>主机名称</th><th>主机 IP</th><th>处于哪一个 vlan</th><th>各个 vlan 的网段</th></tr></thead><tbody><tr><td>PC0</td><td>192.168.<code>91</code>.100</td><td>vlan 1</td><td>192.168.<code>91</code>.0    255.255.255.0</td></tr><tr><td>PC1</td><td>192.168.<code>91</code>.110</td><td>vlan 1</td><td>192.168.<code>91</code>.0    255.255.255.0</td></tr><tr><td>PC2</td><td>192.168.<code>92</code>.120</td><td>vlan 2</td><td>192.168.<code>92</code>.0    255.255.255.0</td></tr><tr><td>PC3</td><td>192.168.<code>93</code>.130</td><td>vlan 3</td><td>192.168.<code>93</code>.0    255.255.255.0</td></tr><tr><td>PC4</td><td>192.168.<code>94</code>.140</td><td>vlan 4</td><td>192.168.<code>94</code>.0    255.255.255.0</td></tr><tr><td>PC5</td><td>192.168.<code>92</code>.150</td><td>vlan 2</td><td>192.168.<code>92</code>.0    255.255.255.0</td></tr></tbody></table><p>然后将这些信息填写上去，便于后续配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022205056.png" alt="image-20211022205056579"></p><p>其实 vlan 的网段并不需要设置，只是规定这个区间就是 vlan 1，那个区间就是 vlan 2 ……</p><p>只需要对 PC 设置 IP 地址，下面演示一个，剩余 5 个自行配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022205729.png" alt="image-20211022205728897"></p></li><li><p>都设置好了之后，验证不同 vlan 间的计算机不能通信</p><blockquote><p>如果没有配错的话，现在只有 PC0 和 PC1 是可通信的，因为他们同属一个 vlan，并连接在一个交换机上</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022210403.png" alt="image-20211022210403839"></p></li><li><p>实现不同 vlan 间通信</p><ul><li><p>step1：在三层交换机上也要创建相应的 vlan （vlan 2、vlan 3、vlan 4）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022210854.png" alt="image-20211022210854830"></p></li><li><p>step2：给每一个 vlan 的虚接口配置 ip 地址，该 ip 地址作为该网段的网关地址</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022213824.png" alt="image-20211022211559672"></p></li><li><p>设置好网关之后，为每台 PC 主机配置相对应的网关</p><p>可以先用 <code>show run</code>命令查看各个 vlan 的网关地址</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022214123.png" alt="image-20211022214123229"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022214110.png" alt="image-20211022214110199"></p><blockquote><p>这个也就是刚刚设置的，然后我们为每台 PC 主机设置网关，同一 vlan 网关相同</p><p>每台 PC 主机都要设置好</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022214608.png" alt="image-20211022214608236"></p></li></ul></li><li><p>交换机相连的接口工作模式设置为trunk模式，并添加容许通过的 vlan</p><blockquote><p>图中这些接口均要设置为 trunk 模式，即交换机互相连接的 4 个接口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022211839.png" alt="image-20211022211839671"></p><blockquote><p>先对 SW1交换机 的 g0/2 口设置为 trunk 工作模式</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022212301.png" alt="image-20211022212301191"></p><blockquote><p>同理，设置 SW2交换机 的 g0/2 口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022212539.png" alt="image-20211022212538975"></p><blockquote><p>同理，对 L3SW1 交换机配置 g0/1 和 g0/2 口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022213108.png" alt="image-20211022213108303"></p><blockquote><p>此时，测试各个主机是否可通信，结果还是只有 PC0 和 PC1 可通信，其他均不可</p></blockquote></li><li><p>最后，在三层交换机上启用路由功能，就可实现各个 vlan 间通信了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022213452.png" alt="image-20211022213452373"></p><blockquote><p>然后验证各个主机是否可通信，<strong>截图粘贴到 word 中</strong></p></blockquote><blockquote><p>不出意外每台主机都是可以互相通信的，如果发现不能互通，检查自己是否哪里少了步骤，或者哪里配置错误</p></blockquote></li></ol><blockquote><p>最后：交换机配置好了记得用 <code>write memory</code> 保存</p><p>不保存的话，你关闭了软件之后重新打开这个实验文件（pkt 文件），前面对交换机的配置就都没有了！！！</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211022221744.png" alt="image-20211022221744502"></p><hr>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vlan </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wallpaper Engine 壁纸提取</title>
      <link href="2021/10/10/Wallpaper%20Engine%20%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96/"/>
      <url>2021/10/10/Wallpaper%20Engine%20%E5%A3%81%E7%BA%B8%E6%8F%90%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>如何把 Wallpaper Engine 壁纸提出出来？</p><p>看到一个博客说是找到 GitHub 上一个开源项目，然后本地编译，利用编译好的程序代码，然后写好脚本</p><p>具体教程 <a href="https://www.zhihu.com/question/277034435">https://www.zhihu.com/question/277034435</a></p><p>下面记录一下操作过程，使用更加简单</p></blockquote><ol><li><p>将开源项目：<a href="https://github.com/notscuffed/repkg">https://github.com/notscuffed/repkg </a> 拉取到本地</p></li><li><p>然后用 Visual Studio 打开这个箭头文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011103951.png" alt="image-20211011103944600"></p></li><li><p>执行不调试</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011104034.png" alt="image-20211011104034391"></p></li><li><p>这个目录就是一些编译后的文件，我们可以把这些文件复制到一个容易找到的地方（就放这里也可以，强迫症想换一个位置）</p><p>我是放到了 E:\Tools\pkgToPng</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011104145.png" alt="image-20211011104145407"></p></li><li><p>写一个脚本文件（.bat 文件）和编译后的文件放在一起：名称任取</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011104535.png" alt="image-20211011104535950"></p><blockquote><p>如 pkg.bat 内容如下</p></blockquote><p>两个 move 用来移动提取的壁纸到指定位置，比如我这里把壁纸就是移动到 E:\Tools\pkgToPng\photo 下</p><p>rd 是删除提取文件（因为提取文件不仅仅是一张壁纸，还有很多个文件），这里不删除也行，但是还是删除一下，占空间</p><p>然后 explorer 后面带的是需要打开的文件目录</p><p>exit 退出终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;RePKG.exe&quot; extract ./scene.pkg</span><br><span class="line">move output\materials\*.jpg E:\Tools\pkgToPng\photo</span><br><span class="line">move output\materials\*.png E:\Tools\pkgToPng\photo</span><br><span class="line">rd output /s /q</span><br><span class="line">explorer E:\Tools\pkgToPng\photo</span><br><span class="line">exit</span><br></pre></td></tr></table></figure></li><li><p>然后我们把这个路径添加环境变量，便于后面用 CMD 使用该脚本</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011110534.png" alt="image-20211011110508791"></p></li><li><p>使用方法</p><p>先在 Wallpaper Engine 找到壁纸在文件管理器打开</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011105247.png" alt="image-20211011105247588"></p><p>然后在此路径下打开 CMD</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011110013.png" alt="image-20211011110013607"></p><p>之后输入上面脚本的名称，我这里是 <strong>pkg.bat</strong> </p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211011110159.png" alt="image-20211011110159950"></p></li><li><p>success</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 壁纸 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络是怎样连接的</title>
      <link href="2021/09/27/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/"/>
      <url>2021/09/27/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>从在浏览器中输入网址，到屏幕上显示出网页的内容，在这个只有几秒钟的过程中，很多硬件和软件都在各自的岗位上相互配合完成了一系列的工作。本书将以探索之旅的形式，带领大家探索这一系列工作中的每一个环节。每个单独的环节都并不复杂，只要仔细阅读就一定能够理解。不过，探索之旅中出现的硬件和软件数量庞大，如果仅从微观的视角关注每一个单独的点，可能就会因为看不到整体而迷失了方向。因此，在真正出发开始探索之前，我们先来对这次探索之旅作个简单的介绍。下面的介绍中还包含一张探索之旅的路线图，万一在旅途中迷失了方向，请大家务必回来看一看这张地图</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927085209.png" alt="image-20210927085202434"></p><blockquote><p>大纲，章节目录</p></blockquote><ol><li>Web 浏览器</li><li>协议栈、网卡</li><li>集线器、交换机、路由器</li><li>接入网、网络运营商</li><li>防火墙、缓存服务器</li><li>Web 服务器</li></ol><blockquote><p>本书关键字，按照章节</p></blockquote><ol><li><p>浏览器生成消息</p><p>浏览器、Web 服务器、网址（URL）、HTTP、HTML、协议、URI、请求消息、解析器、Socket 库、DNS 服务器、域名</p></li><li><p>用电信号传输 TCP/IP 数据</p></li><li></li></ol><hr><h1 id="第一章-浏览器生成消息"><a href="#第一章-浏览器生成消息" class="headerlink" title="第一章 浏览器生成消息"></a>第一章 浏览器生成消息</h1><blockquote><p>qu：浏览器等网络应用程序实际上并不具备网络控制功能</p></blockquote><p>应用程序并不是自己控制网络，而是委托操作系统（协议栈）来控制网络</p><h2 id="1-1-生成-HTTP-请求消息"><a href="#1-1-生成-HTTP-请求消息" class="headerlink" title="1.1 生成 HTTP 请求消息"></a>1.1 生成 HTTP 请求消息</h2><h3 id="1-1-1-输入网址开始"><a href="#1-1-1-输入网址开始" class="headerlink" title="1.1.1 输入网址开始"></a>1.1.1 输入网址开始</h3><p>URL 会以 <code>http:、ftp:、file:、mailto:</code> 等作为开头，简单理解为这些开头是给浏览器一个访问方法，告诉浏览器访问的是什么服务器。比如 ”http:“ 访问 Web 服务器、”ftp:“ 访问 FTP 服务器。我们把这些开头文字理解为协议类型（HTTP 协议、FTP 协议等）</p><p>通常 URL 会包含<code>服务器的域名和要访问的文件的路径名</code>而发邮件的 URL 则包含收件人的邮件地址，此外，根据需要，URL 中还会包含用户名、密码、服务器端口号等信息。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927092730.png" alt="image-20210927092730697"></p><h3 id="1-1-2-浏览器解析-URL"><a href="#1-1-2-浏览器解析-URL" class="headerlink" title="1.1.2 浏览器解析 URL"></a>1.1.2 浏览器解析 URL</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927093039.png" alt="image-20210927093039572"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927093117.png" alt="image-20210927093117912"></p><h3 id="1-1-3-省略文件名情况"><a href="#1-1-3-省略文件名情况" class="headerlink" title="1.1.3 省略文件名情况"></a>1.1.3 省略文件名情况</h3><blockquote><p>浏览器的第一步工作就是对 URL 进行解析</p></blockquote><ol><li><p><a href="http://www.lab.glasscom.com/dir/">http://www.lab.glasscom.com/dir/</a></p><p>很清楚，访问 dir 目录下设置的默认文件，大多数情况是 index.html、default.htm</p></li><li><p><a href="http://www.lab.glasscom.com/">http://www.lab.glasscom.com/</a></p><p>访问 / 目录下的默认文件</p></li><li><p><a href="http://www.lab.glasscom.com/">http://www.lab.glasscom.com</a></p><p>没有写目录，代表访问根目录下事先设置的默认文件</p></li><li><p><a href="http://www.lab.glasscom.com/whatisthis">http://www.lab.glasscom.com/whatisthis</a></p><p>whatisthis 后面没有 <code>/</code>很容易理解为是一个文件，其实实际上很多人会把目录后面的<code>/</code>省略不写。所以这种情况下，如果 Web 服务器上存在名为 whatisthis 的文件，就当做文件名处理，如果存在名为 whatisthis 的目录，就当做目录名来处理</p><blockquote><p>我们无法创建两个名字相同的文件和目录，因此不可能既有一个名为 whatisthis 的文件，同时又有一个名为whatisthis 的目录。只要查询一下磁盘中的文件和目录，就可以知道whatisthis 究竟是一个文件还是一个目录了，并不会产生歧义。</p></blockquote></li></ol><h3 id="1-1-4-HTTP-基本思路"><a href="#1-1-4-HTTP-基本思路" class="headerlink" title="1.1.4 HTTP 基本思路"></a>1.1.4 HTTP 基本思路</h3><p>解析完 URL 之后，我们就知道应该要访问的目标在哪里了。接下来，浏览器会使用 HTTP 协议来访问 Web 服务器。</p><p>HTTP 协议定义了客户端和服务器之间交互的消息内容和步骤，其基本思路非常简单。</p><p>首先，客户端会向服务器发送请求消息（图1.4）。请求消息中包含的内容是“对什么”和“进行怎样的操作”两个部分。其中相当于“对什么”的部分称为 URI。一般来说，URI 的内容是一个存放网页数据的文件名或者是一个 CGI 程序的文件名，例如“/dir1/file1.html” “/dir1/program1.cgi”等。不过，URI 不仅限于此，也可以直接使用“http:”开头的 URL 来作为URI。换句话说就是，这里可以写各种访问目标，而这些访问目标统称为 URI。相当于接下来“进行怎样的操作”的部分称为方法。方法表示需要让 Web 服务器完成怎样的工作，其中典型的例子包括读取 URI 表示的数据、将客户端输入的数据发送给 URI 表示的程序等。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927094234.png" alt="image-20210927094234455"></p><p>响应消息的<code>状态码</code>（<a href="https://zh.wikipedia.org/wiki/HTTP%E7%8A%B6%E6%80%81%E7%A0%81">详情</a>）表示操作的执行结果是成功还是错误，比如找不到文件就显示 404 Not Found 的错误信息</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927095645.png" alt="image-20210927095645155"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927094951.png" alt="image-20210927094951494"></p><blockquote><p>GET 方法能够发送的数据只有几百个字节，如果表单中的数据超过这一长度，则必须使用POST 方法来发</p></blockquote><h3 id="1-1-5-生成-HTTP-请求消息"><a href="#1-1-5-生成-HTTP-请求消息" class="headerlink" title="1.1.5 生成 HTTP 请求消息"></a>1.1.5 生成 HTTP 请求消息</h3><p>请求消息是从在浏览器顶部的地址栏中输入网址开始的，但浏览器并非只有在这一种场景下才会向Web 服务器发送请求消息。比如点击网页中的超级链接，或者在表单中填写信息后点击“提交”按钮，这些场景都会触发浏览器的工作，而选用哪种方法也是根据场景来确定的。</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927101534.png" alt="image-20210927101534804"></p><ol><li>第一行：末尾要写上 HTTP 的版本号，为了表示该消息是基于哪个版本的 HTTP 规格编写的</li><li>第二行：称为 <a href="https://zh.wikipedia.org/wiki/HTTP%E5%A4%B4%E5%AD%97%E6%AE%B5">消息头</a>，保存一些额外的详细信息。消息头的规格中定义了很多项目，如日期、客户端支持的数据类型、语言、压缩格式、客户端和服务器的软件名称和版本、数据有效期和最后更新时间等</li><li>写完消息头之后，还需要添加一个完全没有内容的空行，然后写上需要发送的数据。这一部分称为消息体，也就是消息的主体。不过，在使用 GET 方法的情况下，仅凭方法和 URI，Web 服务器就能够判断需要进行怎样的操作，因此消息体中不需要填写任何数据。消息体结束之后，整个消息也就结束了</li></ol><blockquote><p>表单请求消息在 HTML 中的代码</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927102106.png" alt="image-20210927102106088"></p><h3 id="1-1-6-发送请求后会收到响应"><a href="#1-1-6-发送请求后会收到响应" class="headerlink" title="1.1.6 发送请求后会收到响应"></a>1.1.6 发送请求后会收到响应</h3><p>响应消息的格式以及基本思路和请求消息是相同的（图1.5（b）），差别只在第一行上。在响应消息中，第一行的内容为<code>状态码</code>和<code>响应短语</code>，用来表示请求的执行结果是成功还是出错。状态码和响应短语表示的内容一致，但它们的用途不同。状态码是一个数字，它主要用来向程序告知执行的结果（表1.3）；相对地，响应短语则是一段文字，用来向人们告知执行的结果。</p><p>返回响应消息之后，浏览器会将数据提取出来展现在屏幕上，如果这个网页之后文字就结束了，如果里面还有图片资源，浏览器就还要给 Web 服务器发送请求消息。由于每条请求消息只能写一个 URI，即每次只能能获取一个文件，所以有多少张图片就要发送多少个请求消息。</p><p>判断所需的文件，然后获取这些文件并显示在屏幕上，这一系列工作的整体指挥也是浏览器的任务之一，而 Web 服务器却毫不知情。Web 服务器完全不关心这 4 条请求获取的文件到底是 1 个网页上的还是不同网页上的，它的任务就是对每一条单独的请求返回 1 条响应而已。</p><blockquote><p>1 条请求消息中只能写1 个URI。如果需要获取多个文件，必须对每个文件单独发送1 条请求。</p></blockquote><blockquote><p>示例：我们需要获取一张名为 sample1.htm 的网页，网页中包含一张名为 picture.jpg 的图片</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927122123.png" alt="Snipaste_2021-09-27_12-14-52"></p><h2 id="1-2-向-DNS-服务器查询-Web-服务器的-IP-地址"><a href="#1-2-向-DNS-服务器查询-Web-服务器的-IP-地址" class="headerlink" title="1.2 向 DNS 服务器查询 Web 服务器的 IP 地址"></a>1.2 向 DNS 服务器查询 Web 服务器的 IP 地址</h2><h3 id="1-2-1-IP-地址的基本知识"><a href="#1-2-1-IP-地址的基本知识" class="headerlink" title="1.2.1 IP 地址的基本知识"></a>1.2.1 IP 地址的基本知识</h3><p>生成了 HTTP 消息之后，我们就要委托操作系统的协议栈将消息发送给 Web 服务器，虽然浏览器能够解析网址生成 HTTP 消息，但是不具备将消息发送到网络的功能</p><p>但是在此之前我们还需要一个工作，就是将服务器的域名转化为 IP 地址，这样才能访问到域名所指向的服务器。</p><blockquote><p>IP 的表示方法</p></blockquote><p>32 位二进制数，每 8 个为一组（即化为十进制最大为 2^8^ - 1 = 255），习惯上转化为十进制数</p><p><code>/</code>后面为子网掩码，与 IP 地址一样是 32 位二进制数，子网掩码为 1 的部分表示网络号，子网掩码为 0 的部分表示主机号。将子网掩码按照和 IP 地址一样的方式以每 8 比特为单位用圆点分组后写在 IP 地址的右侧。</p><p>子网掩码的两种写法：</p><ol><li>10.11.12.13/255.255.255.0</li><li>10.11.12.13/24</li></ol><p>后者 24 即表示从左边数有多少个 1，3 组 8 位即有 24 个 1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210927134157.png" alt="image-20210927134157904"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003090232.png" alt="image-20211003090232749"></p><p>顺带一提，主机号部分的比特全部为 0 或者全部为 1 时代表两种特殊的含义</p><p>IP 地址的主机号</p><ul><li>全 0：表示整个子网</li><li>全 1：表示向子网上所有设备发送包，即“广播”</li></ul><h3 id="1-2-2-IP-和-子网掩码并用理由"><a href="#1-2-2-IP-和-子网掩码并用理由" class="headerlink" title="1.2.2 IP 和 子网掩码并用理由"></a>1.2.2 IP 和 子网掩码并用理由</h3><h3 id="1-2-3-Socket-库提供查询-IP-地址的功能"><a href="#1-2-3-Socket-库提供查询-IP-地址的功能" class="headerlink" title="1.2.3 Socket 库提供查询 IP 地址的功能"></a>1.2.3 Socket 库提供查询 IP 地址的功能</h3><blockquote><p>Socket 库是用于调用网络功能的程序组件集合</p></blockquote><blockquote><p>DNS：Domain Name System，域名服务系统。将服务器名称和 IP 地址进行关联是 DNS 最常见的用法</p><p>通过 DNS 查询 IP 地址的操作称为域名解析，因此负责执行解析（resolution）这一操作的就叫解析器（resolver）了</p><p>解析器实际上是一段程序，它包含在操作系统的 Socket 库中，Socket 库中包含很多用于发送和接收数据的程序组件</p></blockquote><p>我们电脑本地具有 DNS 客户端（DNS 解析器），可以进行更改，<a href="https://cloud.tencent.com/developer/article/1352604">全国DNS服务器IP大全</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003091159.png" alt="image-20211003091159096"></p><h3 id="1-2-4-通过解析器向-DNS-服务器发出查询"><a href="#1-2-4-通过解析器向-DNS-服务器发出查询" class="headerlink" title="1.2.4　通过解析器向 DNS 服务器发出查询"></a>1.2.4　通过解析器向 DNS 服务器发出查询</h3><p>在编写浏览器等应用程序的时候，只要像图1.11 这样写上解析器的程序名称“gethostbyname”以及Web 服务器的域名“<a href="http://www.lab.glasscom.com”就可以了,这样就完成了对解析器的调用/">www.lab.glasscom.com”就可以了，这样就完成了对解析器的调用</a></p><p>浏览器在向 Web 服务器发送消息时，只要从该内存地址取出 IP 地址，并将它与 HTTP 请求消息一起交给操作系统就可以了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003092104.png" alt="image-20211003092104311"></p><blockquote><p>根据域名查询IP 地址时，浏览器会使用Socket 库中的解析器。</p></blockquote><h3 id="1-2-5-解析器的内部原理"><a href="#1-2-5-解析器的内部原理" class="headerlink" title="1.2.5　解析器的内部原理"></a>1.2.5　解析器的内部原理</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003095002.png" alt="image-20211003095002008"></p><h2 id="1-3-全世界-DNS-服务器的大接力"><a href="#1-3-全世界-DNS-服务器的大接力" class="headerlink" title="1.3 全世界 DNS 服务器的大接力"></a>1.3 全世界 DNS 服务器的大接力</h2><h3 id="1-3-1-DNS-服务器的基本工作"><a href="#1-3-1-DNS-服务器的基本工作" class="headerlink" title="1.3.1 DNS 服务器的基本工作"></a>1.3.1 DNS 服务器的基本工作</h3><p>客户端的查询方式包括 3 种信息</p><ol><li>域名：服务器、邮件服务器（邮件地址中@ 后面的部分）的名称</li><li>Class：在最早设计DNS 方案时，DNS 在互联网以外的其他网络中的应用也被考虑到了，而Class 就是用来识别网络的信息。不过，如今除了互联网并没有其他的网络了，因此Class 的值永远是代表互联网的IN</li><li>记录类型：表示域名对应何种类型的记录。例如，当类型为A 时，表示域名对应的是IP 地址；当类型为MX 时，表示域名对应的是邮件服务器。对于不同的记录类型，服务器向客户端返回的信息也会不同</li></ol><p>DNS 服务器上事先保存有前面这3 种信息对应的记录数据，如图1.14所示。DNS 服务器就是根据这些记录查找符合查询请求的内容并对客户端作出响应的</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003095544.png" alt="image-20211003095544054"></p><blockquote><p>例如，如果要查询<a href="http://www.lab.glasscom.com/">www.lab.glasscom.com</a> 这个域名对应的IP 地址，客户端会向 DNS 服务器发送包含以下信息的查询消息。<br>（a） 域名 = <a href="http://www.lab.glasscom.com/">www.lab.glasscom.com</a><br>（b） Class = IN<br>（c） 记录类型 = A</p></blockquote><blockquote><p>DNS 服务器会从域名与IP 地址的对照表中查找相应的记录，并返回IP 地址。</p></blockquote><h3 id="1-3-2-域名的层次结构"><a href="#1-3-2-域名的层次结构" class="headerlink" title="1.3.2　域名的层次结构"></a>1.3.2　域名的层次结构</h3><p>我们知道 IP 是一串以点分隔的字符串，以点分隔成多个部分，每个部分对应该层次的 DNS 服务器</p><p>比如，全国是一个最大的域，中国是全国域中的一个子集，中国的省份是中国域中的一个子集，就这样层层分隔下去</p><blockquote><p>实际上，由于一台DNS 服务器可以存放多个域的信息，因此并不是每个域名都有一台与之相对应的DNS 服务器。比如网络运营商的DNS 服务器中就存放了很多个域的信息</p></blockquote><h3 id="1-3-3-寻找相应的-DNS-服务器并获取-IP-地址"><a href="#1-3-3-寻找相应的-DNS-服务器并获取-IP-地址" class="headerlink" title="1.3.3　寻找相应的 DNS 服务器并获取 IP 地址"></a>1.3.3　寻找相应的 DNS 服务器并获取 IP 地址</h3><p>根域几乎每个 DNS 服务器都保存有，只要访问任何一个 DNS 服务器都可以找到根域，来到根域然后一路找下去就可以找到需要查找的服务器 IP 了</p><blockquote><p>分配给根域DNS 服务器的 IP 地址在全世界仅有 13 个，而且这些地址几乎不发生变化，因此将这些地址保存在所有的DNS 服务器中也并不是一件难事</p><p>根域 DNS 服务器在运营上使用多台服务器来对应一个 IP 地址，因此尽管 IP 地址只有13 个，但其实服务器的数量是很多的</p></blockquote><p>下图客户端先访问最近的一台 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的DNS 服务器地址）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003100951.png" alt="image-20211003100951709"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003101439.png" alt="image-20211003101439097"></p><h3 id="1-3-4-通过缓存加快DNS-服务器的响应"><a href="#1-3-4-通过缓存加快DNS-服务器的响应" class="headerlink" title="1.3.4　通过缓存加快DNS 服务器的响应"></a>1.3.4　通过缓存加快DNS 服务器的响应</h3><p>通过上面的内容，并不是每个 DNS 服务器都只管理一个域，现实中上级域和下级域可能共享在一台 DNS 服务器中</p><p>此外，有时候并不需要从最上级的根域开始查找，因为 DNS 服务器有一个缓存功能，可以记住之前查询过的域名。如果要查询的域名和相关信息已经在缓存中，那么就可以直接返回响应，接下来的查询可以从缓存的位置开始向下进行。相比每次都从根域找起来说，缓存可以减少查询所需的时间</p><blockquote><p>这个缓存机制中有一点需要注意，那就是信息被缓存后，原本的注册信息可能会发生改变，这时缓存中的信息就有可能是不正确的。因此，DNS 服务器中保存的信息都设置有一个有效期，当缓存中的信息超过有效期后，数据就会从缓存中删除。而且，在对查询进行响应时，DNS 服务器也会告知客户端这一响应的结果是来自缓存中还是来自负责管理该域名的 DNS 服务器</p></blockquote><h2 id="1-4-委托协议栈发送消息"><a href="#1-4-委托协议栈发送消息" class="headerlink" title="1.4 委托协议栈发送消息"></a>1.4 委托协议栈发送消息</h2><h3 id="1-4-1-数据收发操作概览"><a href="#1-4-1-数据收发操作概览" class="headerlink" title="1.4.1　数据收发操作概览"></a>1.4.1　数据收发操作概览</h3><p>知道目标服务器的 IP 地址之后，浏览器就可以委托操作系统内部的协议栈向该 IP 地址的服务器发送 HTTP 请求消息了</p><p>HTTP 消息是一种数字信息（digital data），因此可以说是委托协议栈发送数字信息。收发数字信息的这一操作并不局限于浏览器，对于使用网络的应用程序都是共通的</p><p>和向DNS 服务器查询 IP 地址的操作一样，这里也需要使用 Socket 库中的程序组件。不过，查询 IP 地址只需要调用一个程序组件就可以了，而这里需要按照指定的顺序调用多个程序组件，这个过程有点复杂</p><blockquote><p>向操作系统内部的协议栈发出委托时，需要按照指定的顺序来调用 Socket 库中的程序组件</p></blockquote><p>收发数据的操作分为若干个阶段，可以大致总结为以下4 个</p><ol><li>创建套接字（创建套接字阶段）</li><li>将管道连接到服务器端的套接字上（连接阶段）</li><li>收发数据（通信阶段）</li><li>断开管道并删除套接字（断开阶段）</li></ol><h3 id="1-4-2-创建套接字阶段"><a href="#1-4-2-创建套接字阶段" class="headerlink" title="1.4.2　创建套接字阶段"></a>1.4.2　创建套接字阶段</h3><ul><li><p>① 调用 Socke 库名为的 socket 程序组件就可以创建一个套接字了，套接字创建完成后，协议栈会返回一个描述符，应用程序会将收到的描述符放在内存中</p><p>描述符是用来识别不同的套接字的，可以理解为给套接字进行编号</p><p>当创建套接字后，我们就可以使用这个套接字来执行收发数据的操作了。这时，只要我们出示描述符，协议栈就能够判断出我们希望用哪一个套接字来连接或者收发数据了</p><blockquote><p>应用程序是通过“描述符”这一类似号码牌的东西来识别套接字的</p></blockquote></li><li></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003151308.png" alt="image-20211003151308652"></p><h3 id="1-4-3-连接阶段：把管道接上去"><a href="#1-4-3-连接阶段：把管道接上去" class="headerlink" title="1.4.3　连接阶段：把管道接上去"></a>1.4.3　连接阶段：把管道接上去</h3><h3 id="1-4-4-通信阶段：传递消息"><a href="#1-4-4-通信阶段：传递消息" class="headerlink" title="1.4.4　通信阶段：传递消息"></a>1.4.4　通信阶段：传递消息</h3><h3 id="1-4-5-断开阶段：收发数据结束"><a href="#1-4-5-断开阶段：收发数据结束" class="headerlink" title="1.4.5　断开阶段：收发数据结束"></a>1.4.5　断开阶段：收发数据结束</h3><hr><h1 id="第2章-用电信号传输TCP-IP-数据"><a href="#第2章-用电信号传输TCP-IP-数据" class="headerlink" title="第2章 用电信号传输TCP/IP 数据"></a>第2章 用电信号传输TCP/IP 数据</h1><h2 id="2-1-创建套接字"><a href="#2-1-创建套接字" class="headerlink" title="2.1 创建套接字"></a>2.1 创建套接字</h2><h3 id="2-1-1-协议栈的内部结构"><a href="#2-1-1-协议栈的内部结构" class="headerlink" title="2.1.1 协议栈的内部结构"></a>2.1.1 协议栈的内部结构</h3><blockquote><p>比如我们要在两个端系统上传送数据，应用是在应用层，如何实现两个端系统在应用层进行数据收发，这就要借助传输层提供的服务</p><p>我们要传输给对方数据</p><p>第一：需要知道对方的 IP 地址以及端口号，常见的 Web 服务器端口号为 80</p><p>第二：自身的 IP 以及应用也需要传送给对方</p><p>应用层里面有应用，应用跑在某个主机上面，</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211003160316.png" alt="image-20211003160316077"></p><h3 id="2-1-2-套接字的实体就是通信控制信息"><a href="#2-1-2-套接字的实体就是通信控制信息" class="headerlink" title="2.1.2　套接字的实体就是通信控制信息"></a>2.1.2　套接字的实体就是通信控制信息</h3><h3 id="2-1-3-调用socket-时的操作"><a href="#2-1-3-调用socket-时的操作" class="headerlink" title="2.1.3　调用socket 时的操作"></a>2.1.3　调用socket 时的操作</h3><h2 id="2-2-连接服务器"><a href="#2-2-连接服务器" class="headerlink" title="2.2　连接服务器"></a>2.2　连接服务器</h2><h3 id="2-2-1-连接是什么意思"><a href="#2-2-1-连接是什么意思" class="headerlink" title="2.2.1　连接是什么意思"></a>2.2.1　连接是什么意思</h3><h3 id="2-2-2-负责保存控制信息的头部"><a href="#2-2-2-负责保存控制信息的头部" class="headerlink" title="2.2.2　负责保存控制信息的头部"></a>2.2.2　负责保存控制信息的头部</h3>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书籍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通信技术[基础]</title>
      <link href="2021/09/27/%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/"/>
      <url>2021/09/27/%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="通信技术演变图"><a href="#通信技术演变图" class="headerlink" title="通信技术演变图"></a>通信技术演变图</h1><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211004133625.png" alt="image-20211004133625476"></p><blockquote><p>改图截取自：<a href="https://www.bilibili.com/video/BV1hE411P7k3?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1hE411P7k3?spm_id_from=333.999.0.0</a></p></blockquote><h2 id="FDD-与-TDD"><a href="#FDD-与-TDD" class="headerlink" title="FDD 与 TDD"></a>FDD 与 TDD</h2><p>FDD：频分复用，上行和下行的频率不同，互不干扰，可以同时传送数据（双车道）</p><p>TDD：时分复用，上行和下行使用一样的频率，不可以同时传送数据（单车道）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211004135753.png" alt="image-20211004135753846"></p><h2 id="技术家族"><a href="#技术家族" class="headerlink" title="技术家族"></a>技术家族</h2><p>最上面一条是 3GPP 家族、中间是高通家族，目前电信的 2G、3G 在使用这个技术，最下面是 WiMax 家族，目前手机上似乎没有涉及到该通信技术</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211004134155.png" alt="image-20211004134155591"></p><h2 id="三大运营商"><a href="#三大运营商" class="headerlink" title="三大运营商"></a>三大运营商</h2><table><thead><tr><th align="center"></th><th align="center">2G</th><th align="center">3G</th><th align="center">4G</th></tr></thead><tbody><tr><td align="center">移动</td><td align="center">GSM、GPRS、EDGE</td><td align="center">TD-SCDMA</td><td align="center">TDD-LTE、FDD-LTE</td></tr><tr><td align="center">联通</td><td align="center">GSM、GPRS、EDGE</td><td align="center">WCDMA</td><td align="center">FDD-LTE</td></tr><tr><td align="center">电信</td><td align="center">CMDA 1x</td><td align="center">CMDA 2000</td><td align="center">FDD-LTE</td></tr></tbody></table><blockquote><p>移动现已没有了 3G（TD-SCDMA），从 18 年开始部署 FDD-LTE 技术</p></blockquote><h3 id="单卡双待、VoLTE和CSFB-技术"><a href="#单卡双待、VoLTE和CSFB-技术" class="headerlink" title="单卡双待、VoLTE和CSFB 技术"></a>单卡双待、VoLTE和CSFB 技术</h3><blockquote><p>4G 的 LTE 技术只是用于上网，并不可以进行语音通话，那么当你正使用 4G 网络时候，来了一个电话要怎么接听呢？</p><p>4G 本身是不可以进行语音通话，2、3G 可以，所以我们就要将网络转变为 2/3G</p></blockquote><p><strong>CSFB</strong> 技术就是实现在接听电话的时候将 4G 网络退回到 2/3G </p><p>如果不可以回落的话，比如电信的 2/3G 使用的是高通的技术，但是 4G 使用的是 3GPP 技术，其不可以直接从 4G 到 3G，那么要打电话就要用 <strong>单卡双待</strong> 技术实现</p><p>移动：由于现在没有了 3G 所以打电话的时候网络就会回落到 2G </p><p>联通：打电话网络回落到 3G</p><p>电信：技术不同，不能直接回落到 3G，使用了 <strong>单卡双待</strong> 技术就是同时会有两个网络频段，比如通知栏（LTE\1X）</p><p>单卡双待和 CSFB 都有缺陷，后来出现了 VoLTe 技术，VoLTE 就可以不回退网络直接在 4G 网络下打电话</p>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编译原理</title>
      <link href="2021/09/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/"/>
      <url>2021/09/07/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="第一章-引论"><a href="#第一章-引论" class="headerlink" title="第一章 引论"></a>第一章 引论</h1><ol><li><p>程序编译有几个阶段？各有什么功能？</p><ul><li>词法分析：从源程序中一个个读取字符，识别一个个单词</li><li>语法分析</li><li>语义分析</li><li>中间代码生成</li><li>代码优化</li><li>目标代码生成</li></ul></li><li><p>一个经典的编译程序由哪几部分组成？各有什么功能？</p><ul><li><p>词法分析程序</p></li><li><p>语法分析程序</p></li><li><p>语义分析程序</p></li><li><p>中间代码生成程序</p></li><li><p>代码优化程序</p></li><li><p>目标代码生成程序</p></li><li><p>出错处理程序</p></li><li><p>表格管理程序</p></li></ul></li></ol><h1 id="第二章-文法和语言"><a href="#第二章-文法和语言" class="headerlink" title="第二章 文法和语言"></a>第二章 文法和语言</h1><blockquote><p>考点：文法、语言、短语、直接短语、句柄</p></blockquote><h2 id="文法的直观概念"><a href="#文法的直观概念" class="headerlink" title="文法的直观概念"></a>文法的直观概念</h2><p>文法是一套规则集合，描述某一特征的符号串，可以说文法是以有穷的集合刻画无穷的集合的一个工具</p><h2 id="符号和符号串"><a href="#符号和符号串" class="headerlink" title="符号和符号串"></a>符号和符号串</h2><blockquote><p>几个概念解释：</p></blockquote><ol><li><p>字母表（符号集）：元素的非空有穷集合，字母表中的元素称为符号。以汉语为例，汉语字母表就是各种汉字、数字、标点符号的集合；以英语为例，英语字母表就是各种字母、数字、标点符号的集合……那么到了编程，字母表就可能是字母、数字、各种专用符号和保留字了。</p></li><li><p>符号串：由字母表中的符号组成的任何 <strong>有穷序列</strong> 称为符号串</p><p>如 0101010001 就是字母表 A={0,1} 上的符号串</p><p>如果符号串 x 中有 m 个符号，称其长度为 m，记为 |x|=m，|ε|=0</p><ul><li><p>符号串的头尾，固有头、固有尾</p><p>比如 x=abcd</p><p>x 的头：ε、a、ab、abc、abcd</p><p>x 的固有头：ε、a、ab、abc</p><p>x 的尾：ε、d、cd、bcd、abcd</p><p>x 的固有尾：ε、d、cd、bcd</p><p>头除去本身字符串就是固有头、尾除去本身字符串就是固有尾</p><p>以后算文法符号之间优先级会看到，好比 z=x··· 只关注它的头 x ，而对其他不予关注；z=···x··· 只关注符号 x 再某处地方出现</p></li><li><p>符号串集合：了解闭包和正闭包</p><p>有一个字母表 <strong>Σ</strong>，如何描述字母表 <strong>Σ</strong> 上的所有有穷长的符号串的集合</p><p>比如字母表 <strong>Σ={a,b}**，</strong>Σ** 上的所有有穷长的串的集合就是只包含有 <strong>Σ</strong> 字母表中的符号的字符串的集合，即 {ε,a,b,ab,ba,aa,bb,aab,···}，后面还有很多，只要是该符号串中的元素没有 <strong>Σ</strong> 外的字符就属于该集合。</p><p>用闭包表示这个集合 *<em>Σ</em>={ε,a,b,ab,ba,aa,bb,aab,···}<strong>，这样就表示了 **Σ</strong> 上的所有有穷长的串的集合</p><p>闭包：*<em>Σ</em> = Σ^0 ∪ Σ^1 ∪ Σ^2 ··· ∪ Σ^n ···**</p><p>正闭包(与闭包相比，单纯的少了一个 ε)：<strong>Σ+ = Σ^1 ∪ Σ^2 ··· ∪ Σ^n ···</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211116154457.png" alt="image-20211116154457804"></p></li></ul></li></ol><h2 id="文法和语言的形式定义"><a href="#文法和语言的形式定义" class="headerlink" title="文法和语言的形式定义"></a>文法和语言的形式定义</h2><blockquote><p>定义 2.1</p></blockquote><p>文法 G 定义为四元组 (Vn, Vt, P, S)，Vn ∩ Vt = ∅</p><ul><li>Vn：非终结符集</li><li>Vt：终结符集</li><li>P：为规则 (α–&gt;β) 的集合，α∈(Vn∪Vt)* 且至少包括一个非终结符，β∈(Vn∪Vt)*</li><li>S：识别符（开始符）</li></ul><blockquote><p>两个重要的定义：定义 2.5 和 定义 2.6 P23</p></blockquote><ol><li><p>定义 2.5：句型包括句子</p><p>句型，是指从文法G[S]的开始符S推导出来的符号串α，即S ⇒ *α</p><p>句子，如果句型 α 中不含有非终结符，则称串 α 是文法 G[S] 的句子</p></li><li><p>定义 2.6：语言就是文法描述对象的集合，也就是<strong>一切句子的集合。</strong></p></li></ol><h2 id="文法的类型"><a href="#文法的类型" class="headerlink" title="文法的类型"></a>文法的类型</h2><blockquote><p>G = (Vn, Vt, P, S)，P 中的产生式用 α–&gt;β 表示</p></blockquote><ol><li>0 型文法：文法的定义</li><li>1 型文法（上下文有关的）：0 型基础上，右部长度 &gt;= 左边长度 即 <code>|β| &gt;= |α|</code></li><li>2 型文法（上下文无关的）：1 型基础上，<code>左边只是一个非终结符</code></li><li>3 型文法（正规文法）：2 型基础上，规定右部只能是一个终结符或者一个终结符跟一个非终结符 即 文法只能是以下两种情形<ul><li><code>A--&gt;aB</code></li><li><code>A--&gt;a</code></li></ul></li></ol><blockquote><p>0 型号文法产生的语言：0 型语言</p><p>1 型文法产生的语言：上下文有关语言</p><p>2 型文法产生的语言：上下文无关语言</p><p>3 型文法产生的语言：正规语言</p></blockquote><h2 id="语法树"><a href="#语法树" class="headerlink" title="语法树"></a>语法树</h2><blockquote><p>一种描述上下文无关文法的句型推导的直观工具，即语法树，也称推导树</p></blockquote><blockquote><p>文法：一套规则的集合，描述某一特征的符号串，以有穷的集合刻画无穷的集合的一个工具</p></blockquote><ol><li>什么是文法？</li><li>什么是语言？</li><li>什么是句型？什么是句子？（请举例回答）</li></ol><h1 id="第三章-词法分析"><a href="#第三章-词法分析" class="headerlink" title="第三章 词法分析"></a>第三章 词法分析</h1><h2 id="单词的形式化描述工具"><a href="#单词的形式化描述工具" class="headerlink" title="单词的形式化描述工具"></a>单词的形式化描述工具</h2><p>正规文法(3型)</p><p>辅助字母表 Σ’={ <code>∅</code>, <code>ε</code>, <code>|</code>, <code>.</code>, <code>*</code>, <code>(</code>, <code>)</code> }</p><h2 id="正规文法和正规式的等价性"><a href="#正规文法和正规式的等价性" class="headerlink" title="正规文法和正规式的等价性"></a>正规文法和正规式的等价性</h2><ol><li>将正规式转化成正规文法：P46</li><li>将正规文法转化为正规式：P47</li></ol><h2 id="有穷自动机"><a href="#有穷自动机" class="headerlink" title="有穷自动机"></a>有穷自动机</h2><blockquote><p>有穷自动机的 3 种表示方法：</p><p>五项定义、状态转化图、矩阵</p></blockquote><h3 id="确定的有穷自动机（DFA）"><a href="#确定的有穷自动机（DFA）" class="headerlink" title="确定的有穷自动机（DFA）"></a>确定的有穷自动机（DFA）</h3><ol><li><p>五元组定义</p><p>M=(K, Σ, f, S, Z)</p><ul><li>K：一个有穷集，每个元素称为一个状态</li><li>Σ：一个有穷字母表，每个元素称为一个输入符号</li><li>f：转换函数，是 K x Σ -&gt; K 上的映像</li><li>S：S∈K，表示初态（只能有一个）</li><li>Z：Z⊆K，是一个终态集，也可称为接受状态或结束状态</li></ul></li><li><p>状态图表示</p></li><li><p>矩阵表示</p></li></ol><h3 id="不确定的有穷自动机"><a href="#不确定的有穷自动机" class="headerlink" title="不确定的有穷自动机"></a>不确定的有穷自动机</h3><ol><li><p>五元组定义</p><p>Ｍ＝(K，Σ，f，S，Z)</p><ul><li><p>Σ，K，Z的意义和ＤＦＡ的定义一样</p></li><li><p>f：转换函数，从 K x Σ* -&gt; 2^K 上的映像（2^K 表示 K 的幂集）</p><p>即f： K(Σ∪{ε})→2^k</p><p> 表示：f(q,a)={q1,q2,…,qk}</p><p>在状态转换图中,q向q1,q2,…,qk,各射出一条标记为a的箭弧。</p></li><li><p>S：S⊆K，表示有多个初态</p></li></ul></li><li><p>对于每个 NFA M，存在一个 DFA M’，使得 L(M)=L(M’)</p></li></ol><h3 id="NFA-转换为等价的-DFA（子集法）"><a href="#NFA-转换为等价的-DFA（子集法）" class="headerlink" title="NFA 转换为等价的 DFA（子集法）"></a>NFA 转换为等价的 DFA（子集法）</h3><h3 id="DFA-的化简（分割法）"><a href="#DFA-的化简（分割法）" class="headerlink" title="DFA 的化简（分割法）"></a>DFA 的化简（分割法）</h3><h2 id="正规式和有穷自动机的等价性"><a href="#正规式和有穷自动机的等价性" class="headerlink" title="正规式和有穷自动机的等价性"></a>正规式和有穷自动机的等价性</h2><ol><li>对于 <strong>Σ</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平时遇到的错误</title>
      <link href="2021/08/23/EROOR/"/>
      <url>2021/08/23/EROOR/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="命令报错"><a href="#命令报错" class="headerlink" title="命令报错"></a>命令报错</h1><h3 id="命令不存在"><a href="#命令不存在" class="headerlink" title="命令不存在"></a>命令不存在</h3><blockquote><p>如</p><p>‘ipconfig’ 不是内部或外部命令，也不是可运行的程序或批处理文件。</p><p>netstat: The term ‘netstat’ is not recognized as a name of a cmdlet, function, script file, or executable program.<br>Check the spelling of the name, or if a path was included, verify that the path is correct and try again.</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210823114517.png" alt="image-20210823114510645"></p><blockquote><p>解决方法</p></blockquote><p>环境变量 <code>Path</code> 添加 <code>%SystemRoot%\system32</code>，然后重新启动程序</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210823115022.png" alt="image-20210823115022392"></p><blockquote><p>意外发现，我们没有添加<code>%SystemRoot%\system32</code>这个系统变量的时候，点开 <code>Path</code>是像上图那种</p><p>添加之后是会列表展开，更加的好操作</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210823115308.png" alt="image-20210823115259608"></p><h3 id="打开服务报错"><a href="#打开服务报错" class="headerlink" title="打开服务报错"></a>打开服务报错</h3><p><strong>报错信息</strong></p><blockquote><p><strong>System error 5 has occurred.</strong></p><p><strong>Access is denied.</strong></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210823115446.png" alt="image-20210823115446056"></p><p><strong>解决方法</strong></p><p>用<code>管理员权限</code>打开终端即可（搜索到终端，直接快捷键 <code>Ctrl+Shift+Enter</code>用管理员权限打开）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210823120144.png" alt="image-20210823120144590"></p><blockquote><p>注意：因为我这里的 MySQL 的环境变量是放在了 <code>管理员的变量</code>中，所以我使用非管理员用户会报错</p></blockquote><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><h3 id="1366-报错-中文编码问题"><a href="#1366-报错-中文编码问题" class="headerlink" title="1366 报错 - 中文编码问题"></a>1366 报错 - 中文编码问题</h3><p><strong>报错信息</strong></p><blockquote><p>ERROR 1366 (HY000): Incorrect string value: ‘\xE6\x9D\x8E\xE5\x8B\x87’ for column ‘Sname’ at row 1</p></blockquote><p><strong>解决方法</strong></p><ol><li><p>先查看表的编码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ SHOW FULL COLUMNS FROM table_name;</span><br><span class="line"></span><br><span class="line">-- 如</span><br><span class="line">mysql&gt; SHOW FULL COLUMNS FROM Student;</span><br><span class="line">+-------+-------------+-------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Field | Type        | Collation         | Null | Key | Default | Extra | Privileges                      | Comment |</span><br><span class="line">+-------+-------------+-------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Sno   | char(9)     | latin1_swedish_ci | NO   | PRI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sname | char(20)    | latin1_swedish_ci | YES  | UNI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Ssex  | char(2)     | latin1_swedish_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sage  | smallint(6) | NULL              | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sdept | char(20)    | latin1_swedish_ci | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">+-------+-------------+-------------------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>修改编码，此处修改字符集为 utf8，校对规则为 utf8_bin（区分大小写）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ALTER TABLE table_name CONVERT TO CHARACTER SET utf8 COLLATE utf8_bin;</span><br></pre></td></tr></table></figure></li><li><p>在此查看编码是否更改完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW FULL COLUMNS FROM Student;</span><br><span class="line">+-------+-------------+-----------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Field | Type        | Collation | Null | Key | Default | Extra | Privileges                      | Comment |</span><br><span class="line">+-------+-------------+-----------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">| Sno   | char(9)     | utf8_bin  | NO   | PRI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sname | char(20)    | utf8_bin  | YES  | UNI | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Ssex  | char(2)     | utf8_bin  | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sage  | smallint(6) | NULL      | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">| Sdept | char(20)    | utf8_bin  | YES  |     | NULL    |       | select,insert,update,references |         |</span><br><span class="line">+-------+-------------+-----------+------+-----+---------+-------+---------------------------------+---------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>插入数据的时候，如果是数字则可以不用引号（即使定义为 char）</p><p><code>引号可以为单引号，也可以为双引号</code></p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,李勇,男,20,CS);</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;李勇&#39; in &#39;field list&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,&quot;李勇&quot;,男,20,CS);</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;男&#39; in &#39;field list&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,&quot;李勇&quot;,&quot;男&quot;,20,CS);</span><br><span class="line">ERROR 1054 (42S22): Unknown column &#39;CS&#39; in &#39;field list&#39;</span><br><span class="line"></span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215121,&quot;李勇&quot;,&quot;男&quot;,20,&quot;CS&quot;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">-- 单引号</span><br><span class="line">mysql&gt; INSERT INTO Student VALUES(201215122,&#39;刘晨&#39;,&#39;女&#39;,19,&#39;CS&#39;);</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="Navicat：ERROR-1130"><a href="#Navicat：ERROR-1130" class="headerlink" title="Navicat：ERROR 1130:"></a>Navicat：ERROR 1130:</h3><blockquote><p>报错信息：ERROR 1130:Host ‘x.x.x.x’ is not allowed to connect to this MySQL server</p></blockquote><p>可能是账号不允许从远程连接到数据库</p><p>解决方法</p><ol><li><p>改表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用 mysql 数据库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> % 表示任何 ip 都可连接</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> update user <span class="built_in">set</span> host=<span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and host=<span class="string">&#x27;localhost&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 改回原来</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> update user <span class="built_in">set</span> host=<span class="string">&#x27;localhost&#x27;</span> <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and host=<span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><blockquote><p>下面是详细过程</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118201034.png" alt="image-20211118201034007"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118201047.png" alt="image-20211118201047413"></p><blockquote><p>接下来改动</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118201332.png" alt="image-20211118201332417"></p></li><li><p>授权</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;user&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;password&#x27;</span> WITH GRANT OPTION;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118225756.png" alt="image-20211118225756144"></p></li></ol><blockquote><p>下面之后就可以连接了</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118202317.png" alt="image-20211118202317472"></p><h3 id="ERROR-1045"><a href="#ERROR-1045" class="headerlink" title="ERROR 1045"></a>ERROR 1045</h3><blockquote><p>登录数据库出现如下错误</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118224620.png" alt="image-20211118224620248"></p><blockquote><p>法一：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止 mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop mysqld</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 用以下命令启动MySQL，以不检查权限的方式启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysqld --skip-grant-tables &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysqld --user=root --skip-grant-tables &amp;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 登录 mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新root密码</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> UPDATE mysql.user SET authentication_string=PASSWORD(<span class="string">&#x27;自己的密码&#x27;</span>) <span class="built_in">where</span> USER=<span class="string">&#x27;root&#x27;</span>;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> flush privileges;</span></span><br></pre></td></tr></table></figure><ol><li><p>systemctl stop mysqld</p></li><li><p>mysqld –skip-grant-tables &amp;</p><p>mysqld –user=root –skip-grant-tables &amp;</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118225350.png" alt="image-20211118225350018"></p></li><li><p>mysql -u root</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118225428.png" alt="image-20211118225428679"></p></li><li><p>UPDATE mysql.user SET authentication_string=PASSWORD(‘xxx’) where USER=’root’;</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211118225622.png" alt="image-20211118225622052"></p></li><li><p>flush privileges;</p></li></ol><blockquote><p>法二：</p></blockquote><p>先查看 CentOS7 下的 mysql 配置文件位置</p><p>使用命令：<code>ps aux|grep mysql|grep &#39;my.cnf&#39;</code></p><p>如果没有没有输出内容则是使用默认配置位置</p><p>默认配置my.cnf位置</p><p>使用命令：mysql –help|grep ‘my.cnf’ （查看默认配置位置）</p><p>/etc/my.cnf、/etc/mysql/my.cnf、 /usr/local/etc/my.cnf、 ~/.my.cnf</p><ol><li><p>打开 mysql.cnf 文件</p><p>skip-grant-tables</p></li><li></li></ol><h3 id="ERROR-1820"><a href="#ERROR-1820" class="headerlink" title="ERROR 1820"></a>ERROR 1820</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211218171106.png" alt="image-20211218171057456"></p><p>重新设置一个密码就行了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211218171439.png" alt="image-20211218171439213"></p>]]></content>
      
      
      
        <tags>
            
            <tag> -Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wt ssh和通过ssh连接windows</title>
      <link href="2021/08/23/wt%20ssh%E5%92%8C%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5windows/"/>
      <url>2021/08/23/wt%20ssh%E5%92%8C%E9%80%9A%E8%BF%87ssh%E8%BF%9E%E6%8E%A5windows/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Windows-Terminal-连接服务器"><a href="#Windows-Terminal-连接服务器" class="headerlink" title="Windows Terminal 连接服务器"></a>Windows Terminal 连接服务器</h1><blockquote><p>小知识：本地 Windows 上传文件到 服务器上</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824094902.png" alt="image-20210824094902139"></p><blockquote><p>Windows系统 连接服务器的软件有很多，比如 CMD、Powershell、git-bash、xshell 等等工具都可以通过 ssh 连接到服务器主机</p><p>下面我通过 Windows Terminal 连接服务器并添加一个启动项</p></blockquote><ol><li><p>直接在打开终端 ssh 连接，直接终端输连接命令即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824092418.png" alt="image-20210824092411666"></p></li><li><p>添加一个启动项（好处就是不用每次都输入 ssh 的连接命令）</p><ul><li><p>打开 Windows Terminal 的 json 文件进行编辑</p></li><li><p>找到 <code>list</code>这个地方（方括号是一个是数组）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824093537.png" alt="image-20210824093536967"></p></li><li><p>我们添加一个数组元素，即一个终端，内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;commandline&quot;</span>: <span class="string">&quot;ssh root@121.4.26.166&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;guid&quot;</span>: <span class="string">&quot;&#123;4f338cc5-b9f0-4707-96de-16c856dbfd87&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;hidden&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;CentOs7&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>guid 获取方式，在终端（在使用 ssh 连接的终端比如 cmd、wt）输入<code>New-Guid</code></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824093926.png" alt="image-20210824093926276"></p></li></ul></li></ol><h1 id="远程连接-Windows"><a href="#远程连接-Windows" class="headerlink" title="远程连接 Windows"></a>远程连接 Windows</h1><ol><li><p>打开设置（应用版块）安装 OpenSSH 服务器</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824100631.gif"></p></li><li><p>打开 Openssh 服务</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824103235.png" alt="image-20210824103235701"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824103453.png" alt="image-20210824103453033"></p></li><li><p>查看 22 端口是否开启</p><blockquote><p>未开启</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824095433.png" alt="image-20210824095433609"></p><blockquote><p>已开启</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824103822.png" alt="image-20210824103822524"></p></li><li><p>最后通过局域网的设备 ssh 登录到 Windows</p><p>但是我登录了很多次都不知道账户和密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824111043.png" alt="image-20210824111036045"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210824111211.png" alt="image-20210824111211288"></p></li><li></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> -Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows Terminal + Git-Bash</title>
      <link href="2021/08/19/Windows%20Terminal%20%E7%BE%8E%E5%8C%96/"/>
      <url>2021/08/19/Windows%20Terminal%20%E7%BE%8E%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h1><h2 id="先安装PowerShell"><a href="#先安装PowerShell" class="headerlink" title="先安装PowerShell"></a>先安装PowerShell</h2><p><a href="https://github.com/PowerShell/PowerShell/releases">https://github.com/PowerShell/PowerShell/releases</a></p><blockquote><p>64位 Windows 可下载 msi 文件</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819165308.png" alt="image-20210819165308779"></p><h2 id="安装Windows-Terminal"><a href="#安装Windows-Terminal" class="headerlink" title="安装Windows Terminal"></a>安装Windows Terminal</h2><blockquote><p>打开微软商店，直接搜索 <code>Windows Terminal</code> 即可下载安装</p></blockquote><h2 id="安装-posh-git、oh-my-posh"><a href="#安装-posh-git、oh-my-posh" class="headerlink" title="安装 posh-git、oh-my-posh"></a>安装 posh-git、oh-my-posh</h2><blockquote><p><a href="https://github.com/JanDeDobbeleer/oh-my-posh2">https://github.com/JanDeDobbeleer/oh-my-posh2</a></p></blockquote><p>打开 <code>WindowsTerminal</code>的 <strong>Powershell</strong>窗口</p><ol><li><p><code>post-git</code>加入的 <code>-Verbose</code>显示详情</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Install-Module posh-git -Scope CurrentUser</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> Install-Module posh-git -Verbose -Scope CurrentUser</span></span><br></pre></td></tr></table></figure><blockquote><p>成功安装在 E:\Multimedia Data\文档\PowerShell\Modules\ 这个目录下</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819152425.png"></p></li><li><p><code>oh-my-posh</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Install-Module oh-my-posh -Scope CurrentUser</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> Install-Module oh-my-posh -Verbose -Scope CurrentUser</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819152548.png" alt="image-20210819152548228"></p></li></ol><h2 id="开启插件"><a href="#开启插件" class="headerlink" title="开启插件"></a>开启插件</h2><ol><li><p>打开配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> notepad <span class="variable">$PROFILE</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819152900.png" alt="image-20210819152843842"></p></li><li><p>编辑引入模块</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 PowerShell 主题</span></span><br><span class="line">Set-PoshPrompt -Theme agnoster</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819154229.png" alt="image-20210819154229104"></p><blockquote><p>这里我使用的是一个博主提供的内容：<a href="https://gist.github.com/LittleNewton/04132945d9b9743ba7cab780fc44a67b">https://gist.github.com/LittleNewton/04132945d9b9743ba7cab780fc44a67b</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">&lt;#</span><br><span class="line"> * FileName: Microsoft.PowerShell_profile.ps1</span><br><span class="line"> * Author: 刘 鹏</span><br><span class="line"> * Email: littleNewton6@outlook.com</span><br><span class="line"> * Date: 2020, May. 1</span><br><span class="line"> * Update: 2021, Mar. 14</span><br><span class="line"> * Copyright: No copyright. You can use this code for anything with no warranty.</span><br><span class="line"><span class="meta">#</span><span class="bash">&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------------- Import Modules BEGIN -------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引入 posh-git</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 引入 oh-my-posh</span></span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 PowerShell 主题</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Set-PoshPrompt -Theme ys</span></span><br><span class="line">Set-PoshPrompt -Theme nu4a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------------------- Import Modules END   -------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------  Set Hot-keys BEGIN  -------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置预测文本来源为历史记录</span></span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Tab 为菜单补全和 Intellisense</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Tab&quot; -Function MenuComplete</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Ctrl+d 为退出 PowerShell</span></span><br><span class="line">Set-PSReadlineKeyHandler -Key &quot;Ctrl+d&quot; -Function ViExit</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置 Ctrl+z 为撤销</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key &quot;Ctrl+z&quot; -Function Undo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置向上键为后向搜索历史记录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置向下键为前向搜索历史纪录</span></span><br><span class="line">Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward</span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------  Set Hot-keys END    -------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------    Functions BEGIN   -------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Python 直接执行</span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:PATHEXT += <span class="string">&quot;;.py&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 pip 的方法</span></span><br><span class="line">function Update-Packages &#123;</span><br><span class="line"><span class="meta">#</span><span class="bash"> update pip</span></span><br><span class="line">Write-Host &quot;Step 1: 更新 pip&quot; -ForegroundColor Magenta -BackgroundColor Cyan</span><br><span class="line"><span class="meta">$</span><span class="bash">a = pip list --outdated</span></span><br><span class="line"><span class="meta">$</span><span class="bash">num_package = <span class="variable">$a</span>.Length - 2</span></span><br><span class="line">for ($i = 0; $i -lt $num_package; $i++) &#123;</span><br><span class="line"><span class="meta">$</span><span class="bash">tmp = (<span class="variable">$a</span>[2 + <span class="variable">$i</span>].Split(<span class="string">&quot; &quot;</span>))[0]</span></span><br><span class="line">pip install -U $tmp</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> update TeX Live</span></span><br><span class="line"><span class="meta">$</span><span class="bash">CurrentYear = Get-Date -Format yyyy</span></span><br><span class="line">Write-Host &quot;Step 2: 更新 TeX Live&quot; $CurrentYear -ForegroundColor Magenta -BackgroundColor Cyan</span><br><span class="line">tlmgr update --self</span><br><span class="line">tlmgr update --all</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> update Chocolotey</span></span><br><span class="line">choco outdated</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------    Functions END     -------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------   Set Alias BEGIN    -------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1. 编译函数 make</span></span><br><span class="line">function MakeThings &#123;</span><br><span class="line">nmake.exe $args -nologo</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name make -Value MakeThings</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 更新系统 os-update</span></span><br><span class="line">Set-Alias -Name os-update -Value Update-Packages</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3. 查看目录 ls &amp; ll</span></span><br><span class="line">function ListDirectory &#123;</span><br><span class="line">(Get-ChildItem).Name</span><br><span class="line">Write-Host(&quot;&quot;)</span><br><span class="line">&#125;</span><br><span class="line">Set-Alias -Name ls -Value ListDirectory</span><br><span class="line">Set-Alias -Name ll -Value Get-ChildItem</span><br><span class="line"><span class="meta">#</span><span class="bash">-------------------------------    Set Alias END     -------------------------------</span></span><br></pre></td></tr></table></figure></li><li><p>重新打开 Windows Terminal ：paradox 主题如下</p><p>尝试查看配置颜色，给了一个<a href="https://ohmyposh.dev/docs/upgrading">网址</a>，打开之后告诉我们怎么更新到 V3</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819154202.png" alt="image-20210819154201873"></p><blockquote><p>更新命令，同样我们加入 Verbose 查看信息</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Update-Module -Name oh-my-posh -Verbose -Scope CurrentUser</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819155023.png" alt="image-20210819155023426"></p></li></ol><h2 id="主题更改"><a href="#主题更改" class="headerlink" title="主题更改"></a>主题更改</h2><ol><li><p>查看主题</p><blockquote><p>查看主题样式、列举所有主题命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Get-PoshThemes</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819154544.png" alt="image-20210819154544468"></p></li><li><p>更改主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> Set-PoshPrompt -Theme theme_name</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210819155902.png"></p></li></ol><h2 id="VsCode终端"><a href="#VsCode终端" class="headerlink" title="VsCode终端"></a>VsCode终端</h2><blockquote><p>经过上面的美化之后，<strong>Vscode</strong> 的终端也会得以改变，但是由于 <strong>Vscode</strong> 设置的字体<strong>可能</strong>会导致乱码</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820130517.png" alt="image-20210820130517343"></p><p>我们按住 <code>Ctrl+Shift+P</code> 输入 <code>settings.json</code> 然后编辑字体样式即可，我这里用到的是一个<code>FiraCode NF</code> 字体（这个好像是系统内部的，<a href="https://github.com/ryanoasis/nerd-fonts/releases">下载链接</a>）</p><p>提供一个我的字体设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.fontFamily&quot;: &quot;Fira Code Medium, FiraCode NF, Consolas, &#x27;Courier New&#x27;, monospace&quot;,</span><br></pre></td></tr></table></figure><p>当然还有很多字体都可以，比如 <code>Hack</code> 字体（<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Hack.zip">下载链接</a>），但是我安装之后在 <code>Vscode</code>里面没有用，在 Windows Terminal 的配置文件里面就可以用，具体什么原因不清楚</p><p>下面是 Windows Terminal 的配置文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820130926.png" alt="image-20210820130926051"></p><blockquote><p>红色框表示设置终端字体类型，<code>Hack NF、FiraCode NF</code> 都可以达到特殊字符的显示</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820144905.png" alt="image-20210820144905412"></p><h1 id="Git-bash-美化"><a href="#Git-bash-美化" class="headerlink" title="Git bash 美化"></a>Git bash 美化</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>经过上面 Vscode 的启发，能否在 IDEA 上面把终端也改成 Windows Terminal 的样式</p><p>但是通过查看 Windows Terminal 的安装路径寻找它的可执行文件，然后在 IDEA 里面设置终端的启动文件</p><p>我通过 Everything 找到了 Windows Terminal 的文件路径，把 IDEA 的终端启动文件设置为 <code>wt.exe</code> 启动</p><p>但是它打开终端是独立打开的，不在 IDEA 窗口里面打开，于是想到能不能设置为 <code>Git Bash</code>启动，然后把 Git Bash 美化一下</p></blockquote><blockquote><p>下面 IDEA 设置为了 <code>Git Bash</code> 启动了，只需要把 <strong>Git Bash</strong> 美化即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820150140.png" alt="image-20210820150140200"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820150255.png" alt="image-20210820150255075"></p><h2 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h2><ol><li><p><a href="https://packages.msys2.org/package/zsh?repo=msys&variant=x86_64">https://packages.msys2.org/package/zsh?repo=msys&amp;variant=x86_64</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820150548.png" alt="image-20210820150548480"></p></li><li><p>解压，这个 <code>.zst</code>文件可能解压不了，需要安装一个软件<code>peazip</code><a href="https://peazip.github.io/">https://peazip.github.io/</a></p><p>然后找到第一步下载的，选择解压即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820153632.png" alt="image-20210820153632612"></p><p>解压之后会有一个去掉了 <code>.zst</code>后缀的文件，此时我们在次解压即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820154022.png" alt="image-20210820154022279"></p></li><li><p>我们把上面解压好的文件全部移动到 <code>git</code>的安装目录下，相当于对git bash做一个补充包，比如我这里</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820154133.png" alt="image-20210820154133032"></p></li><li><p>打开 Git Bash，输入 <code>zsh</code>然后你会发现进入了 <strong>zsh</strong> 终端</p><p>提示我们没有配置文件，输入 0 创建一个就行了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820155009.png" alt="image-20210820155009359"></p></li></ol><h2 id="安装-oh-my-zsh"><a href="#安装-oh-my-zsh" class="headerlink" title="安装 oh my zsh"></a>安装 oh my zsh</h2><ol><li><p>上面已经从进入了 zsh 终端了，执行下面命令安装 oh-my-zsh （<a href="https://ohmyz.sh/#install">给出官网</a>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面两个任选其一</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>这里我两个链接都没用</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820155519.png" alt="image-20210820155518983"></p><p>用另外方法安装，其实就是人工手动实现上面两种安装代码方式</p><ul><li><p>首先随便在哪个地方新建文件 <code>install.sh</code></p><p>然后打开网址 <a href="https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh">https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</a> 复制里面的内容 写入<code>install.sh</code>文件中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod +x install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure><blockquote><p>报错了，解决方法先还未知</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820161232.png" alt="image-20210820161232838"></p><blockquote><p>提示：下面不用看了，因为写到一半发现错了</p></blockquote><hr></li><li><p>报错分析</p><p>根据上面的报错大概是说克隆仓库到本地出错，那我们查看它仓库里面的 <code>install.sh</code> 文件里面的内容</p><p>这是 <code>ohmyzsh</code>仓库 <code>install.sh</code> 的一部分代码，我想大概意思就是拉取仓库到本地，并且保存到 <code>~/.oh-my-zsh</code>下（<code>~/</code>这个目录在Windows下是用户目录，Linux 是 root）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820161551.png" alt="image-20210820161551182"></p><p>然后我验证了的确是这样的，我查看云服务器（安装了ohmyzsh）下 <code>/root/</code>目录下是否有个 <code>.oh-my-zsh</code>文件夹以及里面文件是否和仓库一致</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820162125.png" alt="image-20210820162125734"></p><blockquote><p><strong>lib</strong>                 提供了核心功能的脚本库<br><strong>tools</strong>             提供安装、升级等功能的快捷工具<br><strong>plugins</strong>         自带插件的存放位置<br><strong>templates</strong>     自带模板的存放位置<br><strong>themes</strong>         自带主题文件的存放位置<br><strong>custom</strong>         个性化配置目录，自安装的插件和主题可放这里</p></blockquote></li><li><p>知道了 执行<code>install.sh</code>文件的目的是先拉取仓库到本地，我们干脆手动拉取到指定目录下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820162433.png" alt="image-20210820162432951"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820162502.png" alt="image-20210820162502045"></p><p>发现它那里写的是要拉取到<code>.oh-my-zsh</code>目录，我们只需将其改名即可</p></li><li><p>随后在 <code>install.sh</code>目录下执行该脚本看看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210820162833.png" alt="image-20210820162833757"></p></li><li><p>很明显，即使执行了 <code>install.sh</code> 也没有初始化一些文件，即配置文件 <code>.zshrc</code></p><p>配置文件里面有一些东西，但是我们查看之后并没有</p><p>手动添加试试，我添加成功了，也同样开启了 zsh ，但是后面下载插件的时候会有路径上的错误，不知道怎么回事，所以这个方法不可行</p></li></ul></li></ol><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>待续</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>待续</p><h1 id="Git-SDK"><a href="#Git-SDK" class="headerlink" title="Git SDK"></a>Git SDK</h1><blockquote><p>Git SDK 全称 Git for Windows SDK，基于 MSYS2（MinGW64 + Cygwin 合体增强）的仿 Linux 环境；</p><p>安装后大约会占用 4~5 GB 的磁盘空间，但是包含了完整的仿 Linux 环境：包括常用工具，完整的 GNU Complier 链以及包管理器 pacman</p></blockquote><blockquote><p>Windows 里面 Powershell 有工具 <strong>oh-my-posh</strong></p><p>Linux 里面 有 <strong>oh-my-zsh</strong></p><p>接下来在 Windows 下安装 <strong>Git SDK</strong> 模拟一个 Linux环境</p></blockquote><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><ol><li><p>方式一：直接从官网下载一个安装包，就是一个下载器，会自动从仓库克隆这个程序所需要的全部文件，但是由于下载速度很慢，不太可行</p><p><a href="https://gitforwindows.org/">https://gitforwindows.org/</a></p></li><li><p>方式二：直接拉取仓库上的文件到本地（其实就是方式一中需要下载的文件），但是里面文件很大，大概有 5/6 GB</p><p>此时到你想保存的路径克隆下来就行</p><p><a href="https://github.com/git-for-windows/git-sdk-64">https://github.com/git-for-windows/git-sdk-64</a></p></li></ol><blockquote><p>由于我这里每次都拉取失败，这个就先到这里，具体之后需要安装的 zsh 和 oh-my-zsh 还要参考网上的教程</p></blockquote><p>待续</p>]]></content>
      
      
      
        <tags>
            
            <tag> -Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOs+Nginx-rtmp-module</title>
      <link href="2021/08/18/CentOS+nginx-rtmp-module/"/>
      <url>2021/08/18/CentOS+nginx-rtmp-module/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>尝试用云服务器搭建一个<strong>Nginx+rtmp</strong>服务器来做推流服务器</p></blockquote><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><blockquote><p>我这里下载的文件全部保存在<code>/opt/source</code>下</p></blockquote><ol><li><p><strong>nginx-rtmp-module</strong></p><p>下载源文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/arut/nginx-rtmp-module.git</span></span><br></pre></td></tr></table></figure></li><li><p><strong>nginx</strong>：<code>由于我原本有 nginx</code> </p><p>原来有，查看nginx版本<code>rpm -qa nginx</code>，然后下载相同版本的源码</p><p>比如我这里查看之后是<code>nginx-1.16.1-3.el7.x86_64</code></p><p>那么我下载<code>1.16.1</code>版本的nginx源码，然后解压，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget http://nginx.org/download/nginx-1.16.1.tar.gz</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf nginx-1.16.1.tar.gz</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="nginx添加模块"><a href="#nginx添加模块" class="headerlink" title="nginx添加模块"></a>nginx添加模块</h1><blockquote><p>我下载了 <strong>nginx-rtmp-module</strong> 模块，就要把它添加到 <strong>nginx</strong> 服务器里面</p></blockquote><ol><li><p>进入到<code>cd nginx-1.16.1/</code>目录（也就是刚刚解压的 Nginx 目录）</p></li><li><p>查看原来 Nginx 的配置信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nginx -V</span></span><br></pre></td></tr></table></figure><p>比如我这里的配置参数如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818154143.png" alt="image-20210818154143280"></p></li><li><p>复制红色框中的内容</p><p>红色框的配置是我们原来的，这个时候只需要在后面追加上需要添加的模块</p><blockquote><p>注意更该自己存放模块的路径</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要在后面添加的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> --add-module=/opt/<span class="built_in">source</span>/nginx-rtmp-module</span></span><br></pre></td></tr></table></figure><p>然后配置参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --http-client-body-temp-path=/var/lib/nginx/tmp/client_body --http-proxy-temp-path=/var/lib/nginx/tmp/proxy --http-fastcgi-temp-path=/var/lib/nginx/tmp/fastcgi --http-uwsgi-temp-path=/var/lib/nginx/tmp/uwsgi --http-scgi-temp-path=/var/lib/nginx/tmp/scgi --pid-path=/run/nginx.pid --lock-path=/run/lock/subsys/nginx --user=nginx --group=nginx --with-file-aio --with-ipv6 --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-stream_ssl_preread_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --with-http_perl_module=dynamic --with-http_auth_request_module --with-mail=dynamic --with-mail_ssl_module --with-pcre --with-pcre-jit --with-stream=dynamic --with-stream_ssl_module --with-google_perftools_module --with-debug --with-cc-opt=<span class="string">&#x27;-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches -specs=/usr/lib/rpm/redhat/redhat-hardened-cc1 -m64 -mtune=generic&#x27;</span> --with-ld-opt=<span class="string">&#x27;-Wl,-z,relro -specs=/usr/lib/rpm/redhat/redhat-hardened-ld -Wl,-E&#x27;</span> --add-module=/opt/<span class="built_in">source</span>/nginx-rtmp-module</span></span><br></pre></td></tr></table></figure></li><li><p>执行编译命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br></pre></td></tr></table></figure><blockquote><p>遇到了问题这一步</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818155505.png" alt="image-20210818155505108"></p><p>查看网上说没有安装其它依赖环境 <strong>pcre、zlib、openssl</strong>， 这些是解压包、ssl相关的依赖</p><p>但是我查看了下面 3 个显示有安装</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818155919.png" alt="image-20210818155919006"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install pcre pcre-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install zlib zlib-devel</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum -y install openssl openssl-devel</span>  </span><br></pre></td></tr></table></figure><p>先不管有没有安装，尝试安装上述 3 个，安装完后在查看，好吧其实上面 3 个和我原来的不同</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818160214.png" alt="image-20210818160214054"></p><p>在尝试<code>make</code>，结果还是一样的报错</p><p><strong>然后我尝试把划线部分删除</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818162322.png" alt="image-20210818162322231"></p><p>执行完之后如下报错</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818162352.png" alt="image-20210818162352434"></p><p>上网查找方法安装如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install libxslt-devel</span></span><br></pre></td></tr></table></figure><p>然后重新<code>./configure</code>又有新报错，如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818162518.png" alt="image-20210818162517949"></p><p>查到解决方案，安装如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install perl-ExtUtils-Embed</span></span><br></pre></td></tr></table></figure><p>然后重新<code>./configure</code>又有新报错，如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818162806.png" alt="image-20210818162806934"></p><p>查到解决方案，安装如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum -y install gperftools</span></span><br></pre></td></tr></table></figure><p>然后重新<code>./configure</code>，终于没有报错了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818163058.png" alt="image-20210818163058013"></p></li><li><p>编译完成后，会生成一个<code>objs</code>的目录</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818163430.png" alt="image-20210818163430606"></p><p><code>objs</code>目录文件如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818165618.png" alt="image-20210818165618776"></p><p>需要把箭头文件替换成原来的，使用<code>which nginx</code>查看原来的路径</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818165546.png" alt="image-20210818165546089"></p><p>把这个东西替换掉<code>/usr/sbin/nginx</code></p><p>如果替换不了就先关闭 Nginx 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop nginx.service</span></span><br></pre></td></tr></table></figure><p>替换好了之后打开 Nginx 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start nginx.service</span></span><br></pre></td></tr></table></figure><p>发现报错，启动不了服务</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818173414.png" alt="image-20210818173414713"></p><p>用 <code>systemctl status nginx.service</code>查看信息</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818173626.png" alt="image-20210818173626067"></p><p>这里说<code>ngx_mail_module.so</code>这个模块有问题，谷歌一波（手动滑稽）</p><p>最后实在找不到解决方案了，干脆重装 Nginx，先备份好配置文件</p><p>不对，想到一个方法，我们查找出错的这个模块，可以发现编译了一个新的，尝试替换原来的，看是否能解决</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818182312.png" alt="image-20210818182312373"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818182515.png" alt="image-20210818182515419"></p><p>最后打开 Nginx 服务看是否成功</p><p>发现没有任何提示，终于解决了</p></li></ol><h1 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h1><p><code>etc/nginx/nginx.conf</code>下面这个添加在 https{ } 只外</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">rtmp&#123;</span><br><span class="line">    server&#123;    </span><br><span class="line">        listen 1935;  # 监听的端口  </span><br><span class="line">        chunk_size 4000;  # 数据传输块的大小</span><br><span class="line"></span><br><span class="line">        application minghui &#123;  # rtmp 推流请求路径  </span><br><span class="line">            live on;</span><br><span class="line">            hls on;   </span><br><span class="line">            hls_path /myweb/rtmp/live;</span><br><span class="line">            hls_fragment 5s;    </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加配置之后来到 OBS 推流，服务器对应配置文件应该如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 服务器</span></span><br><span class="line">rtmp://IP:PORT/推流请求路径</span><br><span class="line"><span class="meta">#</span><span class="bash"> 串流秘钥：自己随便设置</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210818222225.png" alt="image-20210818222218793"></p><p>开始推流之后别人想观看就通过下面这个链接，<code>Potplay、VLC</code>都可以观看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtmp://IP:PORT/推流请求路径/串流秘钥</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> -Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="2021/08/14/CSS/"/>
      <url>2021/08/14/CSS/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="CSS简介"><a href="#CSS简介" class="headerlink" title="CSS简介"></a>CSS简介</h1><blockquote><p><strong>层叠样式表</strong>（英语：<strong>C</strong>ascading <strong>S</strong>tyle <strong>S</strong>heets，缩写：<strong>CSS</strong>；又称<strong>串样式列表</strong>、<strong>级联样式表</strong>、<strong>串接样式表</strong>、<strong>阶层式样式表</strong>）是一种用来为结构化文档（如<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>文档或<a href="https://zh.wikipedia.org/wiki/XML">XML</a>应用）添加样式（字体、间距和颜色等）的<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80">计算机语言</a>，由<a href="https://zh.wikipedia.org/wiki/W3C">W3C</a>定义和维护。CSS 被分为不同等级：CSS1 现已废弃， CSS2.1 是推荐标准， CSS3 分成多个小模块且正在标准化中。[<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90">来源请求]</a><a href="https://zh.wikipedia.org/wiki/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8#CSS3">CSS3</a>现在已被大部分现代<a href="https://zh.wikipedia.org/wiki/%E7%80%8F%E8%A6%BD%E5%99%A8">浏览器</a>支持，而下一版的<a href="https://zh.wikipedia.org/wiki/%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8#CSS4">CSS4</a>仍在开发中</p><p>CSS不能单独使用，必须与<a href="https://zh.wikipedia.org/wiki/HTML">HTML</a>或<a href="https://zh.wikipedia.org/wiki/XML">XML</a>一起协同工作，为HTML或XML起装饰作用。</p><p>CSS最重要的目标是将文件的内容与它的显示分隔开来。在CSS出现前，几乎所有的HTML文件内都包含文件显示的信息，比如字体的颜色、背景应该是怎样的、如何排列、边缘、连线等等都必须一一在HTML文件内列出，有时重复列出。CSS使作者可以将这些信息中的大部分隔离出来，简化HTML文件，这些信息被放在一个辅助的，用CSS语言写的文件中。HTML文件中只包含结构和内容的信息，CSS文件中只包含样式的信息</p><p>——维基百科</p></blockquote><h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><blockquote><p>作用：选择页面上的某一个或某一类元素</p></blockquote><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><ol><li><p><strong>标签选择器</strong>：选择某一类标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tag_name &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>类选择器</strong>：选择所有 class 属性一致的标签，可以跨标签</p><p>比如 <code>&lt;h1 class=&quot;style&quot;&gt;&lt;/h1&gt;  与 &lt;h2 class=&quot;style&quot;&gt;&lt;/h2&gt;</code> 可以共存，属性不同类可以相同</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.class_name &#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>id 选择器</strong>：全局唯一</p><p>比如 <code>&lt;h1 id=&quot;style&quot;&gt;&lt;/h1&gt;  与 &lt;h2 id=&quot;style&quot;&gt;&lt;/h2&gt;</code> 不可以共存，<strong>id</strong> 名全局唯一</p><p>但是我在 Vscode 里面书写上述两个是没有报错？下面引用 W3school 对 id 选择器的描述</p><blockquote><p><strong>类选择器还是 ID 选择器？</strong></p><p>在类选择器这一章中我们曾讲解过，可以为任意多个元素指定类。前一章中类名 important 被应用到 p 和 h1 元素，而且它还可以应用到更多元素。</p><p><strong>区别 1：只能在文档中使用一次</strong></p><p>与类不同，在一个 HTML 文档中，ID 选择器会使用一次，而且仅一次。</p><p><strong>区别 2：不能使用 ID 词列表</strong></p><p>不同于类选择器，ID 选择器不能结合使用，因为 ID 属性不允许有以空格分隔的词列表。</p><p><strong>区别 3：ID 能包含更多含义</strong></p></blockquote><p><strong>区别2</strong> 中写道 <em>在一个 HTML 文档中，ID 选择器会使用一次，而且仅一次</em> </p><p>但是为什么在代码中多个标签的 id 相同时，也可以显示代码效果。如图、</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210815170731.png" alt="image-20210815170724879"></p><p>网上看到的回答是：”在JS进行dom操作是就存在问题了”</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#id_name &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>总结：三者优先级：<code>id 选择器 &gt; 类选择器 &gt; 标签选择器</code></p></blockquote><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><ol><li><p><strong>后代选择器（descendant selector）</strong>：子代全选</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 后代名为 name2 的标签，如果 name2 里面还有标签，里面的标签也同样会选中 */</span></span><br><span class="line">name1 name2 &#123;&#125;</span><br></pre></td></tr></table></figure><p>只要是某个元素的后代均会改变</p><blockquote><p>举例说明：下面截取的是代码的主体部分</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>写法一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写法二：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>写法三</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">body</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">color</span>: cadetblue;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面是三种写法的结果</p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210816095836.png" align=center /><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210816102104.png" align=center/><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210816102735.png"  align=center/><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210816102930.png"></p></li><li><p><strong>子选择器</strong>：只选择一个子代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 后代名为 name2 的标签，如果 name2 里面还有标签，里面的标签也会被选中 */</span></span><br><span class="line">name1&gt;name2 &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们知道了后代选择器，子选择器就是后代选择器的弱化版本</p><p>它只会选择一代，但是也可以渗透到最里面</p></blockquote></li><li><p><strong>兄弟（弟弟）选择器</strong>：选择下面最近的一个子代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 下面一个(如果下面有多个也只会选择下面最近的一个)名为 name2 的标签，其本身 name1 不会被选择 */</span></span><br><span class="line">name1 + name2 &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意细节：</p><p>下面这个只会选中 <code>我是第一条</code></p><p>因为 <code>我是第二条</code> 上面隔了一个 <code>&lt;br&gt;</code>标签</p><p>由此可见，选择下面最近的一个子代不能隔有其他标签，若有则不会选中最近的一个子代</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.ul+li &#123;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>通用（弟弟们）选择器</strong>：选择下面的所有子代</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 表示选择 name1 下面所有(如果下面有多个全部选择)名为 name2 的标签，其本身 name1 不会被选择 */</span></span><br><span class="line">name1~name2 &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>举例，和 兄弟选择器 略有不同</p><p>此时只会选中 <code>我是第一条和我是第三条</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.ul~li &#123;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表一<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表二<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第一条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表三<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表四<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第二条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>我是第三条<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结：四者能够穿甲（指能够一直延续到最里面的标签）的有：后代选择、子代选择器</p></blockquote></li></ol><h2 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>结构伪类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 选择 ul 的第一个子元素 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-child &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*顺序数,因为ul下面第一个是&lt;h1&gt;,所以不会选中*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first</span>-of-type &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*类型数*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: red;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/* 选择 ul 的第最后一个子元素 */</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*顺序数,因为ul最后一个是&lt;h1&gt;,所以不会选中*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: orange;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-of-type</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*类型数*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /* 选中 p1：定位到父元素，选中当前的第一个元素</span><br><span class="line"><span class="css">        选择当前 <span class="selector-tag">p</span> 元素的父元素，选中父元素的第一个，并且是当前元素才生效 */</span></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*顺序数,因为p父类body下面第一个是&lt;h1&gt;,所以不会选中*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: deepskyblue;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="css">            <span class="comment">/*类型数*/</span></span></span><br><span class="line"><span class="css">            <span class="attribute">font-size</span>: <span class="number">60px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: blueviolet;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>H1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>结果</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210816155940.png" alt="image-20210816155939976"></p><h2 id="属性选择器（常用）"><a href="#属性选择器（常用）" class="headerlink" title="属性选择器（常用）"></a>属性选择器（常用）</h2><blockquote><p>正则表达式：</p><p><code>=</code>绝对等于</p><p><code>*=</code>包含</p><p><code>^=</code>以什么（=号后面的）开头</p><p><code>&amp;=</code>以什么（=号后面的）结尾</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RegExp</title>
      <link href="2021/08/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2021/08/02/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h1><ol><li>限定符</li><li>选择匹配符</li><li>分组组合和反向引用</li><li>特殊字符</li><li>字符匹配符</li><li>定位符</li></ol><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><ol><li><p>转义号 <code>\\</code></p><blockquote><p>匹配某些特殊字符需要用到</p><p>一个 \ 开头的字符会被当作转义字符处理</p><p>Java 的正则表达式中，两个 \\ 代表其他语言的一个 \</p></blockquote><p>需要用到转义符号的字符：<code>* + ( ) $ / \ ? [ ] ^ &#123; &#125;</code></p><p>如匹配 “(“ 写成 <code>\\(</code></p><p>匹配 “.” 写成 <code>\\.</code></p></li><li><p>字符匹配符</p></li></ol><table><thead><tr><th align="left">符号</th><th align="center">含义</th><th align="center">示例</th><th align="center">解释</th></tr></thead><tbody><tr><td align="left"><code>[ ]</code></td><td align="center">可接受的字符列表</td><td align="center">[abcd]</td><td align="center">abcd中的任意一个字符</td></tr><tr><td align="left"><code>[^ ]</code></td><td align="center">不接受的字符列表</td><td align="center">[^abcd]</td><td align="center">除 abcd 以外的任一字符，包括数字和特殊符号</td></tr><tr><td align="left"><code>-</code></td><td align="center">连字符</td><td align="center">A-Z or [AB…Z]</td><td align="center">任意大写字母</td></tr><tr><td align="left"><code>.</code></td><td align="center">匹配除 \n 以外的任何字符。如果匹配自身，则需要使用<code>\\.</code></td><td align="center">a..b</td><td align="center">匹配以 a 开头，b 结尾，中间两个字符任意，长度为 4 的字符串</td></tr><tr><td align="left"><code>\\d</code></td><td align="center">匹配单个数字字符，等价于 <code>[0-9]</code></td><td align="center">\\d{3}(\\d)?</td><td align="center">匹配 3 或 4 个数字的字符串</td></tr><tr><td align="left"><code>\\D</code></td><td align="center">匹配单个非数字字符，等价于 <code>[^0-9]</code></td><td align="center">\\D(\\d)*</td><td align="center">匹配以单个非数字开头，后任意个数字的字符串</td></tr><tr><td align="left"><code>\\w</code></td><td align="center">匹配单个数字、大小写字母字符，等价于 <code>[0-9a-zA-Z_]</code></td><td align="center">\\d{3}\\w{4}</td><td align="center">匹配以 3 个数字开头的长度为 7 的数字字母的字符串</td></tr><tr><td align="left"><code>\\W</code></td><td align="center">匹配单个非数字、大小写字母字符，等价于<code>[^0-9a-zA-Z_]</code></td><td align="center">\\W+\\d{2}</td><td align="center">匹配以<strong>至少 1 个</strong>非数字、大小写字母字符开头，2 个数字字符结尾的字符串</td></tr><tr><td align="left"><code>\\s</code></td><td align="center">匹配任何空白字符（空格、制符表等）</td><td align="center"></td><td align="center"></td></tr><tr><td align="left"><code>\\S</code></td><td align="center">匹配任何非空白字符</td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p><code>\\w</code>匹配 4 类：数字，小写字母、大写字母、包括下划线</p><p><code>abc</code>：匹配 abc 字符</p><p><code>(?!)abc</code>：匹配 abc 和 ABC 字符</p></blockquote><ol start="3"><li><p>选择匹配符</p><p>一个<code>|</code></p></li><li><p>限定符</p><p>用于限定前面的字符和组合项连续出现多少次</p><table><thead><tr><th align="left">符号</th><th align="center">含义</th><th align="center">示例</th><th align="center">解释</th></tr></thead><tbody><tr><td align="left"><code>*</code></td><td align="center">零次或多次匹配前面的字符或子表达式</td><td align="center">zo*</td><td align="center">zo* 匹配”z”和”zoo”。* 等效于 {0,}</td></tr><tr><td align="left"><code>+</code></td><td align="center">一次或多次匹配前面的字符或子表达式</td><td align="center">zo+</td><td align="center">“zo+”与”zo”和”zoo”匹配，但与”z”不匹配。+ 等效于 {1,}</td></tr><tr><td align="left"><code>?</code></td><td align="center">零次或一次匹配前面的字符或子表达式</td><td align="center">do(es)?</td><td align="center">“do(es)?”匹配”do”或”does”中的”do”。? 等效于 {0,1}</td></tr><tr><td align="left"><code>&#123;n&#125;</code></td><td align="center">只能输入 n 个字符</td><td align="center">[abcd]{3}</td><td align="center">由abcd中字母组成的任意长度为 3 的字符串，eg：abc、abd、dda</td></tr><tr><td align="left"><code>&#123;n,&#125;</code></td><td align="center">指定至少 n  个匹配</td><td align="center">[abcd]{3,}</td><td align="center">由abcd中字母组成的任意长度至少为 3 的字符串，eg：abc、adbd、addaa</td></tr><tr><td align="left"><code>&#123;n,m&#125;</code></td><td align="center">指定至少 n 个但不多于 m 个匹配</td><td align="center">[abcd]{3,5}</td><td align="center">由abcd中字母组成的任意长度至少为 3 但不多于 5 的字符串（即 3|4|5个）</td></tr></tbody></table></li><li><p>定位符</p><table><thead><tr><th align="left">符号</th><th align="center">含义</th><th align="center">示例</th><th align="center">解释</th></tr></thead><tbody><tr><td align="left"><code>^</code></td><td align="center">指定起始字符</td><td align="center">^[0-9]+[a-z]*</td><td align="center">以至少一个数字开头，后面任意接小写字母的字符串（也可以没有小写字母字符串）</td></tr><tr><td align="left"><code>$</code></td><td align="center">指定结束字符</td><td align="center">^[0-9]-[a-z]+$</td><td align="center">以一个数字开头后连接 “-”，并以至少一个小写字母结尾的字符串</td></tr><tr><td align="left"><code>\\b</code></td><td align="center">匹配目标字符串的边界</td><td align="center">abc\b</td><td align="center">“abc123<strong>abc</strong> 4<strong>abc</strong>“ 会匹配尾部两个 abc，空格分隔会识别为 2 个目标字符串</td></tr><tr><td align="left"><code>\\B</code></td><td align="center">匹配目标字符串的非边界</td><td align="center">[abcd]{3}</td><td align="center">与 <code>\\b</code>正好相反 “<strong>abc</strong>123abc 4abc” 会匹配头部一个 abc</td></tr></tbody></table></li><li><p>捕获分组</p><ul><li><p>非命名分组：根据括号个数依次编号为 1、2、3、4… 组，取组的时候用 <code>group(name)</code></p></li><li><p>命名分组</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211002110839.png" alt="image-20211002110832346"></p><blockquote><p><code>group(int group)、group(String name)</code>  重载了，前者通过编号取，后者通过命名取</p></blockquote></li></ul></li><li><p><code>非捕获分组</code></p><table><thead><tr><th></th><th align="center"></th></tr></thead><tbody><tr><td></td><td align="center"><code>(?:pattern)</code></td></tr><tr><td></td><td align="center"><code>(?=pattern)</code></td></tr><tr><td></td><td align="center"><code>(?!pattern)</code></td></tr></tbody></table></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tree[realize]</title>
      <link href="2021/07/26/Tree/"/>
      <url>2021/07/26/Tree/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="BinaryTree-抽象类"><a href="#BinaryTree-抽象类" class="headerlink" title="BinaryTree-抽象类"></a>BinaryTree-抽象类</h2><blockquote><p>因为树有很多种，有些功能的实现都是一样的，所以把这些实现一样的单独抽取出来放在父类 <code>Tree</code> </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tree</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> size;   <span class="comment">// 节点个数</span></span><br><span class="line">    <span class="keyword">protected</span> Node&lt;E&gt; root;   <span class="comment">// 根节点</span></span><br><span class="line">    <span class="keyword">protected</span> Comparator&lt;E&gt; comparator;   <span class="comment">// 比较器</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*========================父类 Tree 的通抽象函数实现========================*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E element)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*=====================================================================*/</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*========================父类 Tree 的通用函数实现========================*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 元素数量</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为空</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 清空所有元素</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        root = <span class="keyword">null</span>;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preorderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visitor.visit(node.element);</span><br><span class="line">        preorderTraversal(node.left, visitor);</span><br><span class="line">        preorderTraversal(node.right, visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inorderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        inorderTraversal(node.left, visitor);</span><br><span class="line">        visitor.visit(node.element);</span><br><span class="line">        inorderTraversal(node.right, visitor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postorderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        postorderTraversal(node.left, visitor);</span><br><span class="line">        postorderTraversal(node.right, visitor);</span><br><span class="line">        visitor.visit(node.element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 层序遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">levelOrderTraversal</span><span class="params">(Node&lt;E&gt; node, Visitor&lt;E&gt; visitor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        Node&lt;E&gt; tmp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            tmp = queue.poll();</span><br><span class="line">            visitor.visit(tmp.element);</span><br><span class="line">            <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 树的高度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> height(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">height</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + Math.max(height(node.left), height(node.right));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">heightIteration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> heightIteration(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">heightIteration</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(node);</span><br><span class="line">        <span class="keyword">int</span> level = queue.size();   <span class="comment">// 记录每层节点数量</span></span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Node&lt;E&gt; tmp = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add((tmp.right));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> == --level) &#123;</span><br><span class="line">                height++;</span><br><span class="line">                level = queue.size();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> height;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否为完全二叉树</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    public boolean isComplete() &#123;</span></span><br><span class="line"><span class="comment">//        Queue&lt;Node&lt;E&gt;&gt; queue = new ArrayDeque&lt;&gt;();</span></span><br><span class="line"><span class="comment">//        queue.add(root);</span></span><br><span class="line"><span class="comment">//        boolean leaf = false;</span></span><br><span class="line"><span class="comment">//        while (!queue.isEmpty()) &#123;</span></span><br><span class="line"><span class="comment">//            Node&lt;E&gt; tmp = queue.poll();</span></span><br><span class="line"><span class="comment">//            if (!tmp.isLeaf() &amp;&amp; leaf) &#123;</span></span><br><span class="line"><span class="comment">//                return false;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            if (tmp.hasTowChildren()) &#123;</span></span><br><span class="line"><span class="comment">//                queue.add(tmp.left);</span></span><br><span class="line"><span class="comment">//                queue.add(tmp.right);</span></span><br><span class="line"><span class="comment">//            &#125; else if (tmp.left == null &amp;&amp; tmp.right != null) &#123;</span></span><br><span class="line"><span class="comment">//                return false;</span></span><br><span class="line"><span class="comment">//            &#125; else &#123;</span></span><br><span class="line"><span class="comment">//                leaf = true;</span></span><br><span class="line"><span class="comment">//                if (tmp.left != null) &#123;</span></span><br><span class="line"><span class="comment">//                    queue.add(tmp.left);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return true;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&lt;E&gt;&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">boolean</span> leaf = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            Node&lt;E&gt; tmp = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (leaf &amp;&amp; !tmp.isLeaf()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.left != <span class="keyword">null</span>) &#123;         <span class="comment">// left != null</span></span><br><span class="line">                queue.add(tmp.left);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123; <span class="comment">// left == null &amp;&amp; right != null</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tmp.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.add(tmp.right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// left != null &amp;&amp; left == null</span></span><br><span class="line">                leaf = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*=====================================================================*/</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> E element;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;E&gt; left;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;E&gt; right;</span><br><span class="line">        <span class="keyword">public</span> Node&lt;E&gt; parent;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(E element, Node&lt;E&gt; parent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.element = element;</span><br><span class="line">            <span class="keyword">this</span>.parent = parent;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否为叶子节点</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLeaf</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left == <span class="keyword">null</span> &amp;&amp; right == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断是否度为 2</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasTowChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前驱节点"><a href="#前驱节点" class="headerlink" title="前驱节点"></a>前驱节点</h2><blockquote><p>前驱节点（predecessor）：中序遍历时的前一个节点</p></blockquote><p>下面这个树用这个网址生成：<a href="http://btv.melezinek.cz/binary-search-tree.html">http://btv.melezinek.cz/binary-search-tree.html</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210811104526.png" alt="image-20210811104519401"></p><blockquote><p>中序遍历：33 35 38 39 40 44 57 59 60 61 62 67 68 76</p></blockquote><p>比如 44 的前驱节点是 中序遍历的前一个节点 即 40</p><p>40 的前驱节点是 39</p><p>38 的前驱节点是 35</p><p>57 的前驱节点是 44</p><p>33 没有前驱节点</p><p>62 的前驱节点是 61</p><h3 id="实现流程"><a href="#实现流程" class="headerlink" title="实现流程"></a>实现流程</h3><blockquote><p>根据中序遍历的流程，先遍历目标节点的左子树，那么左子树有无会成为首个判定条件</p></blockquote><ol><li><p><code>node.left != null</code></p><blockquote><p>一直找到目标节点左子树的最右节点：<code>node.left.right.right.right......</code></p></blockquote></li><li><p><code>node.left == null</code></p><p>一直往上找：<code>node.parent.parent......</code>，直到当前节点是它父节点的右节点：（1）找到了这么一个节点，（2）找不到这么一个节点</p><ul><li>比如 57 的父节点是 59(59不是它父节点的右边)，继续往上找，然后找到 59 的父节点 62(62是它父节点的右边)，所以 57 的前驱节点就是 62 的父节点 44</li><li>比如 33 的父节点是 35(35不是它父节点的右边)，继续往上找，然后找到 44(44没有父节点了)，因此 33 没有前驱结点</li></ul><blockquote><p>总之就是一直往上找父节点，直到<code>当前节点成为了它父节点的右子树</code>，那么它父节点就是目标节点的前驱结点</p><p>如果一直往上找，当前节点都是它父节点的左子树(即找到了顶部)，那么目标节点就没有前驱节点</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前驱节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">predecessor</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;E&gt; cur = node.left;</span><br><span class="line">    <span class="comment">// 如果左子树不空</span></span><br><span class="line">    <span class="keyword">if</span> (node.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果左子树为空，一直找父节点，直到在父节点的右子树上</span></span><br><span class="line">    <span class="keyword">while</span> (node.parent != <span class="keyword">null</span> &amp;&amp; node != node.parent.right) &#123;</span><br><span class="line">        node = node.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="后继节点"><a href="#后继节点" class="headerlink" title="后继节点"></a>后继节点</h2><h3 id="实现流程-1"><a href="#实现流程-1" class="headerlink" title="实现流程"></a>实现流程</h3><blockquote><p>后继节点（successor）和找前驱异曲同工，同样根据中序遍历的流程，后继节点无非就是找目标节点的后一个，那么有无右子树成为首个判定条件</p></blockquote><ol><li><p><code>node.right != null</code></p><blockquote><p>一直找到目标节点左子树的最右节点：<code>node.right.left.left.left......</code></p></blockquote></li><li><p><code>node.right == null</code></p><blockquote><p>总之就是一直往上找父节点，直到<code>当前节点成为了它父节点的左子树</code>，那么它父节点就是目标节点的后继结点</p><p>如果一直往上找，当前节点都是它父节点的右子树(即找到了顶部)，那么目标节点就没有后继节点</p></blockquote></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 后继节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Node&lt;E&gt; <span class="title">successor</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node&lt;E&gt; cur = node.right;</span><br><span class="line">    <span class="comment">// 如果右子树不为空</span></span><br><span class="line">    <span class="keyword">if</span> (node.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (cur.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur = cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果右子树为空，一直找父节点，直到在父节点的左子树上</span></span><br><span class="line">    <span class="keyword">while</span> (node.parent != <span class="keyword">null</span> &amp;&amp; node != node.parent.left) &#123;</span><br><span class="line">        node = node.parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><blockquote><p>BinaryTreeInfo：是别人写的一个工具，这里是引用</p></blockquote><h1 id="AVL-树"><a href="#AVL-树" class="headerlink" title="AVL 树"></a>AVL 树</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>平衡因子（Balance Factor）：某节点的左右子树的高度差 </li><li>AVL 树特点：<ul><li>每个节点的平衡因子都是：-1 0 1（绝对值 小于等于 1，如果大于1，称为 ”失衡“</li><li>每个节点的左右子树高度差不超过 1</li><li>搜索、添加、删除的时间复杂度是 O(logn)</li></ul></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210812103405.png" alt="image-20210812103356952"></p><h2 id="平衡对比"><a href="#平衡对比" class="headerlink" title="平衡对比"></a>平衡对比</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210812103802.png" alt="image-20210812103802671"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tree - java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复杂度</title>
      <link href="2021/07/22/data_struct_01/"/>
      <url>2021/07/22/data_struct_01/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><ol><li>时间复杂度</li><li>空间复杂度</li><li>忽略低阶项和所有常数项系数</li><li><code>O(1)、O(logN)、O(N)、O(N*logN)、O(N^2)、O(N^3)、O(N^k)、O(2^N)、O(3^N)、O(k^N)、O(N!)</code></li></ol><blockquote><p>额外空间复杂度</p></blockquote><p>实现一个算法流程，在实现过程中，需要开辟一些空间来完成这个算法过程</p><p>作为输入参数的空间，不算额外空间</p><p>作为输出结果的空间，也不算额外空间</p><p>好比题目要求你把这个数组拷贝一份，那么我肯定要申请数组空间，那么这个数组空间也不算额外空间，因为这是题目的需求，我不得不申请数组空间</p><blockquote><p>如何比较两个算法的好坏</p></blockquote><ol><li><p>首先比较时间复杂度</p></li><li><p>如果时间复杂度一样，按理说是比较他们的常数项，但是这个不太现实</p><p>比如冒泡排序和插入排序，时间复杂度均为 O(N^2^)，但实际上肯定插入排序好，但是插入排序时间复杂度的常数项是随着测试数据改变而变化</p><p>所以我们不能靠理论比较，直接用随机数据测试比较</p><p>为什么不理论分析？</p><p>因为不同常数时间的操作，虽然时间都是固定的，但是还是有快慢，比如，位运算的常数时间小于算术运算的常数时间，这两个运算的常数时间又小于数组寻址的时间</p><p>在者理论分析很困难，很难定量分析</p></li></ol><blockquote><p>最优解</p></blockquote><ol><li><p>时间复杂度越低越好</p></li><li><p>空间复杂度越低越好</p></li><li><p>时间复杂度相同情况，比较空间复杂度</p></li><li><p>时间空间复杂度相同情况，两者认为相同</p><p>不能因为一些局部细节比较两者好坏，即使常数时间可能有快慢，因为这个因素只决定了实现层次的优化和考虑，而和怎么解决这个问题的思想无关</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ - 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动窗口</title>
      <link href="2021/07/22/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
      <url>2021/07/22/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><blockquote><p>T1</p></blockquote><p>假设一个固定大小为 W 的窗口，依次划过 arr</p><p>返回每一次滑出状况的最大值</p><p>例如：arr = [4,3,5,4,3,3,6,7], W = 3</p><p>返回：[5,5,5,4,6,7]</p><blockquote><p>T2</p></blockquote><p>给定一个数组 arr，和一个整数 num</p><p>某个 arr 中的子数组 sub，如果想达标，必须满足：</p><p>sub 中最大值 - sub 中最小值 &lt;= num</p><p>返回 arr 中达标子数组的数量</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ - 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随机数(C++)</title>
      <link href="2021/07/20/%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%88C++)/"/>
      <url>2021/07/20/%E9%9A%8F%E6%9C%BA%E6%95%B0%EF%BC%88C++)/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="rand-、srand-、time-、clock"><a href="#rand-、srand-、time-、clock" class="headerlink" title="rand()、srand()、time()、clock()"></a>rand()、srand()、time()、clock()</h1><h2 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h2><ol><li><p>rand()：随机函数，头文件 <code>#include &lt;cstdlib&gt;</code>有些时候不加也可以编译</p></li><li><p>看 rand() 函数原型</p><p>用户未设定随机数种子时，系统默认的随机数种子为1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">int</span> next = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">rand</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = next * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)(next / <span class="number">65535</span>) % <span class="number">32768</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>产生的数范围 <code>[0, RAND_MAX)</code> ，<strong>RAND_MAX</strong> 是一个符号常量</p><ul><li>在 Windows 上是 2^15^-1 = 32,768 - 1【0x7FFF】</li><li>在 Linux 上是 2^31^-1 = 2,147,483,648 - 1 【0x7FFFFFFF】</li></ul></li><li><p>rand() 产生的是伪随机数字，每次执行时是相同的</p><p>想要每次结果都不同就要将种子时刻发生变化，我们通过 <code>srand()</code>函数传参来改变它的 next 大小</p></li></ol><h2 id="srand"><a href="#srand" class="headerlink" title="srand()"></a>srand()</h2><ol><li><p>它会改变 <strong>rand()</strong> 函数中的参数 <strong>next</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">srand</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> seed)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    next = seed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>因此可以通过传入一个 无符号整数 改变 next 值，但是这样比较麻烦，每次都要用户输入</p><p>可以选择时间作为参数传入</p></li></ol><h2 id="time"><a href="#time" class="headerlink" title="time()"></a>time()</h2><p>详细查看：<a href="https://www.runoob.com/cplusplus/cpp-date-time.html">C++ 日期 &amp; 时间</a></p><ol><li><p>time(nullptr) 返回的是一个 无符号整数，值为 从<code>1970年到当前时间的秒数</code></p></li><li><p>运行下面代码将会得到当前的 年 时 秒</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> times = time(<span class="literal">nullptr</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span> / <span class="number">365</span> + <span class="number">1970</span> &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">// 年</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times / <span class="number">60</span> % <span class="number">60</span> &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 时</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; times % <span class="number">60</span> &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">// 秒</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="clock"><a href="#clock" class="headerlink" title="clock()"></a>clock()</h2><blockquote><p>直接返回毫秒</p></blockquote><h1 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h1><ol><li><p><code>rand()</code>生成 <code>[0, RAND_MAX)</code> 的数</p><ul><li>rand() % mod：<code>[0, mod)</code></li><li>rand() % mod + k：<code>[k, mod+k)</code></li></ul></li><li><p>有了上面两条就可以推出很多公式了</p><ul><li><p><code>[0, a)</code>随机数：<code>rand() % a</code></p></li><li><p><code>[a, b)</code>随机数：<code>(rand() % (b - a)) + a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b) --&gt; [0, b-a)+a --&gt; rand() % (b-a) + a </span><br></pre></td></tr></table></figure></li><li><p><code>(a, b]</code>随机数：<code>(rand() % (b - a)) + a + 1</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(a, b] --&gt; (0, b-a]+a --&gt; [1, b-a+1)+a --&gt; [0, b-a)+(a+1) --&gt; (rand()%(b-a))+a+1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line">(a, b] --&gt; [a+1, b+1) --&gt; [0, b-a)+(a+1) --&gt; (rand()%(b-a))+a+1</span><br></pre></td></tr></table></figure></li><li><p><code>[a, b]</code>随机数：<code>(rand() % (b + 1 - a)) + a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a, b] --&gt; [a, b+1) --&gt; [0, b+1-a)+a --&gt; (rand()%(b+1-a))+a</span><br></pre></td></tr></table></figure></li><li><p><code>(a, b)</code>随机数：<code>(rand() % (b - a - 1)) + a + 1</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a, b) --&gt; [a+1, b) --&gt; [0, b-a-1)+(a+1) --&gt; rand()%(b-a-1)+a+1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>浮点随机数（左右边界值是否可取没那么重要了）</p><ul><li><p><code>[0, 1)</code>浮点随机：<code>rand() / double(RAND_MAX)</code></p></li><li><p><code>[0, a)</code>浮点随机：<code>rand() / double(RAND_MAX) * a</code></p></li><li><p><code>(a, b)</code>浮点随机：<code>(rand() / double(RAND_MAX)) * (b - a) + a</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(a, b) --&gt; 0~1之间浮点数 * (a, b) --&gt; rand()/double(RAND_MAX)*(b-a)+a</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven</title>
      <link href="2021/07/19/Maven/"/>
      <url>2021/07/19/Maven/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Maven-理解"><a href="#Maven-理解" class="headerlink" title="Maven 理解"></a>Maven 理解</h1><p>当你正在开发两个项目（A和B），如果 A 项目要使用 B 项目的某一个功能（某个一类）。那么最直接的方法就是将 B项目打包成 jar 包，然后在导入 A项目中，这样 A项目就可以使用 B项目里面的功能了。</p><p>但是上面这样做非常的麻烦，如果 B项目修复了Bug，A又要重新导入 B项目的 jar包。</p><p>回到大局，如果我们需要很多外部 jar包（依赖），一个个手动导入也不是办法</p><blockquote><p>而 Maven就是为了解决项目依赖的问题</p></blockquote><p>Maven 有一个 <code>pom.xml</code> 文件，这个文件就是解决依赖的关键。通过编写该文件，Maven 会根据 <strong>pom.xml</strong>文件内容下载你需要的 jar包并放在本地的一个仓库。</p><p>那么 Maven项目和我们用 IDEA创建的普通 java项目有什么区别，本质没什么区别，个人理解为在普通 java项目上面添加了一个自动解决依赖关系的工具（Maven）</p><h1 id="Maven-安装配置"><a href="#Maven-安装配置" class="headerlink" title="Maven 安装配置"></a>Maven 安装配置</h1><ol><li><p>检查 JDK版本 1.7及以上</p></li><li><p><a href="https://maven.apache.org/download.cgi">Maven下载</a> </p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719095352.png" alt="image-20210719095300325"></p><p>这里有 4 种类型的文件</p><ol><li>首先明白 bin 和 src 的区别<ul><li>bin：代表二进制class文件（由java文件编译而成）</li><li>src：代表源码（java源码）</li></ul></li><li>zip 和 tar.gz<ul><li>zip：适用于 Windows</li><li>tar.gz：适用于 Linux、MacOs</li></ul></li></ol><p>因此 Windows 平台下下载 <code>bin.zip</code></p></li><li><p>配置 Maven 的环境变量</p><ul><li><p>添加一个变量名 <code>MAVEN_HOME</code> （看个人喜好，也可直接添加到 path 中）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719100440.png" alt="image-20210719100334510"></p></li><li><p>添加到 path</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719100620.png" alt="image-20210719100620673"></p></li></ul></li><li><p>检查是否配置成功</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719100755.png" alt="image-20210719100755505"></p></li></ol><h1 id="切换源和仓库位置"><a href="#切换源和仓库位置" class="headerlink" title="切换源和仓库位置"></a>切换源和仓库位置</h1><blockquote><p>配置好了 Maven环境之后，也简单介绍了 <code>pom.xml</code>文件的作用，项目会根据这个文件下载一些 jar包并且保存到本地一个目录下</p><p>但是默认源是国外，网速可能不好，所以可以切换为国内的 阿里源</p><p>同时也可以把 jar包的存储路径放到合适的位置</p></blockquote><p>找到 Maven项目路径 –&gt; conf –&gt;  <code>settings.xml</code></p><ol><li><p>切换为阿里源</p><p>这里看到知乎上一篇文章，按照他这个改 <a href="https://zhuanlan.zhihu.com/p/71998219">将maven源改为国内阿里云镜像</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>repo1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>central repo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>apache snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云阿帕奇仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719112145.png" alt="image-20210719112144976"></p></li><li><p>改变 jar包仓库位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719104309.gif" alt="21_07_19_10：42：42__"></p></li></ol><h1 id="创建-Maven项目"><a href="#创建-Maven项目" class="headerlink" title="创建 Maven项目"></a>创建 Maven项目</h1><blockquote><p>修改好 源 和 仓库位置，下面就创建项目</p></blockquote><ol><li><p>首先配置 IDEA 环境</p><p>全局配置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719105546.png" alt="image-20210719105546263"></p><p>找到你自己的 Maven目录和仓库位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719110350.gif" alt="21_07_19_11：03：04__"></p></li><li><p>创建 Maven项目（java项目）</p><ul><li><p>选择 <strong>quickstart</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719110715.png" alt="image-20210719110715733"></p></li><li><p>设置 <strong>GroupId Artifactld</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719111026.png" alt="image-20210719111026668"></p></li><li><p>这一步就是配置了的 Maven环境和项目的参数，在确定一遍是否有错误</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719111133.png" alt="image-20210719111133203"></p></li><li><p>最后你可以设置项目保存的位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719111254.png" alt="image-20210719111254200"></p></li><li><p>进来之后选择箭头指向</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719111404.png" alt="image-20210719111404280"></p><p>过了一段时间下载好之后你就会发现仓库里面的一些 jar 文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719113329.png" alt="image-20210719113329494"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719112709.png" alt="image-20210719112709362"></p></li></ul></li><li><p>编译项目（使用IDEA的界面操作等同于在终端输入命令）举例添加编译命令</p><ul><li><p>编辑命令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719113714.png" alt="image-20210719113714663"></p></li><li><p>添加一条命令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210719113942.gif" alt="21_07_19_11：39：00__"></p></li><li><p>还可以添加打包命令等等</p></li></ul></li></ol><h1 id="Maven项目结构"><a href="#Maven项目结构" class="headerlink" title="Maven项目结构"></a>Maven项目结构</h1><blockquote><p>Maven默认约定了一套目录结构，在通过Maven创建了项目以后，项目的目录结构就是以这套目录结构作为模板创建的</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">&#123;basedir&#125;</span></span><br><span class="line">|-- pom.xml</span><br><span class="line">|-- src</span><br><span class="line">||-- main</span><br><span class="line">||`-- java</span><br><span class="line">||`-- resources</span><br><span class="line">||`-- filters</span><br><span class="line">|`-- test</span><br><span class="line">||`-- java</span><br><span class="line">||`-- resources</span><br><span class="line">||`-- filters</span><br><span class="line">|`-- it</span><br><span class="line">|`-- assembly</span><br><span class="line">|`-- site</span><br><span class="line">`-- LICENSE.txt</span><br><span class="line">`-- NOTICE.txt</span><br><span class="line">`-- README.txt</span><br></pre></td></tr></table></figure><ul><li><code>src/main/java</code> 项目的源代码</li><li><code>src/main/resources</code> 项目的资源文件</li><li><code>src/main/filters</code> 项目的资源过滤文件</li><li><code>src/main/webapp</code> 如果是web项目，则该目录是web应用源代码所在的目录，比如html文件和web.xml等都在该目录下。</li><li><code>src/test/java</code> 测试代码</li><li><code>src/test/resources</code> 测试相关的资源文件</li><li><code>src/test/filters</code> 测试相关的资源过滤文件</li><li><code>src/it</code> 集成测试代码所在的目录，主要是供别的插件使用的。</li><li><code>src/assembly</code> 组件（Assembly）描述符所在的目录</li><li><code>src/site</code> 站点文件</li><li><code>LICENSE.txt</code> 项目的许可文件</li><li><code>NOTICE.txt</code> 该项目依赖的库的注意事项</li><li><code>README.txt</code> 项目的readme文件</li></ul><blockquote><p>参考：<a href="https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="2021/07/14/HTML/"/>
      <url>2021/07/14/HTML/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h1><h2 id="head-元素"><a href="#head-元素" class="headerlink" title="head 元素"></a>head 元素</h2><blockquote><p>网站信息设置，比如设置内容的字符编码、网站标题</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">meta# 字符编码</span><br><span class="line">title# 网站标题</span><br><span class="line">style</span><br><span class="line">link</span><br><span class="line">base</span><br><span class="line">script</span><br><span class="line">noscritpt</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210716100525.png" alt="image-20210716100518122"></p><h2 id="h、p、strong-元素"><a href="#h、p、strong-元素" class="headerlink" title="h、p、strong 元素"></a>h、p、strong 元素</h2><blockquote><p>h：标题等级</p><p>p：段落标签</p><p>strong：强调标签</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210718123026.png" alt="image-20210718123019204"></p><h2 id="pre"><a href="#pre" class="headerlink" title="pre"></a>pre</h2><blockquote><p>pre：会完整显示包住内容的格式</p></blockquote><blockquote><p>将保留元素内容里面的排版，注意缩进</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210718124333.png" alt="image-20210718124333626"></p><blockquote><p>p 标签里面可以嵌套 strong 标签，反之不行</p><p>pre 标签可以嵌套 code 标签，反之不行</p></blockquote><h2 id="字符实体"><a href="#字符实体" class="headerlink" title="字符实体"></a>字符实体</h2><blockquote><p>在 HTML 中，某些字符是预留的。</p><p>在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。</p><p>如果希望正确地显示预留字符，我们必须在 HTML 源代码中使用字符实体（character entities）。</p><p>字符实体类似这样：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&amp;entity_name;</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&amp;#entity_number;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210718124830.png" alt="image-20210718124829956"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210718125421.png" alt="image-20210718125421582"></p><h2 id="不间断空格"><a href="#不间断空格" class="headerlink" title="不间断空格"></a>不间断空格</h2><blockquote><p>上面我们知道了字符实体</p><p>HTML 中的常用字符实体是不间断空格(&nbsp;)。</p><p>浏览器总是会截短 HTML 页面中的空格。如果您在文本中写 10 个空格，在显示该页面之前，浏览器会删除它们中的 9 个。如需在页面中增加空格的数量，您需要使用 &nbsp; 字符实体</p></blockquote><h2 id="img-元素"><a href="#img-元素" class="headerlink" title="img 元素"></a>img 元素</h2><blockquote><p>img：图片标签</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210718164622.png" alt="image-20210718164621978"></p><blockquote><p>alt 是 img 的必要属性</p><p>有些时候图片要进行缩放</p><ol><li>可以直接设置 宽 和 高 。但是这样要安装图片原比例等比缩放，比较麻烦</li><li>设置 宽 或者 高，另外一个数据浏览器会自动根据图片的宽高比计算出另外一个数据</li></ol></blockquote><blockquote><p>Web 图片常用格式</p><ol><li>jpg：静态图片，不支持透明</li><li>png：静态图片，支持透明</li><li>gif：静态图片，动态图片、支持透明</li></ol><p>HTML中图片属性的高度和宽度单位默认是 <strong>px</strong> (1个像素）</p></blockquote><h2 id="a-元素"><a href="#a-元素" class="headerlink" title="a 元素"></a>a 元素</h2><blockquote><p>a：定义超链接，打开新的 URL</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> -HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oh my zsh</title>
      <link href="2021/07/13/oh-my-zsh/"/>
      <url>2021/07/13/oh-my-zsh/</url>
      
        <content type="html"><![CDATA[<hr><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713162131.png" alt="image-20210713162131071"></p><hr><h1 id="安装-zsh"><a href="#安装-zsh" class="headerlink" title="安装 zsh"></a>安装 zsh</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y zsh</span></span><br></pre></td></tr></table></figure><h1 id="zsh-的基础上安装-oh-my-zsh"><a href="#zsh-的基础上安装-oh-my-zsh" class="headerlink" title="zsh 的基础上安装 oh my zsh"></a>zsh 的基础上安装 oh my zsh</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)</span>&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span></span><br></pre></td></tr></table></figure><ol><li><p>上面那个安装不了打开下面网址复制里面内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>随便在哪个文件夹新建 <strong>install.sh</strong>，然后把脚本内容粘贴上去</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>赋予执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod -x install.sh</span></span><br></pre></td></tr></table></figure></li><li><p>执行脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ./install.sh</span></span><br></pre></td></tr></table></figure><blockquote><p>如图安装成功</p></blockquote></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713103435.png" alt="image-20210713103428519"></p><h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><ol><li><p>git 插件</p><p>当有修改并未提交文件会出现一个小 × 符号</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713112025.png" alt="image-20210713105459966"></p></li><li><p>sudo 插件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713112721.png" alt="image-20210713112721543"></p></li><li><p>wd 插件（相当于快捷方式，起名之后直接用 【wd + 名字】 跳转）</p><blockquote><p>能够在常用文件夹之中快速切换访问</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wd add name<span class="comment"># 给当前文件夹起名</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd name<span class="comment"># 切换到name映射的路径下</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd rm name<span class="comment"># 删除name的映射快捷方式</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd list<span class="comment"># 查看现有映射</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wd show <span class="comment"># 查看当前文件夹映射名称</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713114006.png" alt="image-20210713114006154"></p></li><li><p>zsh-syntax-highlighting 插件（命令高亮）</p><p>先在配置文件（.zshrc）添加插件名称，然后安装依赖</p><blockquote><p>先克隆会失败，要先把插件名称加到配置文件去，具体原因未知</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713120744.gif" alt="21_07_13_12：07：21__"></p></li><li><p>zsh-autosuggestions 插件（命令提示补全，按右键补全）</p><p>先添加到配置，在安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713121423.gif" alt="21_07_13_12：14：09__"></p></li></ol><h1 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h1><ol><li><p>agnoster</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713123222.png" alt="image-20210713123222324"></p></li><li><p>amuse</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713123036.png" alt="image-20210713123036793"></p></li><li><p>bira</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713130612.png" alt="image-20210713130612624"></p></li><li><p>ys</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713130427.png" alt="image-20210713130427363"></p></li><li><p>jonathan</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713130517.png" alt="image-20210713130517919"></p></li><li><p>xiong-chiamiov-plus</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713160523.png" alt="image-20210713160523062"></p></li><li><p>re5et</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713160941.png" alt="image-20210713160941522"></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;robbyrussell&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;amuse&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;random&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;bira&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;jonathan&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;ys&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ZSH_THEME=<span class="string">&quot;xiong-chiamiov-plus&quot;</span></span></span><br><span class="line">ZSH_THEME=&quot;re5et&quot;</span><br><span class="line"></span><br><span class="line">plugins=(</span><br><span class="line">git</span><br><span class="line">sudo</span><br><span class="line">wd</span><br><span class="line">zsh-syntax-highlighting</span><br><span class="line">zsh-autosuggestions</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 美化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="2021/06/04/vim/"/>
      <url>2021/06/04/vim/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ol><li><p>[ : ] + [ e ] == 保存文档</p></li><li><p>[ : ] + [ q ] == 退回</p></li><li><p>[ : ] + [ w ] + [ q ]== 退回</p></li><li><p>[ i ] == 光标前面写入</p></li><li><p>[ a ] == 光标后面写入，可在最后一个字符按a，这样就可以在行尾添加了</p></li><li><p>[ shift ] + [ a ] == 直接跳到行尾</p></li><li><p>[ shift ] + [ i ] == 直接跳到行前</p></li><li><p>[ o ] == 新建下一行并将光标跳到下一行</p></li><li><p>[ shift ] + [ o ] == 新建上一行并光标跳转</p></li><li><p>[ h ] [ j ] [ k ] [ l ] == 左，下，上，右</p></li><li><p>[ x ] == 删除当前字符</p></li><li><p>[ u ] == 撤销</p></li><li><p>[ d ] + [ num ] + [ 左 ] == 删除左边 num 个字符</p></li><li><p>[ d ] + [ num ] + [ 右 ] == 删除右边 num 个字符</p></li><li><p>[ d ] + [ d ] == 剪切这一行</p></li><li><p>[ y ] + [ num ] + [ 左 ] == 复制左边 num 个字符</p></li><li><p>[ y ] + [ num ] + [ 右 ] == 复制右边 num 个字符</p></li><li><p>[ p ] == 粘贴</p></li><li><p>[ c ] + [ w ] == 更改这个单词（即删除这个单词并进入写入模式）</p></li><li><p>[ b ] == 移到光标所在单词的第一个</p></li><li><p>[ c ] + [ i ] + [ 符号 ] == 将符号内的删除并进入写入模式</p><p>EX：”Hello World” 按下 <strong>ci”</strong> 就会删除 <strong>“”</strong> 里面的东西并开始写入</p></li><li><p>[ d ] + [ i ] + [ 符号 ] == 将符号内的删除不进入写入模式</p></li><li><p>[ 0 ] == 回到这行最开头</p></li><li><p>[ d ] + [ f ] + [ 符号 ] == 从光标处删除到包括符号的字符</p></li><li><p>[ y ] + [ f ] + [ 符号 ] == 从光标处复制到包括符号的字符</p></li><li><p>[ c ] + [ f ] + [ 符号 ] == 从光标处删除到包括符号的字符，并进入写入模式</p></li><li><p>[ / ] + [ 单词 ] == 即搜索单词并跳转到该单词</p></li></ol><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><ol><li><p>安装 vim 插件管理器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure></li><li><p>安装插件</p><ul><li><p>airline</p><p>在 GitHub 上搜索 <strong>airline</strong> 把地址中 <strong>github.com</strong> 后面的复制到如图位置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210604161858.png" alt="image-20210604161858680"></p></li></ul></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><blockquote><p>放到 /root/.vim/vimrc</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 例如</span></span><br><span class="line">syntax on &quot;代码高亮</span><br><span class="line"></span><br><span class="line">let mapleader=&quot; &quot;</span><br><span class="line">noremap J 5j</span><br><span class="line">noremap K 5k</span><br><span class="line">noremap &lt;LEADER&gt;&lt;CR&gt; :nohlsearch&lt;CR&gt; &quot;按下空格然后回车取消搜索高亮</span><br><span class="line"></span><br><span class="line">map S :w&lt;CR&gt;</span><br><span class="line">map R :source $MYVIMRC&lt;CR&gt;</span><br><span class="line"></span><br><span class="line">set hlsearch &quot;搜索高亮</span><br><span class="line">exec &quot;nohlsearch&quot;</span><br><span class="line">set incsearch &quot;边搜索边高亮</span><br><span class="line">set nonumber &quot;行号</span><br><span class="line">set relativenumber &quot;行号(以当前行为基)</span><br><span class="line">set nocursorline &quot;所在行下划线</span><br><span class="line">set wrap &quot;自动折行取消</span><br><span class="line">set showcmd &quot;查看指令</span><br><span class="line">set wildmenu &quot;指令选择菜单</span><br><span class="line">set ignorecase &quot;忽略大小写搜索</span><br><span class="line"></span><br><span class="line">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="line"></span><br><span class="line">Plug &#x27;vim-airline/vim-airline&#x27;</span><br><span class="line"></span><br><span class="line">call plug#end()</span><br></pre></td></tr></table></figure><h2 id="粘贴板"><a href="#粘贴板" class="headerlink" title="粘贴板"></a>粘贴板</h2><blockquote><p>将 vim 粘贴板与系统粘贴板互通</p></blockquote><ol><li><p>查看是否支持 <strong>clipboard</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim --version | grep clipboard</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210604144057.png" alt="image-20210604144050315"></p><p>-clipboard 表示不支持、+clipboard 表示支持</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HEXO部署到云服务器</title>
      <link href="2021/05/09/HEXO%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/05/09/HEXO%E9%83%A8%E7%BD%B2%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="服务器购买"><a href="#服务器购买" class="headerlink" title="服务器购买"></a>服务器购买</h1><ol><li><p>购买，这里以腾讯云服务器为例子</p></li><li><p>登录</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210509161023.png" alt="image-20210509161010482"></p></li><li><p>不记得密码重置密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210509161818.png" alt="image-20210509161814372"></p></li><li><p>重置密码之后用终端登录，用 <strong>xshell</strong> 为例</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515113041.png" alt="image-20210515113027271"></p></li></ol><h1 id="git及创建仓库"><a href="#git及创建仓库" class="headerlink" title="git及创建仓库"></a>git及创建仓库</h1><h2 id="git及用户"><a href="#git及用户" class="headerlink" title="git及用户"></a>git及用户</h2><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><blockquote><p>查看 git 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">git version</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>创建一个 <strong>git</strong> 账户用来管理以后的博客</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 git 账户</span></span><br><span class="line">adduser git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 为 git 账户设置密码</span></span><br><span class="line">passwd git</span><br></pre></td></tr></table></figure></li><li><p>为 <strong>git 用户</strong> 添加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers</span><br><span class="line">git     ALL=(ALL)       ALL</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515121005.png" alt="image-20210515121002294"></p></li><li><p>最后你为 <strong>git用户</strong> 添加秘钥（我理解为和本地进行身份校准，秘钥不一致就表示不匹配，就无法上传）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/git/.ssh</span><br><span class="line">vim /home/git/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后把本地的公钥粘贴进去：在本地的 <strong><em>C:\Users\用户名\ .ssh\</em></strong> 下，如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515164747.png" alt="image-20210515164747083"></p><p>如果没有的话就创建秘钥，方法如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><blockquote><p>上面对 <strong>git</strong> 用户操作就结束了，下面是创建一个 <strong>git仓库</strong>（存放博客）</p></blockquote></li></ol><h2 id="仓库创建"><a href="#仓库创建" class="headerlink" title="仓库创建"></a>仓库创建</h2><ol><li><p>切换到 <strong>git用户</strong>（重要）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br></pre></td></tr></table></figure><blockquote><p>这里忘记切换的话，后面从本地部署到服务器的时候会报 “权限不够” 错误</p><p>而且后面更改很麻烦，要更好很多，一定要先切换到 git用户 再创建仓库</p></blockquote></li><li><p><strong>创建仓库</strong></p><p>选择一个路径存放：我这里选的是 <strong>/home/git/repo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/git/repo</span><br><span class="line">git init --bare name.git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里我的是仓库名是 huiHuiLovesToEatLittleClouds.git</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git init --bare huiHuiLovesToEatLittleClouds.git</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515122433.png" alt="image-20210515122431749"></p></li><li><p><strong>创建博客存放目录</strong></p><p>上面创建了一个仓库用来存放博客，其实并不是真正存放了博客的渲染文件，故我们还需在创建一个文件夹保存真正的博客渲染文件</p><p>选择一个路径存放真正能渲染的博客文件：我这里是 <strong>/www/wwwroot/Blog_hexo</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /www/wwwroot/Blog_hexo</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515123546.png" alt="image-20210515123544600"></p></li><li><p><strong>权限修改</strong>（可能不用修改）</p><p>现在看下我刚刚创建的 <strong>Blog_hexo</strong> 这个目录的 <strong>所有者和用户组</strong> 是 <strong>root</strong> ，这样的情况就要修改，如果是 <strong>git</strong> 则不修改，直接跳到 <strong>5</strong></p><p>然后看下我另外一个博客目录 （hexo）的 <strong>所有者和用户组</strong> 是 git</p><p>这里我们要将 <strong>Blog_hexo</strong> 的 <strong>所有者和用户组</strong> 修改为 git</p><ul><li>原因：因为我们到时候在本地部署然后上传到服务器的时候是使用 git用户 上传的，不修改的话权限不够，如果想够权限的话直接用 root用户 上传也可以</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515162715.png" alt="image-20210515162712301"></p><p>然后我们修改权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown git:git -R /www/wwwroot/Blog_hexo</span><br></pre></td></tr></table></figure></li><li><p><strong>仓库和博客目录联系</strong></p><blockquote><p>这里我不太理解其中的逻辑</p></blockquote><p>先梳理一下</p><ul><li>仓库是：**/home/git/repo/huiHuiLovesToEatLittleClouds.git**</li><li>博客目录是：**/www/wwwroot/Blog_hexo**</li></ul><p>然后我们使两者关联起来：先来到仓库，里面有一个 <strong>hooks</strong> 文件夹，进去创建一个名为 <strong>post-receive</strong> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /home/git/repo/huiHuiLovesToEatLittleClouds.git/hooks/</span><br><span class="line">vim post-receive</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把下面这个话填进去保存退出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> git --work-tree=你的博客目录 --git-dir=你的仓库目录 checkout -f</span></span><br><span class="line">git --work-tree=/www/wwwroot/Blog_hexo --git-dir=/home/git/repo/huiHuiLovesToEatLittleClouds.git checkout -f</span><br></pre></td></tr></table></figure><blockquote><p>来到这里的话 git 已经配置好了，接下来是 Nginx 的配置</p></blockquote></li></ol><h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><ol><li><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><blockquote><p>查看版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">nginx -v</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>找到 nginx 的安装路径</p><p>这样是在：**/etc/nginx/** 目录下，找到 nginx.conf 配置文件并修改</p><ul><li>server_name：你的域名或服务器IP</li><li>root：博客的目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515172017.png" alt="image-20210515172014266"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515172327.png" alt="image-20210515172325142"></p></li></ol><blockquote><p>这里 Nginx 的配置也完成了，下面修改本地的配置文件即可</p></blockquote><h1 id="端口设置"><a href="#端口设置" class="headerlink" title="端口设置"></a>端口设置</h1><blockquote><p>当我们访问一个域名的时候默认是访问它指向的服务器的 80 端口，可以用一个域名对应多个端口</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210713174334.png" alt="image-20210713174334259"></p><blockquote><p>如果需要访问 81 端口：<strong>huige.link:81</strong></p><p>当然也可以对应2个以上端口</p></blockquote><h1 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h1><ol><li><p>修改配置文件</p><p>本地的配置文件（博客的站点配置文件）修改上传仓库为刚刚配置的仓库，具体如图举例</p></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515172841.png" alt="image-20210515172841604"></p><blockquote><p>git 表示使用 git 用户上传</p></blockquote><ol start="2"><li><p>本地部署上传到服务器 —— 成功状态</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515173811.png" alt="image-20210515173811795"></p></li></ol><h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ol><li><p>当我要上传到服务器的时候报错如下</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515180915.png" alt="image-20210515174640007"></p><blockquote><p>原因及解决如下</p></blockquote><ul><li><p>原因：由于我当时创建仓库的时候忘记切换到 git用户 创建了所以所有者是 root ，推送的时候没有权限</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515181155.png" alt="image-20210515181155578"></p></li><li><p>解决</p><ul><li><p>法一：在创建仓库的时候就使用 git用户</p></li><li><p>法二：将这个仓库的所有者改为 git，并且仓库里面的子文件夹的所有者也是 git，一直到没有子文件夹为止</p><p>如下图这种还是会报错，必须仓库里面的每个文件夹及其子文件夹及其子子文件夹……的所有者均为 git 即可，然后在修改他们的读写执行的权限，看下面（RWX 权限设置）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515183556.png" alt="image-20210515183552866"></p></li></ul></li><li><p>RWX 权限设置</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210515184134.png" alt="image-20210515184132023"></p></li></ul></li><li><p>如果部署过程中遇到了 <strong>有关权限</strong> 的报错，看下仓库和博客目录是不是 <strong>root用户</strong>， 因为我们本地使用的是 <strong>git用户</strong> 进行部署，所以会不够权限。再不行查看文件夹以及文件的 RWX 权限</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="2021/05/01/MySQL/"/>
      <url>2021/05/01/MySQL/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>MySQL常用命令汇总</p></blockquote><ol><li></li><li><p>创建用户、删除用户、修改自己密码、修改其他用户密码</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;user_password&#x27;</span>;</span><br><span class="line">$ <span class="keyword">DROP</span> <span class="keyword">USER</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;loaclhost&#x27;</span>;</span><br><span class="line">$ <span class="keyword">SET</span> PASSWORD <span class="operator">=</span> PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span><br><span class="line">$ <span class="keyword">SET</span> PASSWORD <span class="keyword">FOR</span> <span class="string">&#x27;user_name&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="operator">=</span> PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li></li></ol><h1 id="MySql安装-Windows"><a href="#MySql安装-Windows" class="headerlink" title="MySql安装 - Windows"></a>MySql安装 - Windows</h1><blockquote><p>如果安装过程中，出错了或者想重新再装</p><p>sc delete mysql （删除已经安装好的MySQL服务，慎重）</p></blockquote><blockquote><p>下面用MySQL-5.7.34 例子，注意：exe 文件和 zip 安装不一样</p></blockquote><ol><li><p>下载 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://dev.mysql.com/downloads/mysql/5.7.html</span><br></pre></td></tr></table></figure></li><li><p>解压后添加环境变量</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501150506.png"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171446.png" alt="image-20210501150838538"></p></li><li><p>添加 <strong>my.ini</strong> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置自己为自己的 mysql 安装目录</span></span><br><span class="line">basedir=D:\Program Files\RELY\mysql-5.7.34-winx64\</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置为 mysql 的数据目录，这个目录是系统创建，不用认为创建</span></span><br><span class="line">datadir=D:\Program Files\RELY\mysql-5.7.34-winx64\data\</span><br><span class="line">port=3306</span><br><span class="line">character_set_server=utf8</span><br><span class="line"><span class="meta">#</span><span class="bash"> 跳过安全检查</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171447.png" alt="image-20210501152954827"></p></li><li><p>用管理员权限打开 cmd，进入到 mysql 的 bin 目录下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld -install</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171448.png" alt="image-20210501155114114"></p></li><li><p>初始化数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210501155524645.png" alt="image-20210501155524645"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210715122521.png" alt="image-20210715122514170"></p></li><li><p>启动 mysql 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171449.png" alt="image-20210501160015267"></p><blockquote><p>停止 mysql 服务：net stop mysql</p></blockquote></li><li><p>进入 mysql 管理终端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 表示当前 root 用户密码为空</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210501160934780.png" alt="image-20210501160934780"></p></li><li><p>修改 root 用户密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面语句就是表示 修改 root 用户密码为 123456</span></span><br><span class="line">update user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host=&#x27;localhost&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新权限</span></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出（只是退出 mysql 终端）</span></span><br><span class="line">quit</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171450.png" alt="image-20210501161256068"></p></li><li><p>修改 <strong>my.ini</strong> 文件，再次进入就会进行权限验证了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171451.png" alt="image-20210501161531863"></p></li><li><p>重新启动 mysql </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net stop mysql</span><br><span class="line">net start mysql</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171424.png" alt="image-20210501162043162"></p></li></ol><blockquote><p>最后，全部指令浏览<br>注：如果安装过程出错，清楚 mysql 服务（sc delete mysql），重新按照步骤安装</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501171418.png" alt="image-20210501162706495"></p><h1 id="Windows下安装多个MySQL服务"><a href="#Windows下安装多个MySQL服务" class="headerlink" title="Windows下安装多个MySQL服务"></a>Windows下安装多个MySQL服务</h1><blockquote><p>由于我本机装了MySQL 5 点多</p><p>由于某些要求，需要比这个更高的版本，因此上网查找看能不能装两个 MySQL 服务</p></blockquote><p>步骤有点简略，仅仅记录一下过程，前提是要学会怎么装 MySQL</p><p>端口不要和原来服务相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置3307端口</span></span><br><span class="line">port=3307</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置mysql的安装目录——文件路径</span></span><br><span class="line">basedir=D:\Program Files\RELY\mysql-8.0.21-winx64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="meta">#</span><span class="bash"> 允许连接失败的次数。</span></span><br><span class="line">max_connect_errors=10</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务端使用的字符集默认为utf8mb4</span></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="meta">#</span><span class="bash">mysql_native_password</span></span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">[mysql]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[client]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line">port=3307</span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure><p>初始化数据库，密码在其中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqld --initialize --console</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211212145524.png" alt="image-20211212145524803"></p><p>安装 MySQL 服务，给他起个名字叫<code>MySQL8</code>，就这一步与单独安装 MySQL 不同，其他基本都相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysqld install MySQL8 --defaults-file=<span class="string">&quot;D:\Program Files\RELY\mysql-8.0.21-winx64\my.ini&quot;</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211212145755.png" alt="image-20211212145755329"></p><p>启动 mysql 服务</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211212150008.png" alt="image-20211212150008606"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211212145945.png" alt="image-20211212145945323"></p><p>修改密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211212150259.png" alt="image-20211212150259411"></p><p>然后尝试登陆两个 MySQL 服务</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211212150937.png" alt="image-20211212150937187"></p><p>完美收官</p><h1 id="MySQL安装-CentOs"><a href="#MySQL安装-CentOs" class="headerlink" title="MySQL安装 - CentOs"></a>MySQL安装 - CentOs</h1><blockquote><p>查看系统版本：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uname -a</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> uname -m</span></span><br></pre></td></tr></table></figure><ol><li><p>在某一个位置保存下载 MySQL RPM包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span></span><br></pre></td></tr></table></figure><p>PS：CentOS7.6 自带的类 mysql 数据库是 <code>mariadb</code>，会跟 mysql 冲突，要先删除</p><ul><li><p>首先查询看有没有 <code>mariadb</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep mariadb</span></span><br></pre></td></tr></table></figure></li><li><p>有就删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -e --nodeps mariadb-libs</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210829220407.png" alt="image-20210829220400287"></p></li></ul></li><li><p>解压 mysql RPM 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">  tar -xvf mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210829221525.png" alt="image-20210829221525882"></p></li><li><p>然后安装 MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh mysql-community-common-5.7.26-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh  mysql-community-libs-5.7.26-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh mysql-community-client-5.7.26-1.el7.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rpm -ivh mysql-community-server-5.7.26-1.el7.x86_64.rpm</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210829222230.png" alt="image-20210829222230078"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210829222533.png" alt="image-20210829222533835"></p></li><li><p>启动 Mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> systemctl start mysqld.service</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>如果启动失败，如下图</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119212251.png" alt="image-20211119212251663"></p><p>出现此错误是由于多次安装mysql。运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -A | grep mysql</span></span><br></pre></td></tr></table></figure><p>使用以下命令终止进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pkill mysql</span></span><br></pre></td></tr></table></figure><p>然后运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ps -A | grep mysqld</span></span><br></pre></td></tr></table></figure><p>还可以通过运行以下命令终止此进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo pkill mysqld</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119212556.png" alt="image-20211119212556484"></p><hr></li><li><p>查看默认分配密码登录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> grep <span class="string">&quot;password&quot;</span> /var/<span class="built_in">log</span>/mysqld.log</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -u root -p[password]</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210829223407.png" alt="image-20210829223407837"></p><hr><blockquote><p>如果输入第一个命令之后是这样的</p><p>现在我不知道是什么原因，可能是因为我没卸载干净吧！！</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119211723.png" alt="image-20211119211723408"></p><blockquote><p>下面解决方法</p></blockquote><p><code>vim /etc/my.cnf</code> 修改里面代码</p><p>加上一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119211846.png" alt="image-20211119211846536"></p><hr></li><li><p>修改密码</p><p>首先可以设置密码提示（默认 <code>validate_password_policy=1</code>）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> global validate_password_policy=0;</span></span><br></pre></td></tr></table></figure><p>设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; <span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>=password(<span class="string">&#x27;自己的密码&#x27;</span>);</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>如果设置不了，如图</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119212104.png" alt="image-20211119212104684"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> use mysql;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> update user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&quot;root&quot;</span>;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119213542.png" alt="image-20211119213542250"></p><hr><p>设置好了之后刷新使密码生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql&gt; flush privileges;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="MySQL卸载-CentOs"><a href="#MySQL卸载-CentOs" class="headerlink" title="MySQL卸载 - CentOs"></a>MySQL卸载 - CentOs</h1><ol><li><p>查看 mysql 安装了哪些东西</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rpm -qa | grep -i mysql</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119202854.png" alt="image-20211119202854672"></p></li><li><p>卸载开始（要用 1 的结果卸载）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum remove mysql-community-libs-5.7.26-1.el7.x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove mysql-community-server-5.7.26-1.el7.x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove mysql-community-common-5.7.26-1.el7.x86_64</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yum remove mysql-community-client-5.7.26-1.el7.x86_64</span></span><br></pre></td></tr></table></figure><blockquote><p>然后用 <code>rpm -qa | grep -i mysql</code>查看是否卸载干净</p></blockquote></li><li><p>查找 mysql 相关目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> find / -name mysql</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211119203710.png" alt="image-20211119203710023"></p></li><li><p>删除相关文件（用 3 的结果删除）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /var/lib/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /var/lib/mysql/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /usr/share/mysql</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /etc/selinux/targeted/active/modules/100/mysql</span></span><br></pre></td></tr></table></figure></li><li><p>删除 <code>/etc/my.cnf</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /etc/my.cnf</span></span><br></pre></td></tr></table></figure></li><li><p>删除<code>/var/log/mysqld.log</code>（如果不删除这个文件，会导致新安装的mysql无法生存新密码，导致无法登陆）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> rm -rf /var/<span class="built_in">log</span>/mysqld.log</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>命令连接MySQL</p><ul><li><p>登录前，保证 MySQL 服务已经启动</p></li><li><p>连接到 MySQL 服务（MySQL数据库）的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -h 主机ip -P 端口 -u 用户名 -p密码</span><br></pre></td></tr></table></figure><ul><li>-p密码不要有空格</li><li>-p后面没有写密码，回车会要求输入密码</li><li>如果没有写 -h 主机，默认就是本机</li><li>如果没有写 -P 端口，默认就是3306</li><li>在实际工作中，端口 3306 是会修改成其他的</li></ul></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501182631.png" alt="image-20210501182625225"></p><h2 id="图形界面-Navicat"><a href="#图形界面-Navicat" class="headerlink" title="图形界面 - Navicat"></a>图形界面 - Navicat</h2><ol><li><p>连接数据库</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501184751.png" alt="image-20210501184751161"></p></li><li><p>创建数据库</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501194503.png" alt="image-20210501194459879"></p></li><li><p>创建表……</p></li></ol><h2 id="数据库三层结构"><a href="#数据库三层结构" class="headerlink" title="数据库三层结构"></a>数据库三层结构</h2><ol><li><p>所谓安装 MySQL 数据库，就是在主机安装一个数据库管理管理系统（DBMS），这个管理程序可以管理多个数据库。</p><p>DBMS（database manage system）</p></li><li><p>一个数据库中可以创建多个表，以保存数据（信息）</p></li><li><p>数据库管理系统（DBMS）、数据库和表的关系如图所示</p><blockquote><p>数据库 - 普通表的本质是文件 </p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210501211131.png" alt="image-20210501211128356"></p></li></ol><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><ol><li>DDL：数据定义语句 [create 表，库……]</li><li>DML：数据操作语句 [增加 insert、修改 update、删除 delete]</li><li>DQL：数据查询语句 [select]</li><li>DCL：数据控制语句 [管理数据库：比如用户权限 grant revoke]</li></ol><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE [IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] db_name</span><br><span class="line">[create_specification [, create_specification]...]</span><br><span class="line"></span><br><span class="line">create_specification:</span><br><span class="line">[<span class="keyword">DEFAULT</span>] <span class="type">CHARACTER</span> <span class="keyword">SET</span> charset_name</span><br><span class="line">[<span class="keyword">DEFAULT</span>] <span class="keyword">COLLATE</span> collation_name</span><br></pre></td></tr></table></figure><ol><li>CHARACTER SET ：指定数据库采用的字符集，如果不指定字符集，<strong>默认 utf8</strong></li><li>COLLATE ：指定数据库字符集的校对规则<ul><li>常用的 utf8_bin [区分大小写]</li><li>utf8_general_ci [不区分大小写] </li><li>注意默认是 <strong>utf8_general_ci</strong></li></ul></li></ol><blockquote><p>例子</p><p>分别创建 3 个数据库，看写法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建 db02 数据库，并且不设置字符集和校对规则</span><br><span class="line"># 字符集默认为 utf8</span><br><span class="line"># 校对规则默认为 utf8_general_ci</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db02;</span><br><span class="line"></span><br><span class="line"># 创建 db03 数据库</span><br><span class="line"># 字符集设置为 utf8</span><br><span class="line"># 校对规则为默认</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db03 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"># 创建 db04 数据库</span><br><span class="line"># 字符集设置为 utf8</span><br><span class="line"># 校对规则设置为 utf8_bin</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE db04 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502112446.png" alt="image-20210502112439453"></p><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><blockquote><p>如果创建表的时候没有指定</p><p>引擎、字符集、排序规则等参数默认是数据库的字符集和排序规则</p><p>比如下面的 db02数据库为 utf8 utf8_general_ci</p><p>​                  db04数据库为 utf8 utf8_bin</p><p>那么创建表的时候不设置参数的话就默认是数据库的参数</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502115148.png" alt="image-20210502115148569"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502115019.png" alt="image-20210502115015899"></p><h2 id="查看删除数据库"><a href="#查看删除数据库" class="headerlink" title="查看删除数据库"></a>查看删除数据库</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示数据库语句</span><br><span class="line"><span class="keyword">SHOW</span> DATABASES</span><br><span class="line"></span><br><span class="line"># 显示数据库创建语句</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> DATABASE db_name</span><br><span class="line"></span><br><span class="line"># 数据库删除语句 </span><br><span class="line"><span class="keyword">DROP</span> DATABASE [IF <span class="keyword">EXISTS</span>] db_name</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502121457.png" alt="image-20210502121455693"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502121657.png" alt="image-20210502121655669"></p><h2 id="备份恢复数据库"><a href="#备份恢复数据库" class="headerlink" title="备份恢复数据库"></a>备份恢复数据库</h2><ol><li><p>备份数据库（DOS下）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p <span class="operator">-</span>B 数据库<span class="number">1</span> 数据库<span class="number">2</span> 数据库n <span class="operator">&gt;</span> 文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><blockquote><p>比如我把数据库 db01 db02 db03 db04 备份到 F 盘下取名为 bak.sql</p><p>其实 bak.sql 文件就是对应的 sql 语句</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502135153.png" alt="image-20210502135150055"></p></li><li><p>恢复数据库（<strong>进入 MySQL命令行</strong>）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sourse 文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure><ul><li><p>法一：上面的命令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502140541.png" alt="image-20210502140539129"></p></li><li><p>法二：直接复制备份文件 bak.sql 里面的 sql 语句，然后执行</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210502140842.png" alt="image-20210502140842072"></p></li></ul></li></ol><h2 id="备份恢复数据库的表"><a href="#备份恢复数据库的表" class="headerlink" title="备份恢复数据库的表"></a>备份恢复数据库的表</h2><ol><li><p>备份数据库的表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump <span class="operator">-</span>u 用户名 <span class="operator">-</span>p 数据库 表<span class="number">1</span> 表<span class="number">2</span> 表n <span class="operator">&gt;</span> 文件名.<span class="keyword">sql</span></span><br></pre></td></tr></table></figure></li><li><p>恢复数据表</p><p>连接数据库之后，使用需要恢复到的数据库中，然后执行<code>source 路径+文件名.sql</code></p><p>使用哪个数据库就会恢复到哪个数据库中</p></li></ol><h1 id="表"><a href="#表" class="headerlink" title="表"></a>表</h1><h2 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line">(</span><br><span class="line">    field1 datatype,</span><br><span class="line">    field2 datatype,</span><br><span class="line">    field3 datatype</span><br><span class="line">) <span class="type">character</span> <span class="keyword">set</span> 字符集 <span class="keyword">collate</span> 校对规则 engine 存储引擎</span><br><span class="line"></span><br><span class="line"># field：指定列名 datatype：指定列类型（字段类型）</span><br><span class="line"># <span class="type">character</span> <span class="keyword">set</span>：如不指定则为坐在数据库的字符集</span><br><span class="line"># <span class="keyword">collate</span>：如不指定则为所在数据库的校对规则</span><br><span class="line"># engine：引擎</span><br></pre></td></tr></table></figure><blockquote><p>EX：创建 id（整形）、name（字符串）、password（字符串）、birthday（日期），并且字符集设置为 utf8、校对规则为 utf8_bin、引擎为 INNODB</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">id <span class="type">INT</span>,</span><br><span class="line">`name` <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">`password` <span class="type">VARCHAR</span>(<span class="number">32</span>),</span><br><span class="line">birthday <span class="type">DATE</span>)</span><br><span class="line"><span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin ENGINE INNODB;</span><br></pre></td></tr></table></figure><h2 id="表数据添加"><a href="#表数据添加" class="headerlink" title="表数据添加"></a>表数据添加</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单列添加</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN ) <span class="keyword">VALUES</span>(value1, value2,...valueN);</span><br><span class="line"><span class="comment">-- 多列添加</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name ( field1, field2,...fieldN ) <span class="keyword">VALUES</span>(value1, value2,...valueN),(value1, value2,...valueN),.....;</span><br></pre></td></tr></table></figure><h2 id="MySql常用数据类型（列类型）"><a href="#MySql常用数据类型（列类型）" class="headerlink" title="MySql常用数据类型（列类型）"></a>MySql常用数据类型（列类型）</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210503103402.png" alt="image-20210503103356194"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210503104204.png"></p><blockquote><p>注意：</p><p>char(size)：这个 size 表示字符的个数，范围为 [0~255]</p><p>varchar(size)：这个size 也表示字符的个数，范围为[0~65535]</p></blockquote><h1 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h1><h2 id="用户创建"><a href="#用户创建" class="headerlink" title="用户创建"></a>用户创建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> CREATE USER <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;用户密码&#x27;</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 赋全部权限</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登录地址&#x27;</span>;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> FLUSH PRIVILEGES;</span></span><br></pre></td></tr></table></figure><blockquote><p>下面演示</p></blockquote><ol><li><p>密码太简单了</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211218172337.png" alt="image-20211218172337057"></p></li><li><p>密码复杂</p><p><img src= "/img/loading2.gif" data-lazy-src="C:\Users\ming'hui'fan\AppData\Roaming\Typora\typora-user-images\image-20211218172538640.png" alt="image-20211218172538640"></p></li></ol><h2 id="给其他用户密码修改"><a href="#给其他用户密码修改" class="headerlink" title="给其他用户密码修改"></a>给其他用户密码修改</h2><blockquote><p>root 用户修改普通用户的密码</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> SET PASSWORD FOR <span class="string">&#x27;用户名&#x27;</span>@<span class="string">&#x27;登录地址&#x27;</span> = PASSWORD (<span class="string">&#x27;新密码&#x27;</span>);</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211218173843.png" alt="image-20211218173842867"></p><h2 id="自己密码修改"><a href="#自己密码修改" class="headerlink" title="自己密码修改"></a>自己密码修改</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> SET PASSWORD=PASSWORD(<span class="string">&#x27;新密码&#x27;</span>);</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211218174402.png" alt="image-20211218174402353"></p><h2 id="查看连接数"><a href="#查看连接数" class="headerlink" title="查看连接数"></a>查看连接数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> <span class="keyword">FULL</span> PROCESSLIST;</span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SHOW</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Threads%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20211218180640.png" alt="image-20211218180640653"></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 创建索引</span><br><span class="line">-- index_name 索引名</span><br><span class="line">-- ON table_name(col_name) 表示在表(table_name)的属性(col_name)上建立索引</span><br><span class="line">CREATE INDEX index_name ON table_name(col_name)</span><br><span class="line"></span><br><span class="line">-- 查看表是否创建了索引</span><br><span class="line">SHOW INDEX FROM table_name</span><br><span class="line"></span><br><span class="line">-- 删除索引</span><br><span class="line">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure><h2 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h2><ol><li><p>主键索引：PRIMARY KEY 列自动生成索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 建立主键索引</span><br><span class="line">ALTER TABLE table_name ADD PRIMARY KEY (col_name)</span><br><span class="line"></span><br><span class="line">-- 删除主键索引</span><br><span class="line">ALTER TABLE table_name DROP PRIMARY KEY</span><br></pre></td></tr></table></figure></li><li><p>唯一索引：UNIQUE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name ON table_name(col_name)</span><br></pre></td></tr></table></figure></li><li><p>普通索引：INDEX</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 建立普通索引</span><br><span class="line">CREATE INDEX index_name ON table_name(col_name)</span><br><span class="line">ALTER TABLE table_name ADD INDEX index_name (col_name)</span><br><span class="line"></span><br><span class="line">-- 删除普通索引</span><br><span class="line">DROP INDEX index_name ON table_name</span><br></pre></td></tr></table></figure></li><li><p>全文索引：FULLTEXT</p><p>比如网站搜索一篇文章的内容，模糊查询</p><p>MySQL 自带全文索引不好用</p><p>开发中考虑使用：全文搜索两个框架：Solr 和 ElasticSearch（ES）</p></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Battle of Tanks</title>
      <link href="2021/03/27/Battle-of-Tanks/"/>
      <url>2021/03/27/Battle-of-Tanks/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Java绘图坐标体系"><a href="#Java绘图坐标体系" class="headerlink" title="Java绘图坐标体系"></a>Java绘图坐标体系</h1><p>坐标原点位于左上角，以像素为单位</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210327164401200.png" alt="image-20210327164401200"></p><blockquote><p>像素：密度单位</p><p>比如屏幕分辨率是 1920x1080 表示每一行有 1920 个像素点，共有 1080 行</p><p>所以该屏幕一共有 1920x1080=2,073,600 个像素</p></blockquote><h1 id="线程-基础"><a href="#线程-基础" class="headerlink" title="线程-基础"></a>线程-基础</h1><ul><li>程序 Program：为了完成特定任务，用某种语言编写的一组指令的集合，也就是代码</li><li>进程：指运行中的程序、进程是一次执行过程，或是正在运行的一个程序、是动态过程，有产生 存在 消亡的过程</li><li>线程<ul><li>由进程创建，是进程的一个实体</li><li>一个进程可以拥有多个线程</li></ul></li></ul><h2 id="线程使用"><a href="#线程使用" class="headerlink" title="线程使用"></a>线程使用</h2><h3 id="继承-Thread-实现多继承"><a href="#继承-Thread-实现多继承" class="headerlink" title="继承 Thread 实现多继承"></a>继承 Thread 实现多继承</h3><blockquote><p>创建一个 Cat 类 每隔 1 秒输出 喵喵</p><p>然后分别查看主线程和 Cat 创建的进程</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 9:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 演示通过继承 Thread 类创建线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建cat对象，可以当成线程使用</span></span><br><span class="line">        Cat cat = <span class="keyword">new</span> Cat();</span><br><span class="line">        cat.start();    <span class="comment">// 启动线程 -&gt; 最终会执行 Cat run 方法</span></span><br><span class="line">        <span class="comment">// 说明：当 main 线程启动一个子线程 Thread-0 主线程不会阻塞，会继续执行</span></span><br><span class="line">        <span class="comment">// 主线程和子线程交替执行</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程 i = &quot;</span> + i);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当一个类继承了 Thread 类，该类就可以当做线程使用</span></span><br><span class="line"><span class="comment"> * 重写 run 方法，写上自己的业务代码</span></span><br><span class="line"><span class="comment"> * run 方法来自 Thread 类实现了Runnable 接口的 run 方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @Override</span></span><br><span class="line"><span class="comment">    public void run() &#123;</span></span><br><span class="line"><span class="comment">        if (target != null) &#123;</span></span><br><span class="line"><span class="comment">            target.run();</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> times = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;喵喵喵&quot;</span> + (++times) + <span class="string">&quot;，线程名称：&quot;</span> + Thread.currentThread().getName());</span><br><span class="line">            <span class="comment">// 让该进程休眠 1 秒</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (times == <span class="number">80</span>) &#123;</span><br><span class="line">                 <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析：</p><p>main 线程会创建一个 Cat 线程</p><p>main 函数的线程名为：main</p><p>Cat 线程名称为：Thread-0</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328110217209.png" alt="image-20210328110217209" style="zoom:80%;" /><p>因为 main 线程执行次数为 60，Thread-0 线程执行次数为80</p><p>所以 main 线程先消亡，Thread-0 线程后消亡</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328105253183.png" alt="image-20210328105253183" style="zoom:80%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328105355718.png" alt="image-20210328105355718"></p><blockquote><p>这里为何不直接调用 cat.run()，并没有创建新线程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328112149331.png" alt="image-20210328112149331"></p><p>如果调用了 cat.run() 那么下面的代码就要等这个方法执行完成后方可执行（看下图），串行执行了</p><p>而且 cat 的线程名称就是 mian 并没有开辟新线程</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328111141975.png" alt="image-20210328111141975"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328111704538.png" alt="image-20210328111704538"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328111941971.png" alt="image-20210328111941971"></p><blockquote><p>下面看 start(); 执行源码分析主要执行，无用的省略</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start0();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// start0() 是本地方法，由JVM调用，底层是 C/C++实现</span></span><br><span class="line"><span class="comment">// 真正实现多线程的是 start0() 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328112822197.png" alt="image-20210328112822197"></p><h3 id="通过实现-Runnable-接口实现多线程"><a href="#通过实现-Runnable-接口实现多线程" class="headerlink" title="通过实现 Runnable 接口实现多线程"></a>通过实现 Runnable 接口实现多线程</h3><blockquote><p>说明：由于Java 是单继承的，如果一个类继承了其他类就不能继承 Thread 类了，所以想要实现多线程就可以通过实现 Runnable 接口来实现多线程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328113720890.png" alt="image-20210328113720890"></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 11:40</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 通过实现 Runnable 接口实现多线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">       <span class="comment">// 创建一个 Thread 对象，把 dog对象(实现Runnable)，放入 Thread</span></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(dog);</span><br><span class="line">        thread.start();</span><br><span class="line">        </span><br><span class="line">        ThreadProxy threadProxy = <span class="keyword">new</span> ThreadProxy(dog);</span><br><span class="line">        threadProxy.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;汪汪叫：&quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">10</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程代理类，模拟了一个极简的 Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadProxy</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Runnable target = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (target != <span class="keyword">null</span>) &#123;</span><br><span class="line">            target.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadProxy</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        start0();   <span class="comment">// 真正实现多线程的方法</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start0</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码的 ThreadProxy 只是模拟Thread</p></blockquote><ol><li><p>构造器接受一个实现了 Runnable 类的对象实例 </p></li><li><p>用户创建线程需要调用 start() 方法</p></li><li><p>start() 方法再调用 start0() 方法</p></li><li><p>start0() 方法再调用 run() （这个run方法是传经来的对象）</p><p>比如上面代码就是 Dog 的实例 dog</p></li></ol><h3 id="实现两个线程并发"><a href="#实现两个线程并发" class="headerlink" title="实现两个线程并发"></a>实现两个线程并发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:28</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * main 函数启动两个子线程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        T2 t2 = <span class="keyword">new</span> T2();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T1:Hello,World &quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (count != <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;T2:Hello,World &quot;</span> + (++count) + Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (count != <span class="number">80</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">T1:Hello,World 1Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 1Thread-<span class="number">1</span></span><br><span class="line">T1:Hello,World 2Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 2Thread-<span class="number">1</span></span><br><span class="line">T1:Hello,World 3Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 3Thread-<span class="number">1</span></span><br><span class="line">................</span><br><span class="line">T1:Hello,World 79Thread-<span class="number">0</span></span><br><span class="line">T2:Hello,World 79Thread-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="继承-Thread-和-实现-Runnable-的区别"><a href="#继承-Thread-和-实现-Runnable-的区别" class="headerlink" title="继承 Thread 和 实现 Runnable 的区别"></a>继承 Thread 和 实现 Runnable 的区别</h3><ol><li><p>从java的设计看，这两者本身没有本质的区别，Thread本身就实现了 Runnable 接口</p><p>start() -&gt; start0()</p></li><li><p>实现 Runnable 接口方式更加适合多个线程共享一个资源的情况，并且避免了单继承的限制</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">T3 t3 = <span class="keyword">new</span> T3();</span><br><span class="line">Thread thread1 = <span class="keyword">new</span> Thread(t3);</span><br><span class="line">Thread thread2 = <span class="keyword">new</span> Thread(t3);</span><br><span class="line">thread1.start();</span><br><span class="line">thread2.start();</span><br></pre></td></tr></table></figure><h3 id="卖票"><a href="#卖票" class="headerlink" title="卖票"></a>卖票</h3><blockquote><p>下面是分别通过 继承和实现接口 两种方法，但都会出现超卖</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.ThreadUse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.ThreadUse</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 使用多线程模拟三个窗口同事售票 100 张</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过继承实现</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket01 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket02 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        SellTicket01 sellTicket03 = new SellTicket01();</span></span><br><span class="line"><span class="comment">//        sellTicket01.start();</span></span><br><span class="line"><span class="comment">//        sellTicket02.start();</span></span><br><span class="line"><span class="comment">//        sellTicket03.start();</span></span><br><span class="line">        <span class="comment">// 通过接口实现</span></span><br><span class="line">        SellTicket02 sellTicket = <span class="keyword">new</span> SellTicket02();</span><br><span class="line">        Thread thread01 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        Thread thread02 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        Thread thread03 = <span class="keyword">new</span> Thread(sellTicket);</span><br><span class="line">        thread01.start();</span><br><span class="line">        thread02.start();</span><br><span class="line">        thread03.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过继承方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 接口方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h2><blockquote><p>设置 loop 值实现——通知方式</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.ThreadExit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 14:04</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.ThreadExit</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadExit01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        t.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程休眠 10s&quot;</span>);</span><br><span class="line">        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        t.setLoop(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;T运行中......&quot;</span> + (++num));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(<span class="keyword">boolean</span> loop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">主线程休眠 10s</span><br><span class="line">T运行中.....<span class="number">.1</span></span><br><span class="line">T运行中.....<span class="number">.2</span></span><br><span class="line">T运行中.....<span class="number">.3</span></span><br><span class="line">T运行中.....<span class="number">.4</span></span><br><span class="line">T运行中.....<span class="number">.5</span></span><br><span class="line">T运行中.....<span class="number">.6</span></span><br><span class="line">T运行中.....<span class="number">.7</span></span><br><span class="line">T运行中.....<span class="number">.8</span></span><br><span class="line">T运行中.....<span class="number">.9</span></span><br><span class="line">T运行中.....<span class="number">.10</span></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="线程常用方法"><a href="#线程常用方法" class="headerlink" title="线程常用方法"></a>线程常用方法</h2><ol><li><p>setName    // 设置线程名称</p></li><li><p>getName   // 返回线程名称</p></li><li><p>start</p></li><li><p>run    // 调用线程对象 run 方法</p></li><li><p>setPriority    // 更改线程的优先级</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The minimum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_PRIORITY = <span class="number">1</span>;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The default priority that is assigned to a thread.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORM_PRIORITY = <span class="number">5</span>;</span><br><span class="line">   </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * The maximum priority that a thread can have.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_PRIORITY = <span class="number">10</span>;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>getPriority    // 获取线程的优先级</p></li><li><p>sleep    // 在指定的毫秒数内让当前正在执行的线程休眠</p></li><li><p>interrupt    // 中断程序</p></li><li><p>yield    // 线程礼让，让出cpu，让其他线程执行，但礼让时间不确定，故不一定礼让成功</p></li><li><p>join    // 线程插队，插队的线程一旦插队成功，则肯定先执行完插入的线程所有的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 15:25</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Method</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        t.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主线程吃包子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;主线程（小弟）吃了 &quot;</span> + i + <span class="string">&quot; 个包子&quot;</span>);</span><br><span class="line">            <span class="comment">// 主线程吃 5 个包子就让老大吃完 20 个然后在吃</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;主线程（小弟）让 包子给 老大吃&quot;</span>);</span><br><span class="line">                <span class="comment">// join 线程插队</span></span><br><span class="line">                t.join();</span><br><span class="line">                <span class="comment">// yield 礼让</span></span><br><span class="line"><span class="comment">//                Thread.yield();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;老大吃完了，接下来主线程（小弟）吃&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;子线程（老大）吃了 &quot;</span> + i + <span class="string">&quot; 个包子&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">子线程（老大）吃了 <span class="number">1</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">1</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">2</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">2</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">3</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">3</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">4</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">4</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">5</span> 个包子</span><br><span class="line">主线程（小弟）让 包子给 老大吃</span><br><span class="line">子线程（老大）吃了 <span class="number">5</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">6</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">7</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">8</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">9</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">10</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">11</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">12</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">13</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">14</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">15</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">16</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">17</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">18</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">19</span> 个包子</span><br><span class="line">子线程（老大）吃了 <span class="number">20</span> 个包子</span><br><span class="line">老大吃完了，接下来主线程（小弟）吃</span><br><span class="line">主线程（小弟）吃了 <span class="number">6</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">7</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">8</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">9</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">10</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">11</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">12</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">13</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">14</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">15</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">16</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">17</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">18</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">19</span> 个包子</span><br><span class="line">主线程（小弟）吃了 <span class="number">20</span> 个包子</span><br></pre></td></tr></table></figure></li></ol><h3 id="用户线程和守护线程"><a href="#用户线程和守护线程" class="headerlink" title="用户线程和守护线程"></a>用户线程和守护线程</h3><ol><li>用户线程：也叫工作线程，当线程的任务执行完或通知方式</li><li>守护线程：一般为工作线程服务，当所有的用户线程结束，守护线程自动结束</li><li>常见的守护线程：垃圾回收机制</li></ol><blockquote><p>下面测试如何将一个线程设置为守护线程</p><p>ThreadMethod02</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 16:03</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Method</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethod02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyDaemonThread());</span><br><span class="line">        <span class="comment">// 如果我们希望当 main 线程结束以后，子线程自动结束</span></span><br><span class="line">        <span class="comment">// 只需将子线程设置为守护线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;我是 main&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDaemonThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;我是MyDaemonThread&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328163835246.png" alt="image-20210328163835246"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210328163934258.png" alt="image-20210328163934258"></p><blockquote><p>通过下面代码查看状态</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.State;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 16:47</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.State</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">        t.start();</span><br><span class="line">        <span class="keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(t.getName() + <span class="string">&quot; 状态 &quot;</span> + t.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">           System.out.println(<span class="string">&quot;Hi &quot;</span> + i);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Out</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 NEW</span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Hi <span class="number">0</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 RUNNABLE</span><br><span class="line">Hi <span class="number">1</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">2</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">3</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">4</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">5</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">6</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">7</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">8</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TIMED_WAITING</span><br><span class="line">Hi <span class="number">9</span></span><br><span class="line">Thread-<span class="number">0</span> 状态 TERMINATED</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h2><blockquote><p>Synchronize</p><p>在多线程编程中，一些敏感数据不允许被多个线程同时访问，保证数据在任何时刻，最多有一个线程访问，以保证数据的完整性</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Synchronize;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 12:55</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Synchronize</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> * 使用多线程模拟三个窗口同事售票 100 张</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SellTicket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过继承实现</span></span><br><span class="line">        SellTicket01 sellTicket01 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        SellTicket01 sellTicket02 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        SellTicket01 sellTicket03 = <span class="keyword">new</span> SellTicket01();</span><br><span class="line">        sellTicket01.start();</span><br><span class="line">        sellTicket02.start();</span><br><span class="line">        sellTicket03.start();</span><br><span class="line">        <span class="comment">// 通过接口实现</span></span><br><span class="line"><span class="comment">//        SellTicket02 sellTicket = new SellTicket02();</span></span><br><span class="line"><span class="comment">//        Thread thread01 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        Thread thread02 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        Thread thread03 = new Thread(sellTicket);</span></span><br><span class="line"><span class="comment">//        thread01.start();</span></span><br><span class="line"><span class="comment">//        thread02.start();</span></span><br><span class="line"><span class="comment">//        thread03.start();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket01</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">static</span> Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;  <span class="comment">// 同步方法，在同一时刻，只能有一个线程来执行该方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (object) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SellTicket02</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticketNum = <span class="number">100</span>; <span class="comment">// 让多个线程去销售</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line">    Object object = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同步方法实现加锁</span></span><br><span class="line">    <span class="comment">// 这时锁在 this 对象</span></span><br><span class="line">    <span class="comment">// 也可以在代码块写 synchronized ，这是同步代码块</span></span><br><span class="line">    <span class="keyword">public</span> <span class="comment">/*synchronized*/</span> <span class="function"><span class="keyword">void</span> <span class="title">sell</span><span class="params">()</span> </span>&#123;  <span class="comment">// 同步方法，在同一时刻，只能有一个线程来执行该方法</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="comment">/*this*/</span> object) &#123;    <span class="comment">// 写this或object都可以</span></span><br><span class="line">            <span class="keyword">if</span> (ticketNum &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                loop = <span class="keyword">false</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;票以售完&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;窗口：&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot; 售出一张票&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; 剩余票数：&quot;</span> + (--ticketNum));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            sell();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="线程死锁"><a href="#线程死锁" class="headerlink" title="线程死锁"></a>线程死锁</h2><blockquote><p>多个线程都占用了对方的锁资源，但不肯相让，导致了死锁</p></blockquote><blockquote><p>举例</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thread.Synchronize;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sound.midi.Soundbank;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 20:06</span></span><br><span class="line"><span class="comment"> * @ Description: com.Thread.Synchronize</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        DeadLockDemo deadLockDemo = <span class="keyword">new</span> DeadLockDemo(<span class="keyword">true</span>);</span><br><span class="line">        DeadLockDemo deadLockDemo1 = <span class="keyword">new</span> DeadLockDemo(<span class="keyword">false</span>);</span><br><span class="line">        deadLockDemo.start();</span><br><span class="line">        deadLockDemo1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeadLockDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="keyword">static</span> Object o1 = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="keyword">static</span> Object o2 = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DeadLockDemo</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 1 &quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 2 &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (o2) &#123;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 3 &quot;</span>);</span><br><span class="line">                    <span class="keyword">synchronized</span> (o1) &#123;</span><br><span class="line">                        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 进入了 4 &quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="释放锁"><a href="#释放锁" class="headerlink" title="释放锁"></a>释放锁</h2><ol><li>当前线程的同步方法、同步代码执行结束</li><li>当前线程在同步代码块、同步方法中遇到了 <strong>break、return</strong></li><li>当前线程在同步代码块、同步方法中出现了未处理的 <strong>Error、Exception</strong>，导致异常结束</li><li>当前线程在同步代码快、同步方法中执行了线程对象的 <strong>wait()</strong> 方法，当前线程暂停，并释放锁</li></ol><blockquote><p>下面操作不会释放锁</p></blockquote><ol><li>线程执行同步代码块或者同步方法时，程序调用了 <strong>Thread.sleep()、Thread.yield()</strong> 方法暂停当前线程的执行，不会释放锁</li><li>线程执行同步代码块时，其他线程调用了该线程的 <strong>suspend()</strong> 方法将该线程挂起，该线程不会释放锁</li></ol><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><blockquote><p>（1）在main方法中启动两个线程</p><p>（2）第 1 个线程循环随机打印 100 以内的整数</p><p>（3）直到第 2 个线程从键盘读取了 “Q” 命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Homework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 21:11</span></span><br><span class="line"><span class="comment"> * @ Description: com.Homework</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T1 t1 = <span class="keyword">new</span> T1();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(t1);</span><br><span class="line">        thread.start();</span><br><span class="line">        T2 t2 = <span class="keyword">new</span> T2(t1);</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t2);</span><br><span class="line">        thread1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机输出 1-100 数字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T1</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loop = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLoop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoop</span><span class="params">(<span class="keyword">boolean</span> loop)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.loop = loop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 输出 1-100 数字</span></span><br><span class="line">        <span class="keyword">while</span> (loop) &#123;</span><br><span class="line">            System.out.println((<span class="keyword">int</span>) (Math.random() * <span class="number">100</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;T1 线程退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入 Q 上面的线程就会退出</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T1 a;</span><br><span class="line">    <span class="keyword">private</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">T2</span><span class="params">(T1 a)</span> </span>&#123;   <span class="comment">// 构造器传入 T1 对象</span></span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 接受到用户的输入</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入指令(Q)表示退出 : &quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> key = scanner.next().toUpperCase().charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (key == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="comment">// 以通知的方式结束 a</span></span><br><span class="line">                a.setLoop(<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;T2 线程退出&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>（1）有 2 个用户分别从同一个卡上取钱 总额为 10000</p><p>（2）每次都取 1000，当余额不足时，不能取款</p><p>（3）不能出现超取现象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Homework;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHui Fan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/28 - 21:47</span></span><br><span class="line"><span class="comment"> * @ Description: com.Homework</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Homework02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        T t = <span class="keyword">new</span> T();</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        thread1.setName(<span class="string">&quot;T1&quot;</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(t);</span><br><span class="line">        thread2.setName(<span class="string">&quot;T2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 取款线程</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> money = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (money &lt; <span class="number">1000</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;余额不足！！！&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                money -= <span class="number">1000</span>;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 取出 1000, 当前余额 : &quot;</span> + money);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="2021/03/22/STL/"/>
      <url>2021/03/22/STL/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol><li><p>构造函数</p><ul><li>vector<T>    // 采用模板实现类实现，默认构造函数</li><li>vector(v.begin(), v.end)    // 拷贝 v[begin(), end())区间的元素</li><li>vector(n, elem)    // 构造函数将 n 个 elem 拷贝给本身</li><li>vector(const vector &amp;vec)   // 拷贝构造函数</li></ul></li><li><p>常用赋值</p><ul><li>assign(beg, end);    // 将 [begin, end) 区间的数据拷贝赋值给本身</li><li>assign(n, elem);    // 将n个elem拷贝赋值给本身</li><li>vector&amp; operator=(const vector &amp;vec);    // 重载等号操作符</li><li>swap(vec);    // 将vec与本身的元素互换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">10</span>, <span class="number">5</span>)</span></span>;<span class="comment">// 10个5</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(v2.begin(), v2.end())</span></span>;<span class="comment">// 将v2拷贝到v3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v4;</span><br><span class="line">v4.assign(v3.begin(), v3.end());<span class="comment">// 将v3赋值给v4</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v5;</span><br><span class="line">v5 = v3;<span class="comment">// 用等号赋值一样的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//swap交换</span></span><br><span class="line">v5.swap(v4);<span class="comment">// 将v5和v4内容互换</span></span><br></pre></td></tr></table></figure></li><li><p>大小操作</p><ul><li>size();     // 返回元素个数</li><li>empty();</li><li>resize(int num);     // 重新定义容器长度，如果变长，则用默认值填充新位置，如果变短，则超出的部分元素舍弃</li><li>resize(int num, elem);</li><li>capacity();     // 容器的容量</li><li>reserve(int len);    // 预留len和元素长度，预留位置不初始化，元素不可访问</li></ul></li><li><p>数据存储操作</p><ul><li>at(int index);    // 越界抛异常 out_of_range</li><li>operator[];    // 越界运行直接报错</li><li>front();    // 返回第一个元素</li><li>back();    // 返回最后一个元素</li></ul></li><li><p>插入和删除</p><ul><li>insert(const_iterator pos, int count, elem);    // 迭代器指向位置 pos 插入 count 个 元素 elem</li><li>insert(const_iterator pos, elem);    // 同上，不过默认插入一个 elem</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.begin(); it != v.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; vec;</span><br><span class="line">    vec.push_back(<span class="number">1</span>);</span><br><span class="line">    vec.push_back(<span class="number">2</span>);</span><br><span class="line">    vec.push_back(<span class="number">3</span>);</span><br><span class="line">    vec.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    vec.insert(vec.begin(), <span class="number">100</span>);</span><br><span class="line">    printVector(vec);</span><br><span class="line"></span><br><span class="line">    vec.insert(vec.end(),<span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line">    printVector(vec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* out</span></span><br><span class="line"><span class="comment">100_1_2_3_4_</span></span><br><span class="line"><span class="comment">100_1_2_3_4_100_100_100_</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ul><li>push_back(elem);     // 尾部插入元素</li><li>pop_back();    // 删除最后一个元素</li><li>erase(const_iterator start, const_iterator end);     // 删除迭代器从 start 到 end 之间的元素</li><li>erase(const_iterator pos);     // 删除迭代器指向的元素</li><li>clear();     // 删除容器中所有元素</li></ul></li></ol><blockquote><p>去重 unique</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210323141556378.png" alt="image-20210323141556378"></p><h2 id="输出函数"><a href="#输出函数" class="headerlink" title="输出函数"></a>输出函数</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.begin(); it != v.end(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printVector_reverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp;v)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator it;</span><br><span class="line">    <span class="keyword">for</span> (it = v.rbegin(); it != v.rend(); it++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot;_&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="swap"><a href="#swap" class="headerlink" title="swap"></a>swap</h2><blockquote><p>例子</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210322203355924.png" alt="image-20210322203355924"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210322203427853.png" alt="image-20210322203427853"></p><blockquote><p>将未使用的空间进行释放</p><p>方法如下</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210322203629444.png" alt="image-20210322203629444"></p><p>作用：</p><ul><li><p>vector<int>(vec)：利用拷贝构造初始匿名对象</p></li><li><p>然后匿名创建的占用空间就是使用容量</p><p>然后匿名对象和 vec 互换</p><p>之后匿名对象会自己析构</p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210322210912416.png" alt="image-20210322210912416"></p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210322212715920.png" alt="image-20210322212715920"  /><h1 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue<V></h1><h2 id="优先队列，int-默认大的优先"><a href="#优先队列，int-默认大的优先" class="headerlink" title="优先队列，int 默认大的优先"></a>优先队列，int 默认大的优先</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// 4 3 2 1 0</span></span><br></pre></td></tr></table></figure><h2 id="priority-queue-小的优先写法"><a href="#priority-queue-小的优先写法" class="headerlink" title="priority_queue 小的优先写法"></a>priority_queue<int> 小的优先写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;&gt;&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        q.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top() &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">//  0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h2 id="结构体优先写法"><a href="#结构体优先写法" class="headerlink" title="结构体优先写法"></a>结构体优先写法</h2><blockquote><p>不同于 sort() 函数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node x, node y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;<span class="comment">// 这样反而是 大的 优先</span></span><br><span class="line">        <span class="comment">// 小的优先</span></span><br><span class="line">        <span class="comment">// return x.val &gt; y.val;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line">    <span class="built_in">priority_queue</span>&lt;node&gt;q;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        node tmp&#123;&#125;;</span><br><span class="line">        tmp.val = i;</span><br><span class="line">        q.push(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; q.top().val &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line"><span class="comment">// 4 3 2 1 0 </span></span><br></pre></td></tr></table></figure><h2 id="sort-结构体比较写法"><a href="#sort-结构体比较写法" class="headerlink" title="sort() 结构体比较写法"></a>sort() 结构体比较写法</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(v.begin(), v.begin() + k, Cmp);</span><br></pre></td></tr></table></figure><ol><li><p>写在结构体内</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">friend</span> <span class="keyword">operator</span>&lt;(node x, node y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.val &lt; y.val;<span class="comment">// 小到大排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>写在结构体外</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Cmp</span><span class="params">(node x, node y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.val &gt; y.val;  <span class="comment">// 大到小排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="全排列模板"><a href="#全排列模板" class="headerlink" title="全排列模板"></a>全排列模板</h1><blockquote><p>注意 while (next_permutation(左下标, 右下标))</p><p>排列的区间是 [左下标, 右下标)</p><p>此例子是 [1, 5) 不包括 m[5]</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> n;  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        m[i] = i;</span><br><span class="line">    &#125; <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (next_permutation(m+<span class="number">1</span>, m+<span class="number">5</span>)); <span class="comment">// 左闭右开 [m+1, m+5) 之间的数全排列</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;排列总数：&quot;</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">2</span> <span class="number">3</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">1</span> <span class="number">2</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> </span><br><span class="line">排列总数：<span class="number">24</span></span><br></pre></td></tr></table></figure><h1 id="lower-bound-、upper-bound"><a href="#lower-bound-、upper-bound" class="headerlink" title="lower_bound( )、upper_bound( )"></a>lower_bound( )、upper_bound( )</h1><ol><li>数组从小到大顺序时<ul><li>lower_bound(begin, end, num);    // 返回第一个 <strong>大于等于 num</strong> 的地址</li><li>upper_bound(begin, end, num);   // 返回第一个 <strong>大于 num</strong> 的地址</li></ul></li><li>数组从大到小顺序时，重载lower_bound()和upper_bound() 即可找到第一个小于等于 num 的地址<ul><li>lower_bound(begin, end, num, greater<tpye>);    // 返回第一个 <strong>小于等于 num</strong> 的地址</li><li>upper_bound(begin, end, num, greater<type>);     // 返回第一个 <strong>小于 num</strong> 的地</li></ul></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span>.tie(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m[<span class="number">5</span>];</span><br><span class="line">    m[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    m[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    m[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">    m[<span class="number">3</span>] = <span class="number">6</span>;</span><br><span class="line">    m[<span class="number">4</span>] = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">int</span> pos1 = lower_bound(m, m+<span class="number">5</span>, <span class="number">4</span>) - m;</span><br><span class="line">    <span class="keyword">int</span> pos2 = upper_bound(m, m + <span class="number">5</span>, <span class="number">4</span>) - m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos1:&quot;</span> &lt;&lt; pos1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos2:&quot;</span> &lt;&lt; pos2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    sort(m, m + <span class="number">5</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; m[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> pos3 = lower_bound(m, m+<span class="number">5</span>, <span class="number">4</span>, greater&lt;<span class="keyword">int</span>&gt;()) - m;</span><br><span class="line">    <span class="keyword">int</span> pos4 = upper_bound(m, m + <span class="number">5</span>, <span class="number">4</span>, greater&lt;<span class="keyword">int</span>&gt;()) - m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos3:&quot;</span> &lt;&lt; pos3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;pos4:&quot;</span> &lt;&lt; pos4 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// out</span></span><br><span class="line">pos1:<span class="number">2</span></span><br><span class="line">pos2:<span class="number">3</span></span><br><span class="line"><span class="number">8</span> <span class="number">6</span> <span class="number">4</span> <span class="number">2</span> <span class="number">0</span> </span><br><span class="line">pos3:<span class="number">2</span></span><br><span class="line">pos4:<span class="number">3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data struct two</title>
      <link href="2021/03/17/data%20struct%20two/"/>
      <url>2021/03/17/data%20struct%20two/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="前缀树"><a href="#前缀树" class="headerlink" title="前缀树"></a>前缀树</h1><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Trees.TrieTree;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/3 - 21:09</span></span><br><span class="line"><span class="comment"> * @ Description: Trees.PrefixTree</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">trieTree</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀树节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TrieNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pass;   <span class="comment">// 记录进过了几次</span></span><br><span class="line">        <span class="keyword">int</span> end;    <span class="comment">// 记录以当前节点为尾的字符串</span></span><br><span class="line">        TrieNode[] nexts;   <span class="comment">// 记录 &#x27;a&#x27;-&#x27;z&#x27; 的路径</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TrieNode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            nexts = <span class="keyword">new</span> TrieNode[<span class="number">26</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀树实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Trie</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TrieNode root;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Trie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            root = <span class="keyword">new</span> TrieNode();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> root.pass;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插入一段字符串</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            node.pass++;</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;  <span class="comment">// 记录字母</span></span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>; <span class="comment">// a 对应 0, b 对应 1.....</span></span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;    <span class="comment">// 如果未出现过该字母,则创建</span></span><br><span class="line">                    node.nexts[index] = <span class="keyword">new</span> TrieNode();</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">                node.pass++;</span><br><span class="line">            &#125;</span><br><span class="line">            node.end++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除一段字符</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (search(word) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            node.pass--;</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (--node.nexts[index].pass == <span class="number">0</span>) &#123;</span><br><span class="line">                    node.nexts[index] = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            node.end--;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查询字符在树中出现的次数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (word == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            <span class="keyword">char</span>[] chars = word.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="comment">// 如果未在树中存在该路径则直接返回 0</span></span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.end;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 所有加入的字符串中，计算有多少个是以 pre 为前缀的</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">prefixNumber</span><span class="params">(String pre)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pre == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            TrieNode node = root;</span><br><span class="line">            <span class="keyword">char</span>[] chars = pre.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">                index = chars[i] - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (node.nexts[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                node = node.nexts[index];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> node.pass;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Trie trie = <span class="keyword">new</span> Trie();</span><br><span class="line">        String string0 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String string1 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">        String string2 = <span class="string">&quot;acdefg&quot;</span>;</span><br><span class="line">        String string3 = <span class="string">&quot;minghuifan&quot;</span>;</span><br><span class="line"></span><br><span class="line">        trie.insert(string0);</span><br><span class="line">        trie.insert(string1);</span><br><span class="line">        trie.insert(string2);</span><br><span class="line">        trie.insert(string3);</span><br><span class="line"></span><br><span class="line">        trie.delete(string1);</span><br><span class="line"></span><br><span class="line">        System.out.println(trie.size());</span><br><span class="line">        System.out.println(trie.search(<span class="string">&quot;abc&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h1><blockquote><p>out f(in)</p></blockquote><ol><li><p>in -&gt; 无穷</p><p>out -&gt; S（一个范围）</p><ul><li><p>MD5：0 ~ 2^64-1</p><p>十六进制为16位的字符串，即每个位表示16中状态(0000<del>1111 or 0</del>F)</p></li><li><p>SHA1：0 ~ 2^128-1</p><p>十六进制为32位的字符串</p></li></ul></li><li><p>相同的in -&gt; 相同的out</p><p>说明哈希函数不随机</p></li><li><p>不同的输入 -&gt; 相同的输出（哈希碰撞）</p></li><li><p>输入得到的哈希值都均匀且离散的分布在 S 域上</p></li><li><p>取模</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210317193725509.png" alt="image-20210317193725509"></p></li></ol><h2 id="EX1"><a href="#EX1" class="headerlink" title="EX1"></a>EX1</h2><p>有40亿个无符号整数的文件，无符号整数范围是(0 ~ 2^32^-1)，给 1G 内存返回出现次数最多的整数</p><blockquote><p>2^32^ = 4,294,967,296 约为 43 亿</p></blockquote><hr><h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><blockquote><p>先引入位图</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chapter_9;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/18 - 18:52</span></span><br><span class="line"><span class="comment"> * @ Description: Chapter_9</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitArr</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入数组中一共有 N 个数，每个数占 4 字节</span></span><br><span class="line">    <span class="comment">// 共有 4N Byte = 4N*8 bit</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改变第 index 位的 0 1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">bitarr</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> numIndex = index / <span class="number">32</span>;  <span class="comment">// 定位到数组的哪一位</span></span><br><span class="line">        <span class="keyword">int</span> bitIndex = index % <span class="number">32</span>;  <span class="comment">// 定位在该数的第多少位</span></span><br><span class="line">        <span class="keyword">int</span> bit = (arr[numIndex] &gt;&gt; bitIndex) &amp; <span class="number">1</span>;  <span class="comment">// 拿到第 index 位的状态</span></span><br><span class="line">        arr[numIndex] = arr[numIndex] | (<span class="number">1</span> &lt;&lt; bitIndex);    <span class="comment">// 将 index 位的数修改为 1</span></span><br><span class="line"><span class="comment">//        arr[numIndex] = arr[numIndex] &amp; (~(1 &lt;&lt; bitIndex));   // 将 index 位的数修改为 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 总结：取得第 i 位的 0/1 状态 int bit = (arr[i / 32] &gt;&gt; (i % 32)) &amp; 1</span></span><br><span class="line">        <span class="keyword">return</span> bit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印二进制数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">192</span>; i++) &#123;</span><br><span class="line">            System.out.print(bitarr(arr, i));</span><br><span class="line">            <span class="keyword">if</span> (sum++ % <span class="number">32</span> == <span class="number">31</span>) &#123;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一位一位的改变, 下面写法省略了前面 28 个0</span></span><br><span class="line">    <span class="comment">// 1 0001   0~31</span></span><br><span class="line">    <span class="comment">// 2 0010   32~63</span></span><br><span class="line">    <span class="comment">// 3 0011   64~95</span></span><br><span class="line">    <span class="comment">// 4 0100   96~127</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        bitarr(arr, <span class="number">1</span>);</span><br><span class="line">        bitarr(arr, <span class="number">32</span>);</span><br><span class="line">        bitarr(arr, <span class="number">66</span>);</span><br><span class="line">        bitarr(arr, <span class="number">96</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.print(i + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test1();</span><br><span class="line">        test2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** out</span></span><br><span class="line"><span class="comment"> * 10000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 01000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 11000000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 00100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 10100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 01100000000000000000000000000000</span></span><br><span class="line"><span class="comment"> * 3_3_7_5_</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>题目：</p><p>不安全网页的黑名单包含 <strong>100亿</strong> 个黑名单网页，每个网页的 URL 最多占用 64B。现在想要实现一个网页过滤系统，利用该系统可以根据网页的 URL 判断该网页是否在黑名单上，请设计该系统。</p><p>要求：</p><ol><li>该系统允许有万分之一以下的判断失误率</li><li>使用的额外空间不要超过 <strong>30G</strong></li></ol></blockquote><p>这个问题可以使我们认识布隆过滤器器</p><blockquote><p>分析：</p><p>如果我们使用 HashSet 来保存每一个 URL，一个 URL 就是 64B，100亿个就是 6400亿B 约为 640G，显然超出要求的额外空间</p><p>通过把 URL 保存起来显然是不行的，无法达到题目要求的 30G 以下额外空间</p><p>那么就要用到布隆过滤器</p></blockquote><h2 id="通过例子了解实现"><a href="#通过例子了解实现" class="headerlink" title="通过例子了解实现"></a>通过例子了解实现</h2><ol><li><p>上诉我们已经了解了 位图，那么如果我们用位图中的每一个位置来保存一个 URL 需要的内存约为 640/8G 80G，还超过了 30G</p><p>但是我们不需要URL个位置，因此还可以将位图进一步缩小至 30G</p></li><li><p>如何用位图来保存 URL？</p><ul><li>每个 URL 通过 k 个哈希函数计算得到一个哈希值然后在模上m（m为位图数位数），当然也可能出现哈希值相同的情况</li><li>然后此时每个哈希值对应位图中的每一位，进行描黑（也就是变为1）</li><li>然后对每一个 URL 重复上两个操作</li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210318211247986.png" alt="image-20210318211247986"></p></li><li><p>然后每个 URL 都通过多个哈希值找到了对应的位置进行描黑处理了</p></li><li><p>然后查找方式如下，比如查找 URLx 是否在黑名单上</p><ul><li>URLx 通过那 k 个哈希函数然后模上m，得到了 k 个位置</li><li>然后看这 k 个位置在位图中是否<strong>全是黑</strong>的状态（即为1状态）</li></ul><blockquote><p>黑URL -&gt; 白   不存在</p><p>白URL -&gt; 黑   存在</p><p>为什么黑URL不可能报错成白URL：因为同一个 URL 通过相同的哈希函数得到的哈希值是一样的，那么肯定会描黑这些位置的，那么查找的时候这些位置必全为黑</p><p>白URL误报成黑URL：如果白URL计算出来的 K个 哈希值刚好是全黑，也就是说当 位图数m 较小、URL数量多且k较多时候可能位图中的每一个位置都描黑了。</p><p>那么我们就要降低白报成黑的概率，尽可能减少误报。</p></blockquote></li><li><p>那么如何确定 <strong>①k ②m ③url个数</strong> </p><p>先确定 <strong>m</strong> 然后根据<strong>样本量</strong>和预期失误率来确定 <strong>k</strong></p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210318222956023.png" alt="image-20210318222956023" style="zoom:80%;" /><blockquote><p>n 样本量</p><p>p 预期失误率</p><p>只需要这两个参数，与单样本大小无关（比如这道题中的一个URL 64B 这个条件无用）</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210405122603425.png" alt="image-20210405122603425"></p><blockquote><p>比如这道题中</p><p>n = 100亿</p><p>p = 0.01%</p><p>m = 19.19n = 20n = 2000亿bit = 25G</p><p>k = 14</p><p>最后计算出真实失误率 p(真) = 0.006%</p></blockquote></li></ol><hr><h1 id="一致性哈希原理"><a href="#一致性哈希原理" class="headerlink" title="一致性哈希原理"></a>一致性哈希原理</h1><hr><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><blockquote><p>通用写法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> UnionFind;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/19 - 12:17</span></span><br><span class="line"><span class="comment"> * @ Description: UnionFind</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindUniversal</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    将 V 类型数据包装成集合形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        V value;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Element</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 并查集</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnionFindSet</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        HashMap&lt;V, Element&lt;V&gt;&gt; elementHashMap;</span><br><span class="line">        HashMap&lt;Element&lt;V&gt;, Element&lt;V&gt;&gt; fatherMap;</span><br><span class="line">        HashMap&lt;Element&lt;V&gt;, Integer&gt; sizeMap;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历元素，将每个元素都包装成一个集合</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">UnionFindSet</span><span class="params">(List&lt;V&gt; list)</span> </span>&#123;</span><br><span class="line">            elementHashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            fatherMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            sizeMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (V value : list) &#123;</span><br><span class="line">                Element&lt;V&gt; element = <span class="keyword">new</span> Element&lt;&gt;(value);</span><br><span class="line">                elementHashMap.put(value, element);</span><br><span class="line">                fatherMap.put(element, element);</span><br><span class="line">                sizeMap.put(element, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 给一个元素寻找这个元素所在集合的代表元素</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Element&lt;V&gt; <span class="title">findHead</span><span class="params">(Element&lt;V&gt; element)</span> </span>&#123;</span><br><span class="line">            Stack&lt;Element&lt;V&gt;&gt; path = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// 用于存放元素</span></span><br><span class="line">            <span class="keyword">while</span> (element != fatherMap.get(element)) &#123; <span class="comment">// 如果该元素不属于</span></span><br><span class="line">                path.push(element); <span class="comment">// 如果不是代表元素入栈</span></span><br><span class="line">                element = fatherMap.get(element);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (!path.empty()) &#123;</span><br><span class="line">                fatherMap.put(path.pop(), element);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> element;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameSet</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 判断ab是否在集合中</span></span><br><span class="line">            <span class="keyword">if</span> (elementHashMap.containsKey(a) &amp;&amp; elementHashMap.containsKey(b)) &#123;</span><br><span class="line">                <span class="keyword">return</span> findHead(elementHashMap.get(a)) == findHead(elementHashMap.get(b));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(V a, V b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (elementHashMap.containsKey(a) &amp;&amp; elementHashMap.containsKey(b)) &#123;</span><br><span class="line">                Element&lt;V&gt; aF = findHead(elementHashMap.get(a));</span><br><span class="line">                Element&lt;V&gt; bF = findHead(elementHashMap.get(b));</span><br><span class="line">                <span class="comment">// 判断两个元素是否在同一集合</span></span><br><span class="line">                <span class="keyword">if</span> (aF != bF) &#123;</span><br><span class="line">                    Element&lt;V&gt; maxSet = sizeMap.get(aF) &gt; sizeMap.get(bF) ? aF : bF;</span><br><span class="line">                    Element&lt;V&gt; minSet = maxSet == aF ? bF : aF;</span><br><span class="line">                    fatherMap.put(minSet, maxSet);  <span class="comment">// 将小集合的父亲变为大集合，实现合并操作</span></span><br><span class="line">                    sizeMap.put(maxSet, sizeMap.get(maxSet) + sizeMap.get(minSet));</span><br><span class="line">                    sizeMap.remove(minSet);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line">        list.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        UnionFindSet&lt;Integer&gt; u1 = <span class="keyword">new</span> UnionFindSet&lt;&gt;(list);</span><br><span class="line">        u1.union(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        u1.union(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">3</span>,<span class="number">4</span>));</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">1</span>,<span class="number">2</span>));</span><br><span class="line">        System.out.println(u1.isSameSet(<span class="number">1</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Out</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">false</span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><blockquote><p>findHead 函数调用的次数越多 平均时间复杂度越接近 O(1)</p></blockquote><hr><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><blockquote><p>先看下暴力方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(String text, String pattern)</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tlen = text.length();</span><br><span class="line">    <span class="keyword">int</span> plen = pattern.length();</span><br><span class="line">    <span class="keyword">int</span> ti = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pi = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 但凡有一个下标越界都退出</span></span><br><span class="line">    <span class="keyword">while</span> (pi &lt; plen &amp;&amp; ti &lt; tlen) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.charAt(ti) == pattern.charAt(pi)) &#123;</span><br><span class="line">            ti++;</span><br><span class="line">            pi++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ti -= pi - <span class="number">1</span>;   <span class="comment">// 退回到下一个位置</span></span><br><span class="line">            pi = <span class="number">0</span>;         <span class="comment">// 匹配串回到 0 位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果是匹配串越界了一定是匹配成功</span></span><br><span class="line">    <span class="keyword">return</span> pi == plen ? ti - pi : -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>暴力解法就不多说了，文本串一个一个位置滑动</p><blockquote><p>KMP解法为什么快</p><p>其实是在暴力解法中文本串中一个一个位置滑动的基础上进行了加速，可以实现跳跃的滑动</p></blockquote><blockquote><p>先看一个概念</p><p>==<strong>某一位置前缀和后缀最大匹配长度</strong>==</p><p>​        即该位置前的前缀和后缀最大匹配长度，但长度并不包括该位置前面的全部</p><p>​        如 <strong>ababc</strong> </p><p>​        c 位置的前缀后缀最大匹配长度为 2 (前缀：ab、后缀：ab)</p><p>​        而不是 4（前缀：abab、后缀：abab）,不包括该位置前面全部字符串</p><p>​        如果包括的话那么每个字符位置的前缀后缀的最大匹配长度就是前面的长度</p></blockquote><p>例子</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210321224649111.png" alt="image-20210321224649111" style="zoom:80%;" /><ul><li>位置 0 前面没有信息 —— 0</li><li>位置 1 —— 0</li><li>位置 2 —— 0</li><li>位置 3 —— 0</li><li>位置 4 —— 1 （前缀：a、后缀：a）</li><li>位置 5 —— 2 （前缀：ab、后缀：ab）</li><li>位置 6 —— 3 （前缀：abc、后缀：abc）</li></ul><blockquote><p>然后引入 next 数组</p><p>其实就是上面说的 前缀和后缀的最大匹配长度</p></blockquote><p>例子：求法看上面</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210321230656826.png" alt="image-20210321230656826"></p><blockquote><p>然后看 KMP 是如何加速的</p></blockquote><ol><li><p>绿色的为最大前缀和后缀标识，表示 Y 位置前缀后缀的最大匹配长度为 4</p><p>当匹配到 XY 位置发现不匹配<br><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210321232427259.png" alt="image-20210321232427259"></p><ul><li><p>按照暴力匹配的话文本串跳到 i + 1 位置，模式串跳到 0 位置，然后开始新的一轮比较<br><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210321232355173.png" alt="image-20210321232355173"></p></li><li><p>如果是KMP的话，那么直接滑动到如图位置，然后从 X 位置和 j 位置开始比较即可（本质就是 从 i + 5 的位置和 0 位置开始比较）</p><p>但是由于后缀和前缀相等，所以 <strong>i + 5 —— X</strong> 的位置和 <strong>0 —— j</strong> 的位置必然匹配，所以直接从 <strong>X 和 j</strong> 位置开始比对<br>所以就加速了整个比对的过程</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210321233101322.png" alt="image-20210321233101322"></p></li><li><p>如果 X 和 j 又不匹配呢<br>如果 next[j] = 3</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210326165602600.png" alt="image-20210326165602600" style="zoom:80%;" /></li><li><p>如果 X 和 j-1 又不匹配呢</p><p>重复上述过程</p><p>最坏的结果就是滑动到 0 和 X 比较</p></li></ul><blockquote><p>这里有个问题需要证明：为什么文本串的 <strong>i~K</strong> 的任何位置都配不出模式串</p><p>假设 <strong>i~K</strong> 中有位置 <strong>M</strong> 可以匹配出模式串</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210326170416982.png" alt="image-20210326170416982"  /><p>则 M<del>(X-1) 必然与 0</del>(j+2) 完全匹配 则下图椭圆区域必然完成一致</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210326215627490.png" alt="image-20210326215627490" style="zoom:80%;" /><p>那么看 next[Y] 是不是就有问题了，next[Y] 本来是 4 但是你又找到了一个比 4 更长的前缀后缀匹配</p><p>矛盾，因为 原next[Y] 不可能计算出错。</p><p>所以 <strong>i~K</strong> 位置不可能与匹配串匹配成功。</p></blockquote></li></ol><h2 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> String;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/20 - 15:18</span></span><br><span class="line"><span class="comment"> * @ Description: String</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KMP</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    KMP</span></span><br><span class="line"><span class="comment">    O(N)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getIndexOf</span><span class="params">(String text, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (text.length() &lt; pattern.length() || text.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span>[] str1 = text.toCharArray();   <span class="comment">// 文本串</span></span><br><span class="line">        <span class="keyword">char</span>[] str2 = pattern.toCharArray();    <span class="comment">// 匹配串</span></span><br><span class="line">        <span class="keyword">int</span>[] next = getNextArray(str2);    <span class="comment">// next 数组</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i1 &lt; str1.length &amp;&amp; i2 &lt; str2.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str1[i1] == str2[i2]) &#123; <span class="comment">// 如果字符相等两者同时移动到下一个字符</span></span><br><span class="line">                i1++;</span><br><span class="line">                i2++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next[i2] == -<span class="number">1</span>) &#123;    <span class="comment">// str2 中比对的位置已经无法往前跳了</span></span><br><span class="line">                i1++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i2 = next[i2];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只要是 i2 越界了，那么一定匹配成功</span></span><br><span class="line">        <span class="comment">// 但是 i1 越界不一定匹配失败，因为 i1 i2 可能同时越界</span></span><br><span class="line">        <span class="keyword">return</span> i2 == str2.length ? i1 - i2 : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    next 数组</span></span><br><span class="line"><span class="comment">    O(M)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getNextArray(<span class="keyword">char</span>[] str2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str2.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] next = <span class="keyword">new</span> <span class="keyword">int</span>[str2.length];</span><br><span class="line">        next[<span class="number">0</span>] = -<span class="number">1</span>;</span><br><span class="line">        next[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> cn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; next.length) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str2[i - <span class="number">1</span>] == str2[cn]) &#123;</span><br><span class="line">                next[i++] = ++cn;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cn &gt; <span class="number">0</span>) &#123;   <span class="comment">// cn 位置和 i - 1 不匹配，继续向前找</span></span><br><span class="line">                cn = next[cn];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                next[i++] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>data struct one</title>
      <link href="2021/03/08/data%20struct%20one/"/>
      <url>2021/03/08/data%20struct%20one/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h1><blockquote><p>补充：<strong>荷兰国旗问题</strong></p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/lh8vMWGk1rK4a5w.png" alt="image-20210309142159296"></p><blockquote><p>分析</p></blockquote><blockquote><p>问题一：</p></blockquote><ol><li><p>用一个变量 left 标记 &lt;= num 的右边界</p></li><li><p>此时遍历数组 arr 会出现两种情况</p><ul><li><p><strong>arr[i] &lt;= num</strong>：</p><p>  arr[i] 和小于等于部分右边界下标的后一个数交换，然后 <strong>小于等于区域右扩，i++</strong></p></li><li><p><strong>arr[i] &gt; num</strong>：<strong>区域不变, i++</strong></p></li></ul></li><li><p>直到越界，如下图例子</p></li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/i2LAlygNdtOhFfo.png" alt="image-20210309153016991"></p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/pW8oNVivCxd7TDX.png" alt="image-20210309154030699" style="zoom:80%;" /><blockquote><p>问题二：和问题一类似</p></blockquote><ol><li>arr[i] &lt; num，arr[i] 和 &lt; 区域下一个交换，**&lt; 区域右阔，i++**</li><li>arr[i] = num，<strong>i++</strong></li><li>arr[i] &gt; num，arr[i] 和 &gt; 区域前一个交换，**&gt; 区域左扩，i++**</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/Pxviqz3pXRC9eTU.png" alt="image-20210309155223731"></p><hr><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><blockquote><p>时间复杂度：O(N*logN)</p><p>空间复杂度：O(N)</p></blockquote><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/8 - 15:05</span></span><br><span class="line"><span class="comment"> * @ Description: Sort</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 时间复杂度分析</span></span><br><span class="line"><span class="comment"> *  T(N) = a * T(N/b) + O(N^d)</span></span><br><span class="line"><span class="comment"> *  T(N) = 2 * T(N/2) + O(N)</span></span><br><span class="line"><span class="comment"> *  log(a,b) == d   -&gt;  O(N) = O(N*logN)</span></span><br><span class="line"><span class="comment"> * 空间复杂度：O(N)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意 R 是数组最后一个下标，不是下标加一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (L == R) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = L + ((R - L) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        process(arr, L, mid);   <span class="comment">// 左边排序</span></span><br><span class="line">        process(arr, mid + <span class="number">1</span>, R);   <span class="comment">// 右边排序</span></span><br><span class="line">        merge(arr, L, mid, R);  <span class="comment">// 整合</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注意这里 R 是数组最后一个下标，不是下标加一</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> L, <span class="keyword">int</span> M, <span class="keyword">int</span> R)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[R - L + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = L;</span><br><span class="line">        <span class="keyword">int</span> right = M + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= M &amp;&amp; right &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[left] &lt;= arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= M) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= R) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[L + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">new</span> Random().nextInt(<span class="number">51</span>) + <span class="number">50</span>]; <span class="comment">// 数组大小区间 [50, 100]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;arr.length; i++) &#123;</span><br><span class="line">            arr[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">100</span>) + <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(arr.length);</span><br><span class="line">        process(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.print(arr[i] + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210308172742987.png" alt="image-20210308172742987"></p><h3 id="小和问题-code"><a href="#小和问题-code" class="headerlink" title="小和问题-code"></a>小和问题-code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort.Merge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools.Asserts;</span><br><span class="line"><span class="keyword">import</span> tools.Times;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/8 - 18:16</span></span><br><span class="line"><span class="comment"> * @ Description: Sort.Merge</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小和问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmallSum</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 小和问题求解函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">smallSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 递归过程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> left = mergeSort(arr, l, mid);  <span class="comment">// 左边小和</span></span><br><span class="line">        <span class="keyword">int</span> right = mergeSort(arr, mid + <span class="number">1</span>, r); <span class="comment">// 右边小和</span></span><br><span class="line">        <span class="keyword">int</span> sum = merge(arr, l, mid, r);    <span class="comment">// 左右合并求小和</span></span><br><span class="line">        <span class="keyword">return</span> left + right + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左右两边排序并返回此次左右两边的小和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>];    <span class="comment">// 辅助数组</span></span><br><span class="line">        <span class="keyword">int</span> left = l;</span><br><span class="line">        <span class="keyword">int</span> right = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 如果左边不越界并且右边不越界</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m &amp;&amp; right &lt;= r) &#123;</span><br><span class="line">            res += arr[left] &lt; arr[right] ? arr[left] * (r - right + <span class="number">1</span>) : <span class="number">0</span>;</span><br><span class="line">            help[i++] = arr[left] &lt; arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 下面两个 while 循环只会进入其一</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= r) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[l + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力求解小和</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                    res += arr[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> testSum = <span class="number">100000</span>;   <span class="comment">// 测试的次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Times测试时间工具</span></span><br><span class="line">        Times.test(<span class="string">&quot;小和计算&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> test = <span class="number">0</span>; test &lt; testSum; test++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">100</span>;  <span class="comment">// 数组的大小</span></span><br><span class="line">                <span class="keyword">int</span>[] arr0 = <span class="keyword">new</span> <span class="keyword">int</span>[sum];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr0.length; i++) &#123;</span><br><span class="line">                    arr0[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">500</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span>[] arr1 = Arrays.copyOf(arr0, arr0.length);</span><br><span class="line">                Asserts.test(force(arr0) == smallSum(arr1));</span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr1));</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;递归求小和：&quot; + smallSum(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(&quot;暴力求小和：&quot; + force(arr1));</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逆序对数量-code"><a href="#逆序对数量-code" class="headerlink" title="逆序对数量-code"></a>逆序对数量-code</h3><blockquote><p>和上面求小和问题是差不多的，这是下面的微小区别</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://i.loli.net/2021/03/09/2sKCDQa5nhqUbSX.png" alt="image-20210309134627796" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Sort.Merge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tools.Asserts;</span><br><span class="line"><span class="keyword">import</span> tools.Times;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: MingHuiFan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/9 - 12:30</span></span><br><span class="line"><span class="comment"> * @ Description: Sort.Merge</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 逆序对数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Reverse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr == <span class="keyword">null</span> || arr.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = l + ((r - l) &gt;&gt; <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> L = mergeSort(arr, l, mid);</span><br><span class="line">        <span class="keyword">int</span> R = mergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="keyword">int</span> sum = merge(arr, l, mid, r);</span><br><span class="line">        <span class="keyword">return</span> L + R + sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> m, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] help = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> left = l;</span><br><span class="line">        <span class="keyword">int</span> right = m + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m &amp;&amp; right &lt;= r) &#123;</span><br><span class="line">            ans += arr[left] &gt; arr[right] ? r - right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 大-&gt;小排序 并且 相等要先移右边</span></span><br><span class="line">            help[i++] = arr[left] &gt; arr[right] ? arr[left++] : arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 把未排好的排好</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= m) &#123;</span><br><span class="line">            help[i++] = arr[left++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (right &lt;= r) &#123;</span><br><span class="line">            help[i++] = arr[right++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; help.length; i++) &#123;</span><br><span class="line">            arr[l + i] = help[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 暴力求解</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">force</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[j]) &#123;</span><br><span class="line">                    ans++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> testSum = <span class="number">10000000</span>;</span><br><span class="line">        Times.test(<span class="string">&quot;逆序数&quot;</span>, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> test = <span class="number">0</span>; test &lt; testSum; test++) &#123;</span><br><span class="line">                <span class="keyword">int</span> sum = <span class="number">5</span>;</span><br><span class="line">                <span class="keyword">int</span>[] arr0 = <span class="keyword">new</span> <span class="keyword">int</span>[sum];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sum; i++) &#123;</span><br><span class="line">                    arr0[i] = <span class="keyword">new</span> Random().nextInt(<span class="number">51</span>) + <span class="number">50</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span>[] arr1 = Arrays.copyOf(arr0, arr0.length);</span><br><span class="line">                Asserts.test(reverse(arr0) == force(arr1));</span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr0));</span></span><br><span class="line"><span class="comment">//                System.out.println(Arrays.toString(arr1));</span></span><br><span class="line"><span class="comment">//                System.out.print(force(arr0) + &quot;_&quot; + reverse(arr1) + &#x27;\n&#x27;);</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux_notes</title>
      <link href="2021/03/04/Linux-notes/"/>
      <url>2021/03/04/Linux-notes/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="有趣"><a href="#有趣" class="headerlink" title="有趣"></a>有趣</h1><ol><li><p>火车路过</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install sl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sl</span></span><br></pre></td></tr></table></figure></li><li><p>动物图案</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install cowsay</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cowsay</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cowsay -f tux <span class="string">&quot;这是Linux&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>2048游戏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://raw.githubusercontent.com/mevdschee/2048.c/master/2048.c</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> gcc编译即可</span></span><br></pre></td></tr></table></figure></li><li><p>贪吃蛇变式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh sshtron.zachlatta.com</span></span><br></pre></td></tr></table></figure></li><li><p>文字显示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install figlet<span class="variable">$sudo</span> apt-get install toilet</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> figlet 文字</span></span><br></pre></td></tr></table></figure></li><li><p>宠物猫</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install oneko</span> </span><br><span class="line"><span class="meta">$</span><span class="bash"> oneko</span></span><br></pre></td></tr></table></figure></li><li><p>在屏幕上出现一双眼睛，盯着你的鼠标指针</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install xeyes</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> xeyes</span></span><br></pre></td></tr></table></figure></li><li><p>不断输出文字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yes Helloween <span class="comment"># 这样就会不断输出&quot;Helloween&quot;</span></span></span><br></pre></td></tr></table></figure></li><li><p>factor 分解因数</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210612163119.png" alt="image-20210612163112536"></p></li><li><p>幽灵打字</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install pv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span> | pv -qL 10</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>韩顺平教育</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210304215343.png" alt="image-20210304215341910"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210304220107.png" alt="image-20210304220106965"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210304220132.png" alt="image-20210304220132272"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210304220440.png" alt="image-20210304220440770"></p><ul><li><p>Linux运维工程师：服务器规划、调试优化、市场键控、故障处理、数据备份恢复、日志分析……</p></li><li><p>Linux嵌入式工程师：linux下驱动开发、嵌入式系统程序开发（C/C++）</p></li><li><p>Linux应用领域：</p><ul><li>服务器：C/C++、pup、java、python、go</li><li>嵌入式：机顶盒、数字电视、网络电话、程控交换机、手机、PDA、智能家居、物联网……</li></ul></li></ul><h1 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h1><p>Linux主要发行版：Ubuntu、Redhat、CentOS、Debain(蝶变)、Fedora、SuSE、OpenSUSE(示意图)</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210304224741.png" alt="image-20210304224741723"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210304230914.png" alt="image-20210304230914566"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210304231439.png" alt="image-20210304231438980"></p><h2 id="VM及安装-CentOS"><a href="#VM及安装-CentOS" class="headerlink" title="VM及安装 CentOS"></a>VM及安装 CentOS</h2><blockquote><p>几个注意点</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305105738.png" alt="image-20210305105738436"></p><p>选择安装位置：分三个区：boot、swap、根分区</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305104544.png" alt="image-20210305104544675"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305104808.png" alt="image-20210305104808328"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305105330.png" alt="image-20210305105330925"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305105346.png" alt="image-20210305105346170"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305105304.png" alt="image-20210305105304329"></p><h3 id="网络的三种模式"><a href="#网络的三种模式" class="headerlink" title="网络的三种模式"></a>网络的三种模式</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305115323.png" alt="image-20210305115323751"></p><h3 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h3><ol><li><p>直接将装好的系统文件夹拷贝即可，然后VM中打开这个文件即可</p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305120039.png" alt="image-20210305120039055" style="zoom: 67%;" /></li><li><p>用VM的克隆：克隆时候需要把需要克隆的系统关闭</p><p> 其实就是拷贝，克隆的文件可以直接在其他电脑上使用</p></li></ol><h3 id="虚拟机快照"><a href="#虚拟机快照" class="headerlink" title="虚拟机快照"></a>虚拟机快照</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305121414.png" alt="image-20210305121414682"></p><h3 id="虚拟机迁移和删除"><a href="#虚拟机迁移和删除" class="headerlink" title="虚拟机迁移和删除"></a>虚拟机迁移和删除</h3><ol><li>迁移：直接剪切</li><li>删除：VM删除、直接删除文件</li></ol><h3 id="install-vmtools"><a href="#install-vmtools" class="headerlink" title="install vmtools"></a>install vmtools</h3><p>Root用户下安装</p><p>用于管理母机和本机的共享文件夹</p><p><strong>但是在实际开发中，文件的上传和下载是要使用远程方式完成的</strong></p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305122824.png" alt="image-20210305122824870" style="zoom: 67%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305122904.png" alt="image-20210305122904629"></p><ul><li><p>然后终端进去 opt 目录解压这个文件</p></li><li><p>解压</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305124016.png" alt="image-20210305124016565"></p></li><li><p>安装：一路回车</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305124336.png" alt="image-20210305124336736"></p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305124745.png" alt="image-20210305124745341"></p><h2 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305130642.png" alt="image-20210305130642545"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305131545.png" alt="image-20210305131544873"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305130751.png" alt="image-20210305130751013"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305131309.png" alt="image-20210305131308926"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305131740.png" alt="image-20210305131739967"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305134101.png" alt="image-20210305134050861"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305134118.png" alt="image-20210305134118352"></p><hr><h1 id="实操篇"><a href="#实操篇" class="headerlink" title="实操篇"></a>实操篇</h1><h2 id="远程登录Linux"><a href="#远程登录Linux" class="headerlink" title="远程登录Linux"></a>远程登录Linux</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305141710.png" alt="image-20210305141709946"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305141915.png" alt="image-20210305141915359"></p><h3 id="XShell"><a href="#XShell" class="headerlink" title="XShell"></a>XShell</h3><blockquote><p>下载安装后查看 Linux 的 ip</p><p>然后 XShell 链接</p></blockquote><ul><li><p>新建</p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305145719.png" alt="image-20210305145719046" style="zoom:67%;" /></li><li><p>这里填写 Linux 系统的用户名或者Root</p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305144045.png" alt="image-20210305144044969"></p><ul><li><p>填写对应用户的密码</p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305150019.png" alt="image-20210305150019458" style="zoom: 67%;" /></li></ul><h3 id="XFTP"><a href="#XFTP" class="headerlink" title="XFTP"></a>XFTP</h3><ul><li><p>新建</p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305151629.png" alt="image-20210305151629821" style="zoom: 80%;" /></li><li><p>同样用户名和密码</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305151704.png" alt="image-20210305151704267"></p></li></ul><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305160146.png" alt="image-20210305160145888"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305160524.png" alt="image-20210305160524700"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305162930.png" alt="image-20210305162930087"></p><h2 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shutdown -h now// 立刻关机</span><br><span class="line">shutdown -h 1// 一分钟后关机</span><br><span class="line">shutdown // 和上面一行默认是1分钟关机</span><br><span class="line">halt // 关机</span><br><span class="line">reboot// 重启</span><br><span class="line">sync// 将内存数据同步到磁盘中</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305164021.png" alt="image-20210305164021233"></p><h2 id="用户登录和注销"><a href="#用户登录和注销" class="headerlink" title="用户登录和注销"></a>用户登录和注销</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305164704.png" alt="image-20210305164704721"></p><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><blockquote><p>Linux 系统是一个多用户多任务的操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305224157.png" alt="image-20210305224156958"></p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd用户名// 添加用户</span><br></pre></td></tr></table></figure><p>这样会自动创建一个和用户名同名的家目录，存放在 </p><p><strong>/home/用户名</strong></p><blockquote><p>如果想指定家目录的位置则如下例子</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/test 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 表示用户名的家目录存在放在 /home/<span class="built_in">test</span>/ 下</span></span><br></pre></td></tr></table></figure><h3 id="设置用户密码"><a href="#设置用户密码" class="headerlink" title="设置用户密码"></a>设置用户密码</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p>注意：如果不写用户名是在当前登录账户更改密码，也就是当前的 root 账户</p><blockquote><p>pwd    // 显示当前绝对路径</p></blockquote><h3 id="删除用户：两种"><a href="#删除用户：两种" class="headerlink" title="删除用户：两种"></a>删除用户：两种</h3><ol><li><p>删除用户，但是保留该用户的家目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名</span><br></pre></td></tr></table></figure></li><li><p>删除用户以及家目录</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure></li></ol><h3 id="查询用户信息"><a href="#查询用户信息" class="headerlink" title="查询用户信息"></a>查询用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - 用户名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305214029.png" alt="image-20210305214028575"></p><h3 id="查看当前登录用户信息"><a href="#查看当前登录用户信息" class="headerlink" title="查看当前登录用户信息"></a>查看当前登录用户信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">who am i</span><br><span class="line">whoami</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305214816.png" alt="image-20210305214816288"></p><p>即使切换了用户，查看也是显示最先登录的用户信息</p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><blockquote><p>系统可以对有共性/权限的多个用户进行统一的管理</p></blockquote><ol><li><p>新增组：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure></li><li><p>删除组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure></li><li><p>增加用户的时候直接加上组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -g 用户组 用户名</span><br><span class="line">如新增一个用户 zwj 并制定到 wudang 组里面去</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure></li><li><p>修改用户的组</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 要放入的组 用户名</span><br><span class="line">如将 wudang组的 zwj 修改到 mojiao组里面去</span><br><span class="line">step1: groupadd mojiao</span><br><span class="line">step2: usermod -g mojiao zwj</span><br></pre></td></tr></table></figure></li></ol><h3 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305221428.png" alt="image-20210305221428757"></p><ol><li><p>passwd文件：</p><p> 用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305222840.png" alt="image-20210305222840801"></p><p> Shell解释：</p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305224803.png" alt="image-20210305224803109" style="zoom: 50%;" /></li><li><p>shadow文件：</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305223408.png" alt="image-20210305223408094"></p><p> 给 king 设置密码在打开看下：此时有了加密口令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305223540.png" alt="image-20210305223540346"></p></li><li><p>group文件</p><p> 创建用户的时候如果没有之指定组的情况下，会创建一个和用户名相同的组</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210305223857.png" alt="image-20210305223857100"></p></li></ol><blockquote><p>1.如果组里面由用户则不能删除该组</p></blockquote><h2 id="实用指令"><a href="#实用指令" class="headerlink" title="实用指令"></a>实用指令</h2><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306111601.png" alt="image-20210306111601488"></p><blockquote><p>EX：从运行级别 5 到 3（无图形界面）</p><p>远程登录也可以切换运行级别</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306111747.png" alt="image-20210306111747183"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306111807.png" alt="image-20210306111807496"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306112725.png" alt="image-20210306112725437"></p><p>即：</p><ul><li><p>查看运行级别：</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl get-default</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306113318.png" alt="image-20210306113318875"></p></li><li><p>改变运行级别</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl set-default 运行级别</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306113623.png" alt="image-20210306113623337"></p></li></ul><blockquote><p>重启之后</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306113749.png" alt="image-20210306113749455"></p><blockquote><p>接下来的每次重启都是进去 <strong>运行级别3</strong></p></blockquote><blockquote><p>注：如果切到无图形化界面（运行级别3）登入不进去root，别使用数字小键盘输入密码（没解锁）</p></blockquote><h3 id="找回-Root-密码"><a href="#找回-Root-密码" class="headerlink" title="找回 Root 密码"></a>找回 Root 密码</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306114720.png" alt="image-20210306114720030"></p><ol><li><p>在启动界面按 “e”</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306115133.png" alt="image-20210306115133787"></p></li><li><p>找到这一行，后面加上 </p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init=/bin/sh</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306115416.png" alt="image-20210306115415954"></p></li><li><p>然后 Ctrl + X 进入 <strong>单用户模式</strong></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306115716.png" alt="image-20210306115716957"></p></li><li><p>然后在光标闪烁的位置输入下面命令，然后回车</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306115946.png" alt="image-20210306115946548"></p></li><li><p>然后输入下面命令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd</span><br></pre></td></tr></table></figure><p> 然后回车输入密码，然后回车后在此输入密码即可</p><p> 显示 passwd…..的样式表示密码修改成功</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306120301.png" alt="image-20210306120301149"></p></li><li><p>然后，在光标闪烁的位置输入下面命令并回车</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /.autorelabel</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306120716.png" alt="image-20210306120716723"></p></li><li><p>接着在光标闪烁的位置输入下面命令并回车，等待系统自动修改密码，时间可能有点长，完成后，<strong>系统会自动重启</strong>，新的密码生效</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec /sbin/init</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306121042.png" alt="image-20210306121042837"></p></li></ol><blockquote><p>远程是无法修改 ROOT 密码的</p></blockquote><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><ol><li><p>man</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306122022.png" alt="image-20210306122022393"></p></li><li><p>help</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306122220.png" alt="image-20210306122220652"></p></li></ol><h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><ol><li><p><strong>pwd</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">pwd</span></span></span><br><span class="line">pwd// 绝对路径</span><br></pre></td></tr></table></figure></li><li><p><strong>ls</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ls</span></span><br><span class="line">ls// 显示文件</span><br><span class="line">ls -a// 显示文件包括隐藏文件</span><br><span class="line">ls -l// 列表显示</span><br><span class="line">ls -al// 列表显示包括隐藏文件</span><br></pre></td></tr></table></figure></li><li><p><strong>cd</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> 参数</span></span><br><span class="line">cd ~// 回到当前用户的家目录</span><br><span class="line">cd ..// 回到上一级目录</span><br><span class="line">cd /// 回到根目录</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306123636.png" alt="image-20210306123636827"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306123837.png" alt="image-20210306123837454"></p></li><li><p><strong>mkdir</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mkdir</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：mkdir [选项] 要创建的目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个目录</span></span><br><span class="line">mkdir /home/dog// 在home目录下创建dog目录此时要求home目录存在，不存在创建不成功</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建多级目录</span></span><br><span class="line">mkdir -p /homg/animal/tiger // 此时animal不存在也可以创建</span><br></pre></td></tr></table></figure></li><li><p><strong>rmdir</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rmdir</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：rmdir [选项] 要删除的目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一个空目录</span></span><br><span class="line">rmdir /home/dog</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除一个非空目录</span></span><br><span class="line">rm -rf /home/animal// -r递归删除 -f强制删除不提示</span><br></pre></td></tr></table></figure></li><li><p><strong>touch</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> touch</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：touch 文件名称</span></span><br></pre></td></tr></table></figure></li><li><p><strong>cp</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：cp [选项] <span class="built_in">source</span> dest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项：</span></span><br><span class="line">-r 递归复制整个文件夹</span><br><span class="line"> cp 待拷贝文件或目录 目标目录</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306144150.png" alt="image-20210306144150611"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307104508202.png" alt="image-20210307104508202"></p></li><li><p><strong>rm</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> rm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：rm [选项] 要删除的文件或目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -r : 递归删除整个文件夹</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-f : 强制删除不提示</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306144822.png" alt="image-20210306144822657"></p></li><li><p><strong>mv</strong> 指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mv</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> - 重命名：mv oldNameFile newNameFile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> - 移动文件：mv 需要移动的文件 新目录</span></span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306150040.png"></p></li><li><p><strong>cat</strong> 指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基本语法：cat [选项] 要查看的文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项：</span> </span><br><span class="line">-n : 显示行号</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306150602.png" alt="image-20210306150602105"></p></li><li><p><strong>more</strong>指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306150832.png" alt="image-20210306150832346"></p></li><li><p><strong>less</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306151312.png" alt="image-20210306151312166"></p></li><li><p><strong>echo</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306151712.png" alt="image-20210306151712696"></p></li><li><p><strong>head</strong> 指令：默认显示文章前 10 行内容</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306151803.png" alt="image-20210306151803333"></p></li><li><p><strong>tail</strong> 指令（可用于查看日志）：默认显示文章尾部 10 行内容</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306152608.png" alt="image-20210306152608431"></p></li><li><p>输出重定向 &gt; 、追加 &gt;&gt; </p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306154519.png" alt="image-20210306154519310" style="zoom:67%;" /></li><li><p><strong>ln</strong> 指令：类似 win 下的快捷方式</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306155745.png" alt="image-20210306155744984" style="zoom:67%;" /></li><li><p><strong>history</strong> 指令</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306160338.png" alt="image-20210306160338094" style="zoom:80%;" /></li></ol><h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><ol><li><p><strong>date</strong> 指令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210306161041315.png" alt="image-20210306161041315" style="zoom:80%;" /><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306161315.png" alt="image-20210306161315365"  /></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306161315.png" alt="image-20210306161315365"></p></li><li><p><strong>cal</strong> 指令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210306162743.png" alt="image-20210306162743111"></p></li></ol><h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><ol><li><p><strong>find</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307092050298.png" alt="image-20210307092050298"></p></li><li><p><strong>locate</strong> 指令</p><blockquote><p>先执行    updatedb</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307093152625.png" alt="image-20210307093152625"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307093006554.png" alt="image-20210307093006554"></p></li><li><p><strong>which</strong> 指令</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307093239429.png" alt="image-20210307093239429" style="zoom:80%;" /></li><li><p><strong>grep</strong> 指令</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307094109097.png" alt="image-20210307094109097"></p></li></ol><h3 id="压缩解压类"><a href="#压缩解压类" class="headerlink" title="压缩解压类"></a>压缩解压类</h3><ol><li><p><strong>gzip、gunzip</strong> 指令：用于解压缩文件</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307095058029.png" alt="image-20210307095058029"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307113211890.png" alt="image-20210307113211890"></p></li><li><p><strong>zip、unzip</strong> 指令：可压缩文件和目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 小结</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不指定路径写法,压缩的和解压的文件都保存在当前用户所在的目录</span></span><br><span class="line">zip -r 要压缩的目录</span><br><span class="line">unzip 要解压的xxx.zip</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定路径写法</span></span><br><span class="line">zip -r 指定目录/xxx.zip 要压缩的目录</span><br><span class="line">unzip -d 要解压到的目录 要解压的xxx.zip</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果要压缩 /home/TEST 目录下的东西，不包含home</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面这样写的话会把home也压缩进去，包含了home</span></span><br><span class="line">zip -r 存放的目录/xxx.zip /home/TEST</span><br><span class="line"><span class="meta">#</span><span class="bash"> 正确做法</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 先进去到/home目录下，下面这样压缩就不会把home也压进去</span></span><br><span class="line">zip -r 存放的目录/xxx.zip TEST</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307101003499.png" alt="image-20210307101003499"></p><blockquote><p>当一个文件夹里面有文件的时候，压缩的时候要使用 <strong>zip -r xxx.zip 要压缩的文件夹</strong></p><p>不使用 -<strong>r</strong> 就会只是压缩一个目录，里面的东西进不去</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307114913350.png" alt="image-20210307114913350"></p></li><li><p><strong>tar</strong> 指令</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210307101914850.png" alt="image-20210307101914850"></p></li></ol><h2 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h2><h3 id="组"><a href="#组" class="headerlink" title="组"></a>组</h3><ul><li>每一个用户必须属于一个组，不能独立于组外</li><li>每一个文件有三个概念<ul><li>所有者：一般是创建者</li><li>所在组：这个文件属于哪一个组，那么这个组里面的用户就对这个文件拥有一定的权限</li><li>其他组：不包含该文件的组称为其他组，其他组也对该文件有一定的权限</li></ul></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210315143039233.png" alt="image-20210315143039233"></p><h3 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件/目录 所有者"></a>文件/目录 所有者</h3><ol><li><p>查看文件的所有者</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210315144306094.png"></p></li><li><p>修改文件所有者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210315144819594.png" alt="image-20210315144819594"></p></li></ol><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210315145114126.png" alt="image-20210315145114126"></p><h3 id="文件-目录-所在组"><a href="#文件-目录-所在组" class="headerlink" title="文件/目录 所在组"></a>文件/目录 所在组</h3><blockquote><p>查看文件/目录所在的组：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><blockquote><p>修改文件所在组：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp 组名 文件名</span><br></pre></td></tr></table></figure><blockquote><p>EX：修改文件所在组，目录同理</p></blockquote><ol><li>先创建一个组 <strong>game</strong></li><li>然后使用 <strong>root</strong> 用户创建文件 <strong>SuperMary.txt</strong></li><li>查看这个文件属于哪个组 -&gt; root</li><li>chgrp game SuperMary.txt</li></ol><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210315152901935.png" alt="image-20210315152901935"></p><h3 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h3><p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其它组</p><h3 id="改变用户所在组"><a href="#改变用户所在组" class="headerlink" title="改变用户所在组"></a>改变用户所在组</h3><blockquote><p>查看用户所在组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210315153902204.png" alt="image-20210315153902204"></p><blockquote><p>查看组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/group</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看是否有mojiao这个组</span></span><br><span class="line">cat /etc/group | grep mojiao</span><br></pre></td></tr></table></figure><p>没有组则没有输出</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210315153730082.png" alt="image-20210315153730082"></p><blockquote><p>改变用户所在组</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">usermod -g 新组名 用户名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 改变该用户登录的初始目录。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 说明：用户需要有进入到新目录的权限</span></span><br><span class="line">usermod -d 目录名 用户名</span><br></pre></td></tr></table></figure><h3 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls -l</span><br><span class="line">ls -lah</span><br><span class="line">ll</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210503110943.png" alt="image-20210503110942280"></p><p>一共十位 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 分为四段</span></span><br><span class="line">l    rwx    rwx    rwx</span><br><span class="line">类型  所有者  所属组  其他组用户</span><br></pre></td></tr></table></figure><blockquote><p>各位数表示的意义</p></blockquote><ol><li><p>第 0 位：确定文件类型</p><ul><li><p>l 是链接</p></li><li><p>d 是目录</p></li><li><p>c 是 <strong>字符设备</strong> 文件，如键盘、鼠标</p></li><li><p>b 是块设备，如硬盘</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210503111118.png" alt="image-20210503111116383"></p></li></ul></li><li><p>第 1~3 位确定所有者（该文件的所有者）拥有该文件的权限。—User</p></li><li><p>第 4~6 位确定所属组（同用户组的）拥有该文件的权限。—Group</p></li><li><p>第 7~9 位确定其他用户拥有该文件的权限。—Other</p></li></ol><blockquote><p>各字母表示的意义</p></blockquote><ol><li>r w x 作用到文件<ul><li>[ r ] : 表示可读</li><li>[ w ] : 代表可写，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件的目录有写权限，才能删除该文件</li><li>[ x ] : 代表可执行，可以被执行</li></ul></li><li>r w x 作用到目录<ul><li>[ r ] : 表示可读</li><li>[ w ] : 代表可写，可以修改，对目录内 <strong>创建 + 删除 + 重命名目录</strong></li><li>[ x ] : 代表可执行，可以进入该目录</li></ul></li></ol><h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><ol><li><pre class=" language-shell"><code class="language-shell">chmod u=rwx,g=rwx,o=x 文件名或目录名chmod u+w 文件名/目录名chmod a-w 文件名/目录名<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   - u：所有者</span><br><span class="line">   - g：所有组</span><br><span class="line">   - o：其他人</span><br><span class="line">   - a：所有人（u，g，o 的总和）</span><br><span class="line"></span><br><span class="line">2. 通过数字变更权限</span><br><span class="line"></span><br><span class="line">   &#96;&#96;&#96;shell</span><br><span class="line">   chmod 751 文件名&#x2F;目录名</span><br><span class="line">   # 上面一句表示将 所有者权限设置为 rwx，所在组设置为 rx，其他组设置为 x</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">r=4 w=2x=1</span><br><span class="line"></span><br><span class="line">000 —— 其实就是二进制</span><br><span class="line">rwx=7</span><br><span class="line">rw =6</span><br><span class="line">r x=5</span><br><span class="line">r  =4</span><br><span class="line"> wx=3</span><br><span class="line"> w =2</span><br><span class="line">  x=1</span><br></pre></td></tr></table></figure></code></pre></li></ol><h3 id="修改文件-目录所有者"><a href="#修改文件-目录所有者" class="headerlink" title="修改文件/目录所有者"></a>修改文件/目录所有者</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chown newowner 文件/目录 #改变所有者</span><br><span class="line">chown newowner:newgroup 文件/目录 #改变所有者和所在组</span><br><span class="line"><span class="meta">#</span><span class="bash"> -R 如果是目录，则使其下所有子文件或目录递归生效</span></span><br><span class="line">chown -R newowner 文件/目录 #递归改变所有者</span><br><span class="line">chown -R newowner:newgroup 文件/目录 #递归改变所有者和所在组</span><br></pre></td></tr></table></figure><h3 id="修改文件-目录所在组"><a href="#修改文件-目录所在组" class="headerlink" title="修改文件/目录所在组"></a>修改文件/目录所在组</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp newgroup 文件/目录 #改变所在组 </span><br><span class="line">chgrp -R newgroup 文件/目录 #改变所在组 </span><br></pre></td></tr></table></figure><h2 id="定时任务调度"><a href="#定时任务调度" class="headerlink" title="定时任务调度"></a>定时任务调度</h2><h3 id="crontab-任务调度"><a href="#crontab-任务调度" class="headerlink" title="crontab 任务调度"></a>crontab 任务调度</h3><ol><li>crontab 进行 定时任务的设置介绍</li></ol><ul><li><p>概述</p><ul><li>任务调度：是指系统在某个时间执行的特定的命令或程序</li><li>任务调度分类：<ul><li>系统工作：有些重要的工作必须周而复始的执行，如病毒扫描</li><li>个别用户工作：个别用户希望执行某些特定程序，比如对MySQL数据库的备份</li></ul></li></ul></li><li><p>基本语法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">crontab [选项]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常用选项</span></span><br><span class="line">    -e #编辑crontab定时任务</span><br><span class="line">    -l #查询crontab任务</span><br><span class="line">    -r #删除当前用户所有的crontab任务</span><br><span class="line">service crond restart #重启任务调度</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521160852.png" alt="image-20210521160326375"></p></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521160908.png" alt="image-20210521160732815"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521160820.png" alt="image-20210521160819955"></p><ol start="2"><li><p>使用方法</p><ul><li><p>直接用 <strong>crontab -e</strong> 编辑crontab定时任务,写执行的语句</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521181302.png" alt="image-20210521181302604"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521181358.png" alt="image-20210521181358882"></p></li><li><p>先写 <strong>shell</strong> 脚本，然后在 <strong>crontab -e</strong> 编辑crontab定时任务</p><p>（假如我所在路径是 /home）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim my.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> date &gt;&gt; /home/mycal</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cal &gt;&gt; /home/mycal</span></span><br><span class="line">chmod u+x my.sh</span><br><span class="line">crontab -e</span><br><span class="line"><span class="meta">#</span><span class="bash"> */1 * * * * /home/my.sh</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="at-定时任务"><a href="#at-定时任务" class="headerlink" title="at 定时任务"></a>at 定时任务</h3><ol><li><p>概述</p><ul><li><p>at 命令是一次性定时计划任务，at 的守护进程 atd 会以后台模式运行，检查作业队列来运行</p></li><li><p>默认情况下，atd 进程每 60s 检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业</p></li><li><p>at 命令是一次性定时计划 任务，执行完一个任务后不再执行任务了</p></li><li><p>在使用 at 命令的时候，一定要保证 atd 进程的启动，可以使用相关指令查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep atd</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521185438.png" alt="image-20210521185438196"></p></li></ul></li><li><p>at 命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">at [选项] [时间]</span><br><span class="line">ctrl + D #结束 at 命令的输入，按两次</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521190624.png" alt="image-20210521190624473"></p></li><li><p>应用</p></li></ol><h2 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h2><ol><li><p>介绍</p><p>rpm 用于互联网下载包的打包及安装工具，它包含在某些 Linux 分发版中。它生成具有 .RPM 拓展名的文件。RPM 是 RedHat Package Manager（RedHat 软件包管理工具）的缩写，类似 Windows 下的 setup.exe。</p></li><li><p>查询指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa #查询所安装的所有 rpm 软件包</span><br><span class="line">rpm -qa | more</span><br><span class="line">rpm -qa | grep X #如 rpm -qa | grep nginx</span><br><span class="line"></span><br><span class="line">rpm -q 软件包名 # 查询软件包是否安装</span><br><span class="line"></span><br><span class="line">rpm -qi 软件包名 # 查询软件包信息</span><br><span class="line">rpm -ql 软件包名 # 查询软件包中的文件</span><br><span class="line"></span><br><span class="line">rpm -qf 文件全路径名 # 查询文件所属的软件包</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -qf /etc/passwd</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -qf /root/install.log</span></span><br></pre></td></tr></table></figure></li><li><p>卸载 rpm 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rpm -e RPM包的名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -e nginx 表示删除 nginx 软件包</span></span><br><span class="line">rpm -e --nodeps RPM包的名称</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210521201717.png" alt="image-20210521201717609"></p></li><li><p>安装 rpm 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh RPM包全路径名称</span><br><span class="line"><span class="meta">#</span><span class="bash"> i = install 安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> v = verbose 提示</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> h = <span class="built_in">hash</span>   进度条</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h2><ol><li><p>介绍</p><p>yum 是一个 shell 前端软件包管理器。基于 RPM 包管理，能够从指定的服务期自动下载 RPM 包并且安装，可以自动处理依赖关系，并且一次性安装所有依赖的软件包</p></li><li><p>基本指令</p><p>查询 yum 服务器是否有需要安装的软件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list | grep XX软件列表</span><br></pre></td></tr></table></figure><p>安装指定 yum 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install XXX</span><br></pre></td></tr></table></figure></li></ol><h2 id="Linux分区"><a href="#Linux分区" class="headerlink" title="Linux分区"></a>Linux分区</h2><h3 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210526215709.png" alt="image-20210526215709125"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210526215746.png" alt="image-20210526215746424"></p><blockquote><p>这里截取我虚拟机磁盘分区和服务器分区情况</p><p>虚拟机：分了三个区（根分区、boot分区、SWAP分区）</p><p>服务器：默认只有一个根分区</p><p>UUID：分区的唯一标识符（40bit）</p><p>MOUNTPOINT：挂载点</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210526220822.png" alt="image-20210526220822059"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210526220922.png" alt="image-20210526220921937"></p><h3 id="增加一块硬盘"><a href="#增加一块硬盘" class="headerlink" title="增加一块硬盘"></a>增加一块硬盘</h3><ol><li><p>虚拟机添加硬盘</p><p>​    </p></li><li><p>分区</p></li><li><p>格式化</p></li><li><p>挂载</p></li><li><p>设置可以自动挂载</p></li></ol><h3 id="磁盘情况"><a href="#磁盘情况" class="headerlink" title="磁盘情况"></a>磁盘情况</h3><ol><li><p>查询整个情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210529154629.png" alt="image-20210529154456683"></p></li><li><p>查询指定目录的磁盘占用情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">du -h /目录</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认为当前目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -s 指定目录占用大小汇总</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -h 带计量单位</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -a 含文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --max-depth=1 子目录深度</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 列出明细的同时，增加汇总值</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="工作实用指令"><a href="#工作实用指令" class="headerlink" title="工作实用指令"></a>工作实用指令</h3><ol><li><p>统计 /etc/ 目录下文件个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/ | grep &quot;^-&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接列出来</span></span><br><span class="line">ls -l /etc/ | grep &quot;^-&quot; </span><br></pre></td></tr></table></figure></li><li><p>统计 /etc/ 目录下目录的个数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc/ | grep &quot;^d&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">直接列出来</span></span><br><span class="line">ls -l /etc/ | grep &quot;^d&quot;</span><br></pre></td></tr></table></figure></li><li><p>统计 /etc/ 目录下文件个数，包括子文件夹里的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /etc/ | grep &quot;^-&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 直接列出来</span></span><br><span class="line">ls -lR /etc/ | grep &quot;^-&quot; </span><br></pre></td></tr></table></figure></li><li><p>统计 /etc/ 目录下目录的个数，包括子文件夹里的目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -lR /etc/ | grep &quot;^d&quot; | wc -l</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">直接列出来</span></span><br><span class="line">ls -lR /etc/ | grep &quot;^d&quot;</span><br></pre></td></tr></table></figure></li><li><p>以树状显示目录结构</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如没安装，先安装</span></span><br><span class="line">yum install tree</span><br><span class="line">tree /etc/</span><br></pre></td></tr></table></figure></li></ol><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><h1 id="定制篇"><a href="#定制篇" class="headerlink" title="定制篇"></a>定制篇</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大二下资料推荐-仅个人推荐</title>
      <link href="2021/02/28/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E8%AE%A1%E7%A7%91/"/>
      <url>2021/02/28/%E5%A4%A7%E4%BA%8C%E4%B8%8B%E8%AF%BE%E7%A8%8B%E6%8E%A8%E8%8D%90-%E8%AE%A1%E7%A7%91/</url>
      
        <content type="html"><![CDATA[<blockquote><p>仅仅个人推荐，具体看个人风格喜好</p><p>更新中……..</p></blockquote><hr><h1 id="概率论与数理统计"><a href="#概率论与数理统计" class="headerlink" title="概率论与数理统计"></a>概率论与数理统计</h1><h4 id="宋浩：链接点我"><a href="#宋浩：链接点我" class="headerlink" title="宋浩：链接点我"></a>宋浩：<a href="https://www.bilibili.com/video/BV1ot411y7mU?from=search&seid=2168626853685641685">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228213650.png" alt="image-20210228213649383"></p><h4 id="小元老师：链接点我"><a href="#小元老师：链接点我" class="headerlink" title="小元老师：链接点我"></a>小元老师：<a href="https://www.bilibili.com/video/BV1jx411j7D2?from=search&seid=8435947249358168956">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228213725.png" alt="image-20210228213724547"></p><h4 id="张宇：链接点我"><a href="#张宇：链接点我" class="headerlink" title="张宇：链接点我"></a>张宇：<a href="https://www.bilibili.com/video/BV1ht4y127Di?from=search&seid=2924702569977120632">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228213743.png" alt="image-20210228213742651"></p><h4 id="汤家凤："><a href="#汤家凤：" class="headerlink" title="汤家凤："></a>汤家凤：</h4><blockquote><p>B站找不到了，百度网盘(/手动滑稽)</p></blockquote><blockquote><p>基础：</p></blockquote><p>​    链接：<a href="https://pan.baidu.com/s/16N6dx9X3jiKVyieJ5j8G1g">https://pan.baidu.com/s/16N6dx9X3jiKVyieJ5j8G1g</a><br>​    提取码：1502 </p><blockquote><p>强化</p></blockquote><p>​    链接：<a href="https://pan.baidu.com/s/1iuARPXy7AzHdrVROBg2bjQ">https://pan.baidu.com/s/1iuARPXy7AzHdrVROBg2bjQ</a><br>​    提取码：1502 </p><h4 id="链接点我"><a href="#链接点我" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1D741147G5?from=search&seid=2924702569977120632">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228213610.png" alt="image-20210228213608583"></p><hr><h1 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h1><h4 id="链接点我-1"><a href="#链接点我-1" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV18741137LS?from=search&seid=11596163788937283321">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228214110.png" alt="image-20210228214107983"></p><h4 id="链接点我-2"><a href="#链接点我-2" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV18y4y1i73U?from=search&seid=8655198875770633733">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228214443.png" alt="image-20210228214442389"></p><h4 id="链接点我-3"><a href="#链接点我-3" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1Zt411s7M5?from=search&seid=10029919934495247865">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228214539.png" alt="image-20210228214538027"></p><h4 id="链接点我-4"><a href="#链接点我-4" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1d4411v7u7?from=search&seid=5595939272444640769">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228214631.png" alt="image-20210228214629527"></p><hr><h1 id="算法设计与分析"><a href="#算法设计与分析" class="headerlink" title="算法设计与分析"></a>算法设计与分析</h1><blockquote><p>这个课内容连接性没那么强，可以单独搜课看，如动态规划DP、分治、贪心等都可以单独搜到</p></blockquote><h4 id="链接点我-5"><a href="#链接点我-5" class="headerlink" title="链接点我"></a><a href="https://www.bilibili.com/video/BV1SK4y1h7Fr?from=search&seid=8036636488986225083">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228214748.png" alt="image-20210228214747175"></p><h4 id="这个课算法有点全，可以挑书上的内容看：链接点我"><a href="#这个课算法有点全，可以挑书上的内容看：链接点我" class="headerlink" title="这个课算法有点全，可以挑书上的内容看：链接点我"></a>这个课算法有点全，可以挑书上的内容看：<a href="https://www.bilibili.com/video/BV1b54y1s74e?from=search&seid=15547804202715834535">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228214837.png" alt="image-20210228214835847"></p><h4 id="左神（左程云）的课比较进阶：链接点我"><a href="#左神（左程云）的课比较进阶：链接点我" class="headerlink" title="左神（左程云）的课比较进阶：链接点我"></a>左神（左程云）的课比较进阶：<a href="https://www.bilibili.com/video/BV16K4y157vm?from=search&seid=16946141245414692079">链接点我</a></h4><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210228214929.png" alt="image-20210228214927659"></p><hr><h1 id="计算机组成原理"><a href="#计算机组成原理" class="headerlink" title="计算机组成原理"></a>计算机组成原理</h1><blockquote><p>暂时还没</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 个人 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WXY</title>
      <link href="2021/02/26/WXY/"/>
      <url>2021/02/26/WXY/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="045b7bf3ad442eb2de8a14d62c5c66d2a088fcd82e0069845aeb92846c74860d"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> wxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些设置</title>
      <link href="2021/02/25/%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/"/>
      <url>2021/02/25/%E4%B8%80%E4%BA%9B%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="状态栏显秒"><a href="#状态栏显秒" class="headerlink" title="状态栏显秒"></a>状态栏显秒</h1><ol><li><p>打开注册表 regedit</p></li><li><p>找到路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">计算机\HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Advanced</span><br></pre></td></tr></table></figure></li><li><p>新建 <strong>DWORD(32位)值(D)</strong> 并命名为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ShowSecondsInSystemClock</span><br></pre></td></tr></table></figure><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210312124805158.png" alt="image-20210312124805158" style="zoom:80%;" /></li><li><p>然后修改值为 1 </p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210312125115087.png" alt="image-20210312125115087"></p></li><li><p>然后重新打开 <strong>Windows资源管理器</strong> 生效</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210312125254917.png" alt="image-20210312125254917"></p></li></ol><h1 id="共享文件夹一些问题"><a href="#共享文件夹一些问题" class="headerlink" title="共享文件夹一些问题"></a>共享文件夹一些问题</h1><ol><li><p>在控制面板打开了网络共享功能</p></li><li><p>然后去 <strong>计算机管理</strong> 设置 <strong>guest</strong> 账户密码</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210313122903788.png" alt="image-20210313122903788"></p><blockquote><p>然后在 win7 的 Administrator 账户下进去出现如下情况</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210313123030495.png" alt="image-20210313123030495"></p><blockquote><p>刚开始以为是 Administrator 账户的原因，换了一个账户也是同样的情况</p></blockquote></li><li><p>解决方法</p><ul><li>Guest 的账户已禁用不打勾</li></ul><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210313130748374.png" alt="image-20210313130748374" style="zoom:80%;" /></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Topic-LinkedList</title>
      <link href="2021/02/22/Topic%20LinkedList/"/>
      <url>2021/02/22/Topic%20LinkedList/</url>
      
        <content type="html"><![CDATA[<hr><blockquote><p>面试时链表解题方法论</p><ol><li>对于笔试：不用太在乎空间复杂度，一切为了时间复杂度</li><li>对于面试：时间复杂度依然放在第一位，但是一定要找到空间最省的方法</li></ol><p>重要技巧</p><ul><li>额外数据结构记录（哈希表、队列、栈等）</li><li>快慢指针</li></ul></blockquote><hr><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode : 相交链表的一系列问题    </button><div class="hide-content"><p>==</p><h1 id="Topic-相交链表的一系列问题"><a href="#Topic-相交链表的一系列问题" class="headerlink" title="Topic-相交链表的一系列问题"></a>Topic-相交链表的一系列问题</h1><blockquote><p>题目：给定一个可能有环也可能无环的单链表，头结点 head1 和 head2。实现一个函数，如果两个链表相交，请返回相交的第一个节点。如果不想交，返回 null</p><p>要求：如果两个链表长度之和为 N，时间复杂度达到 O(N)，额外空间复杂度达到O(1)</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li><p>相交的第一个节点是指都指向同一个节点（地址相同的节点）</p></li><li><p>由于单链表不确定是否有环，所以首先要做出判断</p></li><li><p>一共有3中可能</p><ol><li><p>head1, head2    都无环</p><ul><li><p>遍历链表求的尾节点和长度</p></li><li><p>比较尾节点是否相同，不同则不相交，相同继续下面</p></li><li><p>然后让长链表先走长度差值( |len1 - len2| )，然后两者一起走</p></li><li><p>之后两者相交的节点就是第一个相交的节点</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302180033.png" alt="image-20210302180031417" style="zoom: 50%;" /></li></ul></li><li><p>head1, head2     中一个为环一个不为环</p><p> 没有这种可能</p></li><li><p>head1, head2    都有环，且入环节点为 loop1,loop2</p><ul><li><p>如果 loop1 == loop2，那么将loop1和loop2看成尾节点，因为共用环环长度一样，回到第一种情况</p></li><li><p>如果 loop1 != loop2，如何区分第一三种</p><ul><li>loop1 继续遍历一圈，看是否能遇到 loop2</li><li>没遇到则是第一种情况，返回 null</li><li>遇到则是第三者情况，返回 loop1 或 loop2。loop1 和 loop2 都是第一个相交节点</li></ul><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302180752.png" alt="image-20210302180748867" style="zoom:50%;" /></li></ul></li></ol></li></ul><h3 id="判断是否有环"><a href="#判断是否有环" class="headerlink" title="判断是否有环"></a>判断是否有环</h3><blockquote><p>要如何知道一个单链表有环并且进一步知道入环节点？</p></blockquote><p>可用<strong>快慢指针</strong>确定单链表是否有环</p><ol><li><p>slow慢指针，fast快指针，都让它们指向单链表 head</p></li><li><p>快指针一次走两步，慢指针一次走一步</p></li><li><p>如果有环的情况下，快指针会先进入环，但此时不知道哪个是入环节点</p><p> 如果无环快指针会有指向 null 的情况</p></li><li><p>如有环，慢指针后来进入环，然后快慢指针都在环中。所以他们两个必定会相遇</p><ul><li>并且慢指针最多走  N(环的节点数) - 1 步(&lt;1圈) 就可与快指针相遇</li><li>快指针最多走小于两圈即可相遇</li></ul></li><li><p>相遇则表示该单链表是有环</p></li></ol><blockquote><p>那么如何找到入环节点</p></blockquote><p><strong>在上面 快慢指针在环中的某个地方相遇，然后将快指针指向 head，然后快慢指针每次都只走一步，下一个相遇的节点就是入环节点</strong></p><p>证明：</p><ol><li><p>先看下快慢指针的追赶</p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302155911.png" alt="image-20210302155910059" style="zoom: 67%;" /><p> 此时以 fast 为原点，向右为正，设 slow 走了 k 步相遇，初始 fast slow 相距 n 个节点（不包括本身）</p><p> 追上只需要满足 2k + n + 1 = k </p><p> k = n + 1 (也就是快慢指针的间距数)</p><p> 所以追上的步数 = 相距数</p></li><li><p>未完待续</p></li></ol><blockquote><p>code</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断单链表是否有环，有返回入环节点，无返回 null</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">getLoopNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    ListNode fast = head.next.next;</span><br><span class="line">    ListNode slow = head.next;</span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;  <span class="comment">// 相遇跳出</span></span><br><span class="line">        <span class="comment">// 遍历到末尾都还不相遇</span></span><br><span class="line">        <span class="keyword">if</span> (fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    fast = head;    <span class="comment">// 快指针重新指向头结点</span></span><br><span class="line">    <span class="comment">// 都走一步 相遇的节点即为入环节点</span></span><br><span class="line">    <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">        fast = fast.next;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fast;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><ol><li><p>都无环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都无环情况</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">noLoop</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">    ListNode cur1 = head1;</span><br><span class="line">    ListNode cur2 = head2;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cur1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        len++;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (cur2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        len--;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不相交</span></span><br><span class="line">    <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 相交</span></span><br><span class="line">    <span class="comment">// cur1 指向长链表   cur2 指向短链表</span></span><br><span class="line">    cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">    cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">    len = Math.abs(len);</span><br><span class="line">    <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">        cur1 = cur1.next;</span><br><span class="line">        cur2 = cur2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cur1;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>都有环</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 都有环</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">bothLoop</span><span class="params">(ListNode head1, ListNode loop1, ListNode head2, ListNode loop2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 相交并且相交点不在环上</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">        ListNode cur1 = head1;</span><br><span class="line">        ListNode cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">            len--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        len = Math.abs(len);</span><br><span class="line">        <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 相交且在环上 或 不相交</span></span><br><span class="line">        ListNode tmp = loop1.next;</span><br><span class="line">        <span class="keyword">while</span> (tmp != loop1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tmp == loop2) &#123; <span class="comment">// 相交且在环上</span></span><br><span class="line">                <span class="keyword">return</span> loop1;</span><br><span class="line">            &#125;</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不相交</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最后合并</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一起处理三种情况</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ListNode loop1 = getLoopNode(head1);</span><br><span class="line">    ListNode loop2 = getLoopNode(head2);</span><br><span class="line">    <span class="comment">// 都无环</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 == <span class="keyword">null</span> &amp;&amp; loop2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> noLoop(head1, head2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 都有环</span></span><br><span class="line">    <span class="keyword">if</span> (loop1 != <span class="keyword">null</span> &amp;&amp; loop2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> bothLoop(head1, loop1, head2, loop2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有一个无环或有环</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="测试Code"><a href="#测试Code" class="headerlink" title="测试Code"></a>测试Code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Author: minghuifan</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/3/2 - 16:13</span></span><br><span class="line"><span class="comment"> * @ Description: LinkedList</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">intersectLinkedList_</span>相交链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断单链表是否有环，有返回入环节点，无返回 null</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">getLoopNode</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        ListNode fast = head.next.next;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;  <span class="comment">// 相遇跳出</span></span><br><span class="line">            <span class="comment">// 遍历到末尾都还不相遇</span></span><br><span class="line">            <span class="keyword">if</span> (fast.next == <span class="keyword">null</span> || fast.next.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        fast = head;    <span class="comment">// 快指针重新指向头结点</span></span><br><span class="line">        <span class="comment">// 都走一步 相遇的节点即为入环节点</span></span><br><span class="line">        <span class="keyword">while</span> (fast != slow) &#123;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都无环情况</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">noLoop</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        ListNode cur1 = head1;</span><br><span class="line">        ListNode cur2 = head2;</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (cur2.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            len--;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 不相交</span></span><br><span class="line">        <span class="keyword">if</span> (cur1 != cur2) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 相交</span></span><br><span class="line">        <span class="comment">// cur1 指向长链表   cur2 指向短链表</span></span><br><span class="line">        cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">        cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">        len = Math.abs(len);</span><br><span class="line">        <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">            cur1 = cur1.next;</span><br><span class="line">            cur2 = cur2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 都有环</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">bothLoop</span><span class="params">(ListNode head1, ListNode loop1, ListNode head2, ListNode loop2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 相交并且相交点不在环上</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == loop2) &#123;</span><br><span class="line">            ListNode cur1 = head1;</span><br><span class="line">            ListNode cur2 = head2;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != loop1) &#123;</span><br><span class="line">                len++;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur2 != loop2) &#123;</span><br><span class="line">                len--;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = len &gt; <span class="number">0</span> ? head1 : head2;</span><br><span class="line">            cur2 = cur1 == head1 ? head2 : head1;</span><br><span class="line">            len = Math.abs(len);</span><br><span class="line">            <span class="keyword">while</span> (len-- != <span class="number">0</span>) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (cur1 != cur2) &#123;</span><br><span class="line">                cur1 = cur1.next;</span><br><span class="line">                cur2 = cur2.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cur1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// 相交且在环上 或 不相交</span></span><br><span class="line">            ListNode tmp = loop1.next;</span><br><span class="line">            <span class="keyword">while</span> (tmp != loop1) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tmp == loop2) &#123; <span class="comment">// 相交且在环上</span></span><br><span class="line">                    <span class="keyword">return</span> loop1;</span><br><span class="line">                &#125;</span><br><span class="line">                tmp = tmp.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不相交</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一起处理三种情况</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">getIntersectionNode</span><span class="params">(ListNode head1, ListNode head2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head1 == <span class="keyword">null</span> || head2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ListNode loop1 = getLoopNode(head1);</span><br><span class="line">        ListNode loop2 = getLoopNode(head2);</span><br><span class="line">        <span class="comment">// 都无环</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 == <span class="keyword">null</span> &amp;&amp; loop2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> noLoop(head1, head2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 都有环</span></span><br><span class="line">        <span class="keyword">if</span> (loop1 != <span class="keyword">null</span> &amp;&amp; loop2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bothLoop(head1, loop1, head2, loop2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有一个无环或有环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head1 = <span class="keyword">null</span>;</span><br><span class="line">        head1 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head1.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head1.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head1.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head1.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">5</span>);</span><br><span class="line">        head1.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line"><span class="comment">//        head1.next.next.next.next.next.next = new ListNode(7);</span></span><br><span class="line">        head1.next.next.next.next.next.next = head1.next.next.next;</span><br><span class="line"></span><br><span class="line">        ListNode head2 = <span class="keyword">null</span>;</span><br><span class="line">        head2 = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head2.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head2.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head2.next.next.next = head1.next;</span><br><span class="line"><span class="comment">//        head2.next.next.next = new ListNode(4);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next = new ListNode(5);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next.next = new ListNode(6);</span></span><br><span class="line"><span class="comment">//        head2.next.next.next.next.next.next = new ListNode(7);</span></span><br><span class="line">        System.out.println(getIntersectionNode(head1, head2).val);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><ol><li><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists/">160. 相交链表</a></li></ol><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302194418.png" alt="image-20210302194416667" style="zoom:80%;" /><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302193429.png" alt="image-20210302193428117" style="zoom: 67%;" /><ol start="2"><li><a href="https://leetcode-cn.com/problems/linked-list-cycle-ii/">142. 环形链表 II</a></li></ol><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302193725.png" alt="image-20210302193724527" style="zoom: 67%;" /><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302194231.png" alt="image-20210302194230558" style="zoom: 67%;" /><ol start="3"><li><p><a href="https://leetcode-cn.com/problems/intersection-of-two-linked-lists-lcci/">面试题 02.07. 链表相交</a></p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302195203.png" alt="image-20210302195159580" style="zoom:80%;" /> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210302195143.png" alt="image-20210302195138072" style="zoom:67%;" /></li></ol></div></div></p><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode:判断一个链表是否为回文结构    </button><div class="hide-content"><p>==</p><h1 id="Topic-判断一个链表是否为回文结构"><a href="#Topic-判断一个链表是否为回文结构" class="headerlink" title="Topic-判断一个链表是否为回文结构"></a>Topic-判断一个链表是否为回文结构</h1><p>题目：给定一个单链表头结点 head，请判断该链表是否为回文结构</p><p>例子：1-&gt;2-&gt;1，返回true；1-&gt;2-&gt;2-&gt;1，返回true；1-&gt;2-&gt;3，返回false。</p><p>要求：如果链表长度为N，时间复杂度达到 O(N)，额外空间复杂度达到 O(1)</p><h3 id="分析：三种常见方法"><a href="#分析：三种常见方法" class="headerlink" title="分析：三种常见方法"></a><strong>分析：三种常见方法</strong></h3><ul><li><p>压入栈中，然后遍历同时弹栈，看节点内容是否想等</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210217172005.png" alt="image-20210217172004608"></p></li><li><p>和第一种一样不过只让链表后半部分压栈，然后遍历比对</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210217171849.png" alt="image-20210217171843199"></p></li><li><p>第三种：<br>  step1：先用快慢指针（slow、fast）找到中点（偶数为对称轴前一个，奇数即为中点）</p><p>  step2：然后将后面的链表反转：</p><p>  ​            1）偶数时：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6<br>  ​            2）奇数时：1 -&gt; 2 -&gt; 3 -&gt; 4 &lt;- 5 &lt;- 6 &lt;- 7<br>  step3：然后分别遍历左右链表比对即可得出结果<br>  step4：别忘了将链表复原</p><p>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210217193140.png" alt="image-20210217191654589"></p></li></ul><h4 id="法一：链表全部压栈"><a href="#法一：链表全部压栈" class="headerlink" title="法一：链表全部压栈"></a>法一：链表全部压栈</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把整个链表压栈，然后遍历链表和弹栈结果是否一致</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    ListNode tmp = head;</span><br><span class="line">    <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(tmp);</span><br><span class="line">        tmp = tmp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; stack.pop().val == head.val) &#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head == <span class="keyword">null</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="法二：一半压栈"><a href="#法二：一半压栈" class="headerlink" title="法二：一半压栈"></a>法二：一半压栈</h4><p>如何找到中点：快慢指针 /slow/fast，条件如何取。有三种常见初始状态（但至少要两个节点）</p><ol><li><strong>slow = fast = head</strong>：都指向头结点</li><li><strong>slow = head; fast = head.next;</strong> ：慢指向头结点，快指向第二节点</li><li><strong>slow = head.next; fast = head;</strong> ：慢指向第二节点，快指向头结点</li></ol><blockquote><p>然后依次讨论判断的条件是 ==<strong>fast.next!= null &amp;&amp; fast.next.next != null</strong>==</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = fast = head; 时</span><br><span class="line"></span><br><span class="line">EX1: 1 2开始都指向第 1</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX2: 1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向2</span><br><span class="line">指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴前一个</span><br><span class="line"></span><br><span class="line">EX4: 1 2 3</span><br><span class="line">fast可以走1步，slow指向2</span><br><span class="line">指向中点位置</span><br><span class="line"> </span><br><span class="line">EX5: 1 2 3 4 5</span><br><span class="line">fast可以走2步，slow指向3</span><br><span class="line">指向中点位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走3步，slow指向4</span><br><span class="line">指向中点位置</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = head; fast = head.next; 时</span><br><span class="line"></span><br><span class="line">EX1:链表：1 2slow指向1，fast指向2</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">然后此时指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX2:链表：1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向2</span><br><span class="line">也是指向对称轴前一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴前一个</span><br><span class="line"></span><br><span class="line">EX4:链表：1 2 3</span><br><span class="line">fast可以走0步，slow指向1</span><br><span class="line">指向中点前一个位置</span><br><span class="line"> </span><br><span class="line">EX5:链表：1 2 3 4 5</span><br><span class="line">fast可以走1步，slow指向2</span><br><span class="line">指向中点前一个位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">指向中点位置前一个位置</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">slow = head.next; fast = head; 时</span><br><span class="line"> </span><br><span class="line">EX1:链表：1 2slow指向2，fast指向1</span><br><span class="line">明显 fast 一步都不能动</span><br><span class="line">然后此时指向对称轴后一个</span><br><span class="line"></span><br><span class="line">EX2:链表：1 2 3 4</span><br><span class="line">由判断条件得出fast可以走1步，那么slow指向3</span><br><span class="line">也是指向对称轴后一个</span><br><span class="line"></span><br><span class="line">EX3: 1 2 3 4 5 6</span><br><span class="line">fast可走2步，slow指向3</span><br><span class="line">对称轴后一个</span><br><span class="line"></span><br><span class="line">EX4:链表：1 2 3</span><br><span class="line">fast可以走1步，slow指向3</span><br><span class="line">指向中点后一个位置</span><br><span class="line"> </span><br><span class="line">EX5:链表：1 2 3 4 5</span><br><span class="line">fast可以走2步，slow指向4</span><br><span class="line">指向中点后一个位置</span><br><span class="line"></span><br><span class="line">EX6: 1 2 3 4 5 6 7</span><br><span class="line">fast可走3步，slow指向5</span><br><span class="line">指向中点后一个位置</span><br></pre></td></tr></table></figure><blockquote><p>最后得出结论：判断条件是 ==<strong>fast.next!= null &amp;&amp; fast.next.next != null</strong>==</p><ol><li><p>slow = fast = head;</p><p>偶数：对称轴前一个</p><p>奇数：中点</p></li><li><p>slow = head; fast = head.next;</p><p>偶数：对称轴前一个</p><p>奇数：中点前一个</p></li><li><p>slow = head.next; fast = head; </p><p>偶数：对称轴后一个</p><p>奇数：中点后一个</p></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 很容易得出，我们需要后一半压栈所以选择第三种快慢指针方案</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome2</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时slow指向中点或者对称轴的下一个</span></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(slow);</span><br><span class="line">            System.out.print(slow.val + <span class="string">&quot;_&quot;</span>);</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != stack.pop().val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="法三："><a href="#法三：" class="headerlink" title="法三："></a>法三：</h4><p>这里需要用到反转链表的模板，模板如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加入 head 为链表的头结点</span></span><br><span class="line">ListNode pre = head;<span class="comment">// 即指向头结点</span></span><br><span class="line">ListNode last = head.next;<span class="comment">// 即指向头结点下一个</span></span><br><span class="line">ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">pre.next = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">while</span> (last != <span class="keyword">null</span>) &#123;</span><br><span class="line">        tmp = last.next;</span><br><span class="line">        last.next = pre;</span><br><span class="line">        pre = last;</span><br><span class="line">        last = tmp;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 最后循环完后的结果是 pre 指向反转的首节点，last、tmp 指向 null</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 用偶数个举例，如链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome3</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step1：找到中点位置，偶数为对称轴前一个，奇数为中点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step2：反转后半部分链表</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向中点或者对称轴的前一个，也就是相当于反转部分的头结点</span></span><br><span class="line">        <span class="comment">// 即 slow 指向 3，接下来要反转后面部分得到：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6</span></span><br><span class="line">        fast = slow.next;</span><br><span class="line">        ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = slow; <span class="comment">// 指向最后一个节点（或者后部分链表的头结点）这里后面会用到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step3：将两边链表分别遍历比对</span></span><br><span class="line">        <span class="comment">// 此时slow指向反转链表的首节点，也就是原链表的最后一个</span></span><br><span class="line">        <span class="comment">// 1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6 slow 指向 6</span></span><br><span class="line">        <span class="comment">// 然后我们依次遍历两边的链表</span></span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">boolean</span> ans = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; slow != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.print(&quot;fast:&quot; + fast.val + &quot;,slow:&quot; + slow.val + &quot;\n&quot;);</span></span><br><span class="line">            <span class="keyword">if</span> (fast.val != slow.val) &#123;</span><br><span class="line">                ans = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step4：链表复原</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向 3，fast 指向 null</span></span><br><span class="line">        <span class="comment">// 如果是奇数个 slow、fast 都指向 null，所以要重新赋值</span></span><br><span class="line">        slow = tmp;</span><br><span class="line">        fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="测试-code"><a href="#测试-code" class="headerlink" title="测试 code"></a>测试 code</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @ Date: 2021/2/10 - 13:19</span></span><br><span class="line"><span class="comment"> * @ Description: LinkedList</span></span><br><span class="line"><span class="comment"> * @ Version: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// https://leetcode-cn.com/problems/palindrome-linked-list-lcci/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">isPalindromeLinkedList_</span>回文链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line">        ListNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkedList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Linked List: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把整个链表压栈，然后遍历链表和弹栈结果是否一致</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome1</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        ListNode tmp = head;</span><br><span class="line">        <span class="keyword">while</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(tmp);</span><br><span class="line">            tmp = tmp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span> &amp;&amp; stack.pop().val == head.val) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head == <span class="keyword">null</span> ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 半个链表压栈</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome2</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        ListNode slow = head.next;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时slow指向中点或者对称轴的下一个</span></span><br><span class="line">        Stack&lt;ListNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (slow != <span class="keyword">null</span>) &#123;</span><br><span class="line">            stack.push(slow);</span><br><span class="line"><span class="comment">//            System.out.print(slow.val + &quot;_&quot;);</span></span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (head.val != stack.pop().val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用偶数个举例，如链表为 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPalindrome3</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step1：找到中点位置，偶数为对称轴前一个，奇数为中点</span></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span> (fast.next != <span class="keyword">null</span> &amp;&amp; fast.next.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step2：反转后半部分链表</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向中点或者对称轴的前一个，也就是相当于反转部分的头结点</span></span><br><span class="line">        <span class="comment">// 即 slow 指向 3，接下来要反转后面部分得到：1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6</span></span><br><span class="line">        fast = slow.next;</span><br><span class="line">        ListNode tmp = <span class="keyword">null</span>;</span><br><span class="line">        slow.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        tmp = slow; <span class="comment">// 指向最后一个节点（或者后部分链表的头结点）这里后面会用到</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// step3：将两边链表分别遍历比对</span></span><br><span class="line">        <span class="comment">// 此时slow指向反转链表的首节点，也就是原链表的最后一个</span></span><br><span class="line">        <span class="comment">// 1 -&gt; 2 -&gt; 3 &lt;- 4 &lt;- 5 &lt;- 6 slow 指向 6</span></span><br><span class="line">        <span class="comment">// 然后我们依次遍历两边的链表</span></span><br><span class="line">        fast = head;</span><br><span class="line">        <span class="keyword">boolean</span> ans = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span> &amp;&amp; slow != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//            System.out.print(&quot;fast:&quot; + fast.val + &quot;,slow:&quot; + slow.val + &quot;\n&quot;);</span></span><br><span class="line">            <span class="keyword">if</span> (fast.val != slow.val) &#123;</span><br><span class="line">                ans = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// step4：链表复原</span></span><br><span class="line">        <span class="comment">// 此时 slow 指向 3，fast 指向 null</span></span><br><span class="line">        <span class="comment">// 如果是奇数个 slow、fast 都指向 null，所以要重新赋值</span></span><br><span class="line">        slow = tmp;</span><br><span class="line">        fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast != <span class="keyword">null</span>) &#123;</span><br><span class="line">            tmp = fast.next;</span><br><span class="line">            fast.next = slow;</span><br><span class="line">            slow = fast;</span><br><span class="line">            fast = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        System.out.print(isPalindrome1(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.print(isPalindrome2(head) + <span class="string">&quot; | &quot;</span>);</span><br><span class="line">        System.out.println(isPalindrome3(head));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Output</span></span><br><span class="line">Linked List: </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">2</span> <span class="number">3</span> </span><br><span class="line"><span class="keyword">false</span> | <span class="keyword">false</span> | <span class="keyword">false</span></span><br><span class="line">Linked List: <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">3</span> <span class="number">2</span> <span class="number">1</span> </span><br><span class="line"><span class="keyword">true</span> | <span class="keyword">true</span> | <span class="keyword">true</span></span><br></pre></td></tr></table></figure></div></div></p><p>==<div class="hide-block"><button type="button" class="hide-button button--animated" style="background-color:  pink;color:  black">LeetCode : 86.分隔链表    </button><div class="hide-content"><p>==</p><h1 id="Topic-86-分隔链表"><a href="#Topic-86-分隔链表" class="headerlink" title="Topic-86.分隔链表"></a>Topic-86.分隔链表</h1><p>链接：<a href="https://leetcode-cn.com/problems/partition-list/">分隔链表</a></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222183948.png" alt="image-20210222183946741"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>创建4个变量</p><p>sH/sT：指向小于给出节点的第一个/指向最后一个<br>bH/bT：指向非小于给出节点的第一个/指向最后一个</p></blockquote><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222215234.png" alt="image-20210222215233691"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">    ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">    ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">    ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的头</span></span><br><span class="line">    ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的尾</span></span><br><span class="line">    <span class="comment">// 为了每一步的尾指针的next都指向null，为后续方便</span></span><br><span class="line">    ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">        next = head.next;</span><br><span class="line">        head.next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sH = head;</span><br><span class="line">                sT = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = head;</span><br><span class="line">                sT = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (bT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bH = head;</span><br><span class="line">                bT = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                bT.next = head;</span><br><span class="line">                bT = head;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        head = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 此时 sT 和 bT 两者中至少有一个不为空,因此有3种情况</span></span><br><span class="line">    <span class="comment">// 10   11   01</span></span><br><span class="line">    <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> bH;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sT.next = bH;</span><br><span class="line">        <span class="keyword">return</span> sH;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="题目进阶"><a href="#题目进阶" class="headerlink" title="题目进阶"></a>题目进阶</h2><p>上面的 LeetCode 的题目等于和大于是归为一边的</p><p>进阶：将 <strong>小于 等于 大于</strong> 分别归为三段处理</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><blockquote><p>还是和刚刚一样的思路</p><p>创建六个变量</p><p>sH/sT：指向小于给出节点的第一个/指向最后一个<br>eH/eT：指向等于给出节点的第一个/指向最后一个<br>bH/bT：指向大于于给出节点的第一个/指向最后一个</p></blockquote><h3 id="code-1"><a href="#code-1" class="headerlink" title="code"></a>code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partitionAdvanced</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode eH = <span class="keyword">null</span>;     <span class="comment">// 指向等于的头</span></span><br><span class="line">        ListNode eT = <span class="keyword">null</span>;     <span class="comment">// 指向等于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向大于的尾</span></span><br><span class="line">        <span class="comment">// 保证每次的sT、eT、bT的next都指向null，为了后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.val == x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    eH = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    eT.next = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一共8种情况</span></span><br><span class="line">        <span class="comment">// 000  100</span></span><br><span class="line">        <span class="comment">// 001  101</span></span><br><span class="line">        <span class="comment">// 010  110</span></span><br><span class="line">        <span class="comment">// 011  111</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> eH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = eH;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (sT != null) &#123;   // 小于部分不为空</span></span><br><span class="line"><span class="comment">//            sT.next = eH;</span></span><br><span class="line"><span class="comment">//            // 如果 eT 为空指向小于头，不为空不处理</span></span><br><span class="line"><span class="comment">//            eT = eT == null ? sT : eT;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (eT != null) &#123;   // 等于部分不为空</span></span><br><span class="line"><span class="comment">//            eT.next = bH;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return sH != null ? sH : eH != null ? eH : bH;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="测试-code"><a href="#测试-code" class="headerlink" title="测试 code"></a>测试 code</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> * int val;</span></span><br><span class="line"><span class="comment"> * ListNode next;</span></span><br><span class="line"><span class="comment"> * ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> * ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> * ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://leetcode-cn.com/problems/partition-list/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">partitionList_</span>分隔链表 </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val;</span><br><span class="line">        ListNode next;</span><br><span class="line"></span><br><span class="line">        ListNode() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode(<span class="keyword">int</span> val, ListNode next) &#123;</span><br><span class="line">            <span class="keyword">this</span>.val = val;</span><br><span class="line">            <span class="keyword">this</span>.next = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printLinkedList</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Linked List: &quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(head.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            head = head.next;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partition</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span> || head.next == <span class="keyword">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向等于大于的尾</span></span><br><span class="line">        <span class="comment">// 为了每一步的尾指针的next都指向null，为后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 此时 sT 和 bT 两者中至少有一个不为空,因此有3种情况</span></span><br><span class="line">        <span class="comment">// 10   11   01</span></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> bH;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sT.next = bH;</span><br><span class="line">            <span class="keyword">return</span> sH;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> ListNode <span class="title">partitionAdvanced</span><span class="params">(ListNode head, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        ListNode sH = <span class="keyword">null</span>;     <span class="comment">// 指向小于的头</span></span><br><span class="line">        ListNode sT = <span class="keyword">null</span>;     <span class="comment">// 指向小于的尾</span></span><br><span class="line">        ListNode eH = <span class="keyword">null</span>;     <span class="comment">// 指向等于的头</span></span><br><span class="line">        ListNode eT = <span class="keyword">null</span>;     <span class="comment">// 指向等于的尾</span></span><br><span class="line">        ListNode bH = <span class="keyword">null</span>;     <span class="comment">// 指向大于的头</span></span><br><span class="line">        ListNode bT = <span class="keyword">null</span>;     <span class="comment">// 指向大于的尾</span></span><br><span class="line">        <span class="comment">// 保证每次的sT、eT、bT的next都指向null，为了后续方便</span></span><br><span class="line">        ListNode next = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (head != <span class="keyword">null</span>) &#123;</span><br><span class="line">            next = head.next;</span><br><span class="line">            head.next = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (head.val &lt; x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sH = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sT.next = head;</span><br><span class="line">                    sT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (head.val == x) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    eH = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    eT.next = head;</span><br><span class="line">                    eT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (bH == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bH = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    bT.next = head;</span><br><span class="line">                    bT = head;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            head = next;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一共8种情况</span></span><br><span class="line">        <span class="comment">// 000  100</span></span><br><span class="line">        <span class="comment">// 001  101</span></span><br><span class="line">        <span class="comment">// 010  110</span></span><br><span class="line">        <span class="comment">// 011  111</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sT == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> bH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> eH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (eT == <span class="keyword">null</span>) &#123;</span><br><span class="line">                sT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sT.next = eH;</span><br><span class="line">                eT.next = bH;</span><br><span class="line">                <span class="keyword">return</span> sH;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        if (sT != null) &#123;   // 小于部分不为空</span></span><br><span class="line"><span class="comment">//            sT.next = eH;</span></span><br><span class="line"><span class="comment">//            // 如果 eT 为空指向小于头，不为空不处理</span></span><br><span class="line"><span class="comment">//            eT = eT == null ? sT : eT;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        if (eT != null) &#123;   // 等于部分不为空</span></span><br><span class="line"><span class="comment">//            eT.next = bH;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        return sH != null ? sH : eH != null ? eH : bH;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>;</span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">2</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 2));</span></span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">6</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 3));</span></span><br><span class="line"></span><br><span class="line">        head = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        head.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">4</span>);</span><br><span class="line">        head.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">3</span>);</span><br><span class="line">        head.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">2</span>);</span><br><span class="line">        head.next.next.next.next.next.next = <span class="keyword">new</span> ListNode(<span class="number">1</span>);</span><br><span class="line">        printLinkedList(head);</span><br><span class="line">        printLinkedList(partition(head, <span class="number">3</span>));</span><br><span class="line"><span class="comment">//        printLinkedList(partitionAdvanced(head, 3));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
            <tag> 数据结构 </tag>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表与指针</title>
      <link href="2021/02/18/%E9%93%BE%E8%A1%A8%E4%B8%8E%E6%8C%87%E9%92%88/"/>
      <url>2021/02/18/%E9%93%BE%E8%A1%A8%E4%B8%8E%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="958c2a84165026357c6e099a8693ad27155139044b7d696857f049f1cce8e49c">9c18114bfffb75bea463c3ab069bee10dfdcf4a9d9459329fda899a5ff7d49dbb8026dd1d2250752d0ce92477b48ea1dbbbdaabf01a5d03f3f28b4d408a3386f279eb9d3716e850035c574de331ae89568a5e5dab38c8bd144f6ea29d159cbc83b56614111224c4aef867f260dd98513089a7f97a5c7d0860db906951ae522530aa2e3ec89209ea8fbf2a6b73146284ca26e7412f941e1b96710aca0bc8c4c0548583db677f4acfeb87eda336b8ec242bb70843445e0b5a40aa66ed59861e4288c3d9e546717995cfd05eefdb98c92d8b80a724af2ce89bdca55038cf421640eb5f02137bb590d5f7127f285ef410531619a253d6e3260b4ef8f7f40b5f6bcdd69d364f00d37abc5a6c07091790e8ca5c4df4ec3c4f26f55e66f53e2c85bc9602795f342033f16c87d3e1e2109b11644b57bf38616ee9695fa0a13a8fe4894cc3675b455d882be62455d85ff8d8cccfce01facc79529a5a80fba10f735da551089ab54f0f55222c9fdda5fe76b9d10dc8d88fea7b9fec438098aa0c4f8fefe152c8f00efbfba437708df512e23f9bc12a3cb70db70c497b8f9225beb2dbdbe9efe4bf19555be7db412287fb7f5345d3e469fd44419e8ddaee7944e66b1fd371fe1b36330e023e6ed0ee9d3a16230bdc7b273d20fefd33e93ed1798ab323918c63d05727bbd5fce8efe7ca022bf2cdfe203112906431539728a081d28709505e9e0250ee53c4e3943b8e304543786b1eb4b1bcae60021426e9878187122e76c46605b6eb437a0228bc07bd54cb0157ed09a4bf002444421480a404831d03f4be5c6f97e012f62c40f256bfba6ae2f061f3ba75955b84401d71827977314951042417999e0268e64aad661fda36d6e5cbffb96425be42105bfa38323df8f6c29f45dc453386c3b0053625bf4cde57c69c4c7c99ed10ca78250479d7f780f61928a5a04b57cfbc5c041ba92bab8a2bbbc2dde7e1037ad2d87088fe4543fdae61402d8cc70a5fb5be029f77ca506a2301f63645e9667b836623cca70693ca53b9c86dc61c065c10bae956f7d968df263002b31fed3358146be50cdd9ba75d63de6a60f7ad41bf29cf64cf7f9108b776c368859be86ce1537e635c15a90530d8a24eac5d2770879a9435409ba59cd0fea505a018cb93e62b9fa666e924d69f5c9f64075dae2da39b46cec3ec16ffadf44bc40509c2eef6cc5ea433a937bed1a7eb49bc5b635a58befbb97954fa9eacb97077579c43038a46b8484f4b5e87b308cd39977ce7cfc794444121c810f0f9e5468208efb10457573ca7b8a67977491e622f9a19337da1b69d188ed723567053d8c18bc8fc8c6e3d3180d2bb6a43939000185974e6955cfba5a0ca5a26df3c8655569e0a6f04a8462ed4e81827d0cc0d8057d22570130152cfb88d72d66fb792cf15187dd68ba88ff26c7b7fb00624750fe7bf8de1462dcd331f6cabffa99c83a1a0bf027d4e365afcb34a1f09283afb3934cc77bf437654c16810a7d3b3c1da077e0e22c99d817912c3a6c9d27452904298b7154f43399bf3c9da2c0b09d0e4b8e59055b1911643045fa96601f4cf5944d64224928cb7b5b6781eb43bb6f1f0f289920c5a596c0e063c3f7e766dcf226bff9512dc9777814cbc124e67d103ae91bd41f4905f7b829722187c2f938c2b800fa24d10bf350f67d3e2a367e87a793b9e77406ed8ab0ec7d611045804a94ec36bb6949539a530374553d0b1180e1fb86131936790829c496c6e7d54bb2529be3f8676ac5bae1c079ac193f4fe40230efff7671d7eebe6bc67cb2f5bb7ce2df0445607c3078eeb5b688de50d13f5d61913621167058fee9a1e3bd0a453f51d3e9fcd2e0fd8b5c5944a031702e8e45d1ec001000df867eb7a64deb25de380ce3d1294e7bb864c7c38d67e37f05a8dfa44da0b75392d79b62b29cbbe0f9c91248d5db5cdf991871d434067179624fd4bc90d8e7d7b396de26029e627b88133e390f49ed5b9517933828263a1dd9dbcf1aca4161d335ef26d65757c00a0b47fce2e026da70054df70352acd88e94b6f10bed250f8189eebdc72fe90606e8c61830f164d18b2b0b4e4b9e0a1b4342a3d56e680782130d0066e6e93bd3cf1b5614b83c53470a6d511ea1c0557fe9017bb5244952024eb84f333d7ba352c23e4b15168de13ad381b74501404c33ac38a11b70ac034285f757115b3eb4a5dcdf14925790d0adbabe20eb69f028e44d60485c15a15777dcc6158e3354955f00ce790769d02e39e902a1012ec40e11658e22070966c8127a90e02e8a1672afe629acbaa4a7a833a1e2afc81acbbf86f36f1edbfa55d492c7c38a4f7c1c9dda110dbf615d8eac97c613f6ba6c48e5f1473edb8ab5e980ba23303ebfe2702c6976f44d499e716584c9e4073604471cace163ed994f6915460eb9482092abde2aa27ba11820d4ad0d749ddf688f51ec86811d0f2c43e15901de5c921e1eca5de80e81f608eb77596329dccdd4ff5e0b1581dede330a88b9853138a2165e59e8b034991b6c66c3bb786c6d186771dcd17eea83576f09f8b8122ea84ef80490ee705ae10b361ace1cad6460f7e5ad624d421cf88c17c2b6628a90d8d175e6a7a00caefa0a41c38d72601b8bd08b27c912ea759567923e4339a6f1103cfef9f7b5a1fb99ced3ea44f5f27cd7c7502815234a0533822d930efb79b89f4a963568778277779e3d6b5a297c821ef28348693b0c8cf4436293c7a335c8b3c1ec170a48545a204b746cae45f417a27a15f24bd3ce266fd2e6418704b9a9cc9c33656e4ccda214a1e6e606312f73a3ddc7c67bd9374503cc21dd1286a8e5892d9eaaa64b50b32c2eeb4cdff710b8172324f30c47a3c7a4fa61107549d7760764a0a3961005c402de2fd87879991a05eab56fcaa0e1823a0c20231185ef61c3556ea210d522831b39dde567e98e3a2456e12b8827ae0f35b5aad6ff2922e4c812ce8da3362552f64d57f63193fc2a79b73f5ef40f6b863f8efa59f3fd39219c8390aee5bf68179321555479f602760d23673eaff482dc0a6cd2be4cc5adeb56ca8580249e859d26774ea3af1d0fe7659ebc1154c2ce7824b8dfe9e6b3b8c6b4ced95890771f546a7c62caeb2b1c0a6912aa6092c51bc284ed3280eeb241429dabd889e00f2f935d9e603b924d81ca46dee1ef0bdcc44772f9e1496d26e5abdc997bc46911386decbfa0d4d4595e365699e3778aa6db5a8b07be234baf0592b7647d4e68834b23119160a378dc3c83608b081b4a42b56ec7c2e368e4584f547eee000992271ec3f731022447abab569e8aebe8e5151b942c0b99ef6953ccba7c5b99b666ed0be0a796b885db3dfb45290ba11eaf8a544a6743d95690507f2f993a29fd79281def0a9dc3c271c8dea22900359f05c74ea8442855f9f7092ab32f364d9a4bf7e1f72f7e4fc3e95dd562e478be02b1267e51bcb66b146fa556c32eb3b16a79f45ee973f3f345f465dcfc514edf2b00ee626da9e5ede3b7452589e981ea47017524bb394027cd39d2682515b3eab892ec12007c56e08b3ddbf55472b912b42a7bc70a962158d4c0922adcf1e07dd0f3c76ae23b8da51fa5d49f8644c3aae798860307fd7b0cbe49f43148c79aaa384801dab2bb398566f76d5231bea1b0e384271744cc23193e03dcd92762e121d1d5fddefa26dfdc34f01e58ecf2d5902f1cd980a440fb8f760c7b812fcb8579ff338ae7bc6c5613fae977e35fad84c28d87e7f9ae4d1786e2533b888f8a6f52abdbc9eec02e0b7fca7fe38d810f4081ad816ab7cfa5ab9e2f51a9f434230717fd294e605efdbd1095ef1d36965e030a3a7e4936617da033f0ba559bc9d399b58e009fc43c9d92642280f42cb8048741b327a274bffac62911e54be5ddffbfac1ab4ba7dd758fc702e007e21d248e94a6a6e2c7cd58b8eea3ad3febf14bd0f60bc02ec8a11e6708ed0dfce98f3e41698f1256153f4e58b769f9a4724c5fa7f05deb544ff2fd0aaff9ac776ba7fc495de3be05bdb5d8ae5fb5827baeed9d901d7879befd751ef3fb0077bcd298dc23851e5dc1e8914bf362265eb510aec4c69d93601d7701c7e9108b3d59c609d3158ed68279d21d4fb7b4b8c7ea1867f3aa0a94e878e417e31aaa363cf75bc8f97f05dcc142437553d723c11d9c71d2f083220ee2d9e38753351a65a954998f70bda801dee9749c09a29ce6b737a9a9583de9f930549223516c15936c4eb760472e6f9ff4542cfe8ba3b0e60f9da631f4f406c297055733ba87fa8196258768d3d56235fdda27cf063d73435acef9650ede15b51b78476f5774d833f0fa5052dfff8be3b2d6536341756772f158624a011baf15223ce339e9d5542b58356d1b6fef2150d92aea2dd79cf054afc8b529852d4224f9a18da26b43cb2e76788bc7f696bcb3f07dcd2dcce7d686375900f3764301857099f21de023fe60c5444085253c7123479089f74494ea2afcb825bb56ae0ddc07532e78526317d454d83bcfc1917f53a2984e61fa1b22cd0059eec5d6dc228f0d2909f5811e241e6e3274fd56a165a1afe57d1ca5078bd719f5cccd57d9badfeef0228097499c64a78ace506deb5d407c16ab3bf12afc926d20d0b895b2734faf3b5bccab9a5caca7b98a29c98e351b5a5557160557a46c27493f3f72a9eacb077451609e2e2a11bbea3e7f67fdb447b7b120a35e301b0e890d05d96067e74b52fe758ae65cf3016cdef08c5ef0f0e1107a28454605eb242e388f9837026697a9495080315779d1a05546c639e8a0c4d0fef3fbedbc2522e3554fe37d012804f8bef49211059ac6c908b8e2b6a84ffb66e9e23ec6ab939d93457db885ac5b485f1851d7fd9e8efebcbe8e4073688e163d364397622a8bbf86cf89ea304749afb4076ea14ba13434cabd4c2bc5f43be0249e21c494a7e4651b5fef1d34ad347ddb15a5cf4612d04218703f8b5fcbfe591ca7468dec3e00388822da75027ab2a4945d61c6d80212e4a1958f0388f7aa6d76adad80eabca697b5fd3e59f92d1c6fb3d7ccad94c5a17c87a21f6e37de1feac040bcadd28b493fefb1fd5c80c69f3db11847fa54e41ae58b4cd51138b54087eb242196ff844c4d3726bd95667864108d270f88aa61aa31fe1b553c6af25238ffd1fb888b2550c9f73c55e8d6c4256719dfe4e63cb0539fa8183e058052e984d5792624eb971fba12bcaa13bd60509a60350189a2c8b26055962e0cdbaf45dd742c6f708dbbc64d3df3a5cf1f4fc2a5b0916956742b394eafd1906cc70c76ebed38e7bd001f0cfb74950a4c7481a17fb9369a3badc27eb0011716e79ab1819f26a3eef42b7ee8f0ff703ccc29af9cc416b8fc9eeaf8c890a3c7e3d548b07318c2aa89f638af70ed4022be5dc9e00b93f22c4b506d45ced48fa61288be3b1f8ac8bd6e8bbc27f99dd7c2d8b8f87561520edf7e349ca2a368100623e902de6279d57f34ac022d3f98643f0646bed88fce2055b03d670ce6cd483a0aa9c8e5df9965f88b859350f8a071bb6f41c09478fe200fd748e2bbb947cf2deb634b76b5a41528ede42506f17e0c1d16802d7790840f9cf7e95d0f33dea1984fb87c2a1269385f99ad6b600b2cb6b74c392e20a5e506b6286fb0a0bae5bef16c6a0efd9b259f4551536d994bed8923316e7b1ae6241fdc07baa243e1485d5a20ba3fdc38acd89ec63ec118e90e6fe6fbc6ca7993af18fecdf87342d901a319fd08220ed0d84408b398841ecb5a28f75a8ee5f934e82f4f6c65121e2369fec1b906718a44ba64ffae36301243f50d9171e76a9ee5e1f11b86c3d842c7dbd4b5a9ade56bed53dc50a57647f0c35e3f468b61230228ce94a183780dea1b8db326e5d53d3612acac59d1156023b57df2bb021239639f78c1343121e77eb29d68f4051cfb38bcdf22beb92338804d6b601197c6ee1e18240b356ea6b18d32bb99ff1f9fd2454d4f58602396b8033bcfeef880a7021043765af1407397843aedad8b4dd7377c045f3c8fdae51fdc1be350fccf33c41516ed1c76fcc828153e4a9a93c149637d0e7e74977db574defacda640323778c8de8838d7f72c34cc6ad8f7031ea3387c97534b9af649a90300bdb056585bee6b64be4dee565523f5473b89c44de942578242f15a5702e67562c39db1900c7d71e36536472d51a03a3cea6ec757fad5e31ca69fbce5ca3b198c28b15c20ae8d96555718dd16200c0adde14c8df9e49b5be6aad4ca4fc45e099f9e54fc952d4e1e5962ece4703772e619114184a72d97a8ce8d47c54de5987443dc4208e38e467389872d390e3d54189934c7a2902ff2e8d439ffc2e7889aa9a036ffbb70d9abb5c500882186e79bdfb77276f6b3e7df6050a89df629d12f80fcaa7219c79ca7987ba8a33ffc613f58199a6016d79af46d65876a7df10b20b282118287508f39a1ba1479397a57b1b6994851a262775be934990a5ce3318769ab0dd8cd825d3a5aa398e9d4d04e4db253eba57621282d507cdcccc95b9df165638ba6cacf0b4130629df23f659e16ba85ddaa4127d4a4218585cfd8ff00d7a2238b6894afed2ea09a54200011287e413b0ddcb33687761ce351cfd40652baddca51b547106e7e59560e513cfd69137dbf3f2a667fb9582551f35f0b83c103097463d863415791172ec0fd518a968aba1e8d04109fec2e97d0ee0b5fbed8c6b87f256d50ae5bc3db546203b097ceac31b39f96bace8cd2207f3a7dafad8f7ee32694a76afecfef6c23082272949f83ab8f332ab76f8dbdd957760e5d776c984f4ef91eb04a85497082d80fd35d91ffa03a725ee06c7e92292f3363320c6f82278fac1a0a3000b1028c495be3d0ed371ad7bcfde711a9c82bb907e994aa7116dbb214262adb08220f797d97330f11a63bc67c794860a1f6723e05375b2d1f732fd2e9eabf782d4af9c53292999dd1bf650d0a485c743bd4878c91223a31ca2b4b2eaba27aa7c28f4dfc849d020eff5ca500bd348db08b406d2199aa5f0e89a4bc12d0b81127ae1b647b322480e30ec0a1411e3e747395405c7d5a42fc3aa305746192c28cec76555f8f559c2d0111557d2ca01253d95f1e9baa9d0fe8a1c4a13d4b03128ca8c6d5b624583a07b70df674cd30327762ff54b757ac3d18dea1775c690c35190cc41baea4e91f48af10a54d1f2cf3224bca6d7d30d0d8c0afa332e91c57b9de1b80894d1d776cadafc50b132c8261e820f3fbe3161d9ae7a237d2208d8a268d08e5959808319f4c84d284fffa43b9f9015e58fbff50f33e8fb2dad1f28d0cf5cf21e95dafdc34d117362d0545aeec3ee74d2f48dd48c93916e4df1d1ba59eb62b843b5be93adc8be8c0a57a05a8f23e90f2546598f535767a56550b24ccd1c081c765280049bddd693189da64691030c0bf2d7a6ccceed63e54b674caa56f7a2714ad1eec89f6a61877cda4f9e15b41175584067559996f2dfeedaf9c9bb72c3751a5b0e369ffb36292365977d2c4156fb3650c52bf40e4be5b49adee09050ca8dbc0422ba22e058f59f32623a31f282548c7ddc32c6c0f9742fbbf620424b73a41f703de72079dc97821c5c0ca807b6037e88d3545bbd0d6ed18b829c0d5cc055195970bb206c634e15d21f1e0b339bc739d855979dcb410be3994f79e2613c1c5271a555ecb0a152020689ddf419cdc4d3c5988ed94f65a1887feb4fee873a4d028aea99f92f23e60bc75cee03dde696d8512bf7863a58c385dfbfef23f09228cd6df603537a5c0d76577e0ada2bb1a9019ce9a418c9da40a66f9e3a704f13beeeca42b35c7d5fbf29e09a499911ab949b197707e0facc5e9be4704fc625b378580ce36b4f91a71a7d04fbe916c7e4e9bdd71dc445d17d46e954a625c363ab9a186c62a2d229aaa07c53b4cb8ca68319f1cdbcc7a82b57b4741e5786ce4ce61131368a1a534a9b02bf137603eb106fcc39a6174cbc3cc7776bce748e735e95579ad55390345c22577ebe18b56207817b7d3ecbd6899b8732553301f5c709e260baadd76ca0a1a22a29ca3fd9e638030a9efd085c801c97d01ed2cdd8803f0280636b83b2bc354bdd530a258ba8418f2ee17fe69dad20bf995207b298af98020d2b19b9fbc03e46fb0ab350c1109e46d2c914764c36d1f607cf021b883a0a199249d341b40497a9f6460178c0e0513c425a67928b307e0cb4deb1253c5ae984fee9a80079bc47f67d458560bc526b0899b282cbd92b7c5de7320a5e1790f2dfc4f0df6c2daf630349db4db1e16b0e95a7507bd074534e358e91dfed43fe173bc88b23e9a9ebaddc578b849ff01a29d2d70f890111f8b584212ddc2698cb26115f56663f71db70bec8a22fe67c3b668582b8e9044b221a3857124bb19a9915f6f2d50ed795e4c8fdab4638d8e81712b92ea2b1fd773dc2f60b5de39235ef38d457a98b0f0ae049f4486e78cc6402356945757005bbbed5e6595ea3a936151e1ef0241be08b2ea720d24856fbddc49d48d478845919acccd59cd6fa55202385334518d8aaec9b7a49943580a8905c15ee2db2167a8bde2b5666240e245bdc9698f1035100aeae2eb25f2eb6e48d1b845f72e3d404ac18d6f660da224bd7ca8bf9319db5cb4505dd10a5b93cbee20ca257e867de693d969979f0402564f8c5d2473cfcc8699d3b3fd531d496ebefdf8ae68616ddac6f82bdd2a024f4d72df309d2b728f6494b8e4e1a9c59b6b7cabbf2a1ca965a5af74c81f49bf37e7786295c9cca884c779022aaf2b7566a826d8023e32b51ae9f1b1d217465c7b85b7648dd137115bc31c58371b4d891d39317d0f95080300b54c7eaa261b2bd85a49585b8505ada92a21f432ab4ff32b13a398d1a28e2ead25fe71e528ee1d501675f3d880c0d71c5defee2a8ab074d5a2599fcd838e5f959b4d432a05f82a2773556f15c4e2d2f22e8aafd33fafd822b08d731d8b713629114560b49c826f9b7fb18599453279f80e53a591ad491701a2821cca4ecaf17a5f2168fd73ccfee9614e78d78a5de328ae4a14b9d9647569e42f50ac12adf641ea82723754210939d7bfe635f6e6bdee1106493833da18cddd0c6dfbd242de3d7bd31a438399cbc45f15e00f56d8f7eb1adc244de90eaeffa1b48a62f0aa54a17f9838875d97afa48d3f47991c7882b3c745d03166e35793b5dda4dbaf54bf2f45130037d6bb90d74e505b0feaec76a1323bf9962608885a0ef9c6f02d8f558bccdbe6c10dec611a99f4c6faeffa50aa685516f23673fafcbc1ed853b3f51499492d87f5aa0373b9522aeb73080dd89b5b188ac6ca131b22c509669f247fde163fa044e9ef71d83e62f572135feba7d392fed58cc40a19b766220236574e79613de9ab8c41bf311ae83ec5b757486ff05eeb5af793177eb8f934fcf44a66727bd772574c35744bafbcfb720d96f7d98f91a0e2693cb3ee61285c87111de127dbfdf3b13a45cb522f1222204aef2c0cf0250e0c86fdf96d70646fc007cdb048c2eaa4de037835ffba3ecb2fe6980e4781762843900fb3473d79fc668faf354c6cbc78bb79148802e679100b50df5ec1a9a21c00db7ee7e122dade7abfb1fd1794281237657604a24ac81300c4ecb676ffba11bad4cbcf6203bf1dfdc3d6e4b6ef907aa8cb842455a559a1304c4f109f77fbd4ff310b9ed81f09e6693c1be1fac3f4b78d88900a6757eb7c93be14ef4d6566d95a76396923abd01f66cdbe331c4d0b0dfe4028c15305e5ccb541ee387c0bc091b15b10149408c97c3808cdbf661df7a99c8f247b9a0157d40f9efbda9af694df3dc8eef09d43c46cc482b8181697f0c94303c92bf487323729f4a06e885fb6d0ad9a87d555ef6724b26fdca77d2f5975c355bae500c98d788e7682db9b1194f4af528953d62b86046762bef9e0138a85695ad8954226c23e64462fe0241c40f7a21f6678bb80208a52d3c5a1d1b8bbdafcdd88c8a7ff9472c8b3a5568f21320899f964c5a009d56adb5af2e0af6c22c6f18122977ba815b4cf9311110d09e4047d8a1175dd050e3d41e3e5e8d7df43b5a0106cfac724f5353a6299ed1a8cdb6bfc109a4032e9c8635cbee1757c305b952fdea0252b5c0c29c701e3fcaa734a2efcc6752010a5b4e99dee63f40c46d7dc8bc1b785c679f46db147d01f6597b59f6e7ce4c150d868ff4b4c4c0a252798c44add11b025fad871582ffe651ec19d59e2a815bb36391871d3146b57ce3216b9e064b63dee91227f41b5b8a28181dcf02a5f1078987e4d9250ab3194ac9612c1458d0b08ff972022df96ec4c4d96e044994079df237ae04a745b66fd62102fb1165afe4568396b2866fcc77f047318df370f71d4d1ef7800874c6442a162a79d02fb98cbd2f210c94796369c61d74cdaad9e34b01abab8a88d8453281fb5576e372ac924cf668ba64dfa039eb5aff1b1d1841964ace090b90f2d94c0c647e62c7d9d5b9570b7d05442bacd98f55f92b6c84eca6202605c029e63e4d01cc9c4b32286b8a390ebcdcbd978830563f66ae7d435913f154bfc03672fa46dbf64a7b32fa537be6b07273d4c40ae4a19c4e56c4e2ea99167f0c5e2e8bcdc736485db03fc2984e36c518fe1622b995ae08872e6ed8cfc0a1098c122a1259227a3660f0e5c17e068e37e41759dcc84fac1b6b2604007d613af0a19110aae3063ea3380aa5c0a526182ff8d1e370187e8303797966380846acc1ea15303c302cd96097ebe5141f99817fa7f8c4988362b515e98c8d2b0124272dcd7e32f43b3bd2c83c9692f4a15bec4a995574ec62377e3833881c44ef26b57e09cca617596faaad4e40e62a2d523bfa4150195327efb567ee1b99d71a3ec325d74745cb3b258d7a1e1f737fc6296117399255d312b7e0ab126bc50114a6d94859842089f2c4c22a357e79d1a3acca76020750251ec4e10f34c7dc365f4c2c031200d8812982568da8bbf95373eba162114cffe4bc9330989d4cc588ba79f6fee92f085df60ccd31e96ba78ab92c5b7f73a670ca95043155aabd24ec4c150aa5b439939e2935f10fb03cab174801578f8ab6c2ce0c085b61fae13f67b5ceafd7aba5832a1b4784220bf9e796b9bb6f39749e375cc725916fc9c54695b0857c7603d89c9c1a4c413a25b201dddf3f2bbfd4d71941b4878788a96c30e10605e5c551626c4833ae953eaf28869a58d4788703245495760bddf54e843f31bc889829e5675f67ee3d915a5a04efb4553ed6f31ee4cfe32cf9f85533bf5792507e046c9354b53dbd8061957ecc2e3b472e2f564ad262a475417fcc158c9dc7c300b9e9b823cfa286a9040efe51151d9800b80b96cdc40844110d64021c37f630111dba0643ebb3c69b21567ff128cd3d05a9948d639cc0e720b3f8a9b5a924f09354f6a8dff8729d83cfd845eb0a439076f66a08b9bef9349cab0b8297ce370a9840c806e0cc3354259c425bd50d54cac97bc0a756d9d08504723232c0ea9bbf864f068ba03f6964c5e7e9342d94d3a7b1431753b887ec8cbb40c51e6a68ba33e66c77aa90ad429f77ec6992e98a2026d07f0afedeea648ad9009f25e3002de279561506aa18bea527e60e367a76213586570514314c3d7031105b08dc5f003e526ba0fc7fe57ad4e38af3d252d38dda197d9972690078bc531d3685b301594761ff963c7aa2c38a6c2219807a8f50e1599ace9d7a5e92537c892b004eadeb11780ae30809b39e9ed1091e31898e574009462208ac6a31bd0edf90c5e691db41ca84785b5d80619092405a0abd8ade513e01a5bbd81e5862cb78ba5908d4a48595566aa8be7b2dbfdde4c59b3bab49bf46abe5674da66781ce56dd8a9c0413682c92f0e4502c4266594f592fe476bc4dd110a9eb439b7f8106c4e2fa5f65bc0b2ae576b1906266f0ccdfc0574bbcd211301f0e81a049614f29c64abc9b64532c451762f04a5eef2a9493e832b5b4fc0b785907827f8057f86049396b55d00ac172f07fe3f2b8b69b10f6d039d1c0955fa342fc53f65b4c64ed3ed376ec7d42cf800075ca7f82527bb8587440cf37a88ae5e70a391f1e4fd1864a3717f862b52a7f45d2dfcafd364c42619a117e301748fa2246aa8326c67698ccc9adb67a649d11851019e1c9ea47f9e4a05019587153caea6576b3d06af6378fdd350a153a21673c56993b17bab9b75752083f7b4594e562e3d10944a6985fec7566d65f75f600165acc8230b65bb693b35a835678faf6bce566bc9154c13451f7c10869497fa0f77efba1eec3a15fa984ea97356f11398d85f663820e1db41028662f8316dbbb6032b6b1895049b9ea1ebd55c835cea924506fe311a2c50048828bad979e5b8a4be71c718057fc8044743f1915cff958238f9373d13c81eec96769f69a150aa1aeb31deec1c661e9f09d6278499529b8bc802f283e65c491e506549e4372d0801d25c25996ecd483bd5e0936f1ebce397b1a998ca14452235bb601136e178a9c85927ade13b862bfe0428a677c9f38c6cb97a1a097b79a8854acf38ad81c565edf044b3d6b4fa34b85ebcf85b460b0eae0eefc1993087b5cdfb79f8d6842fad4645ead01ebbb6eafece17f93b4e3dca04408e63d890433a1d71334890b70769071a8a24409b9072cf003172c2afbae403ad4e56473822f9660359edd711016a0c02a35c21c1536f1f46586762500f64dd7027af47516c24931d3b09a07320eb942a2ec6a7e0b3503eea4ca1220605cc0e77b271c92ea8156e5aeb2065c910f032213cfacbf7aaafb993da839237c6f5df73a49e9d8398d8d53fc01a1dace00077bcc44701cbd08b5559c64230f70fc90f1bb1dc89c486b63d8bc1391c6ae4edf073c6fe631cfb93112d9ce63701efdf94540efb3da4dbe313782b6e1e6297baa67182d26f3c522e930cc4e9b3ecab86d62de6ac5ded94a18b378bbf546fe795c3b05e45c3920be9c2e66601ef7f1bfaee3335808695b33f2c019385f3b9c217f901e729900e615a6bb43676e4b1868233da64036cda9606c11def8e5679e3b7d6f6037eb150d34232dcb06585046d3a1e7260ee22bbbbac5bef5dcc73cd9ead6a9f723b351b1c46b964dae04cc1112e276c7520d5506c590e0d9709fc4099ae8a933b0fd92e4b8df9bc58606c706bfa8daea511d82a9cb1105287bf0ddc1f3f87a7ef26d60e6b2e14afa1f179e84d4040f03117417836a1c1f2cd1b2bebe9b4cb7635113d4c95fc4626a6841128c79817d38ec8a9cc49d51b7b8a7c931229294365012f281c7797ba143e14062f9ab7f222e72595f3aa43192042a046a9dbef5a4ac17378072c80622f339c7fa703d2cd29748be163db955ca92f8bc7727477a0744f4fb63f8c8eadc1c205d6599cff9e094588880409d22b41f4dae0a6d94ccb0b3b8dc6a7db87a99e4786ba0443e9c7191bf5e51894c4cac2a5ea136faf7c4159e1c2170e0629ac5200eb63b8ef0d4f6a0a31995e9a3457bba3df27a32ccb413383a795e43eaf92078c718279315eadac25877f748ec0887375bcc252c9bee02e324f3ec5bbf6baa864ea53d5ca011f62c9641407ac9d8acd54f2fac1f955b148b2a96353af51d34ba529ed9298e95f454784448391103c1a8e71e72aa9ca5903c312851e25cf81d3f18ec27e2ed8b0e4fe0275c9bbf0a03e4fa2f2ee55666d5ab0c2d6a31b3e989f275ba14fca1a475c0eea9f357aaf0e73d5d1d59ecf616098256b196046b8571fb3a889f20684eef8f9aea1fd1f2749dbdf89d1080e69477b0a021528d1ce219979e162108db844727ec81265d70a626087b15dca999263aaab1c689fc72f37e8b4f9f90a8424c7d959d051251668088d5fb1d3caae14b90415c2ac34236abbf4958da52d2e517cefcda03c90d73ff0907c39424679c0ebcfd61cea7240d6266a58ae6005272026aaadfc41c87e6e8c270053649a95b37d3ff2ccd41b09390fdb177bb89526b82c0d04c606a5d417832a5a804bf12824b909de1e0c5578d2cd808b9f0c7a4262703d8576c90c61c63545292896b48b3e85e308f83e4df8ebef8f6f579142700dbee7ba70051ae8e0a560de5f58fa2c5df39c483fbdec6c9020985921a64374ad60e4d83e02709f6b99871f0709ed817f2c6a831dbe9c790080c229db6f2e85f62991de4d40cfe0c16fcc0c2d2b62f5a3b3cd337a8a89373e38af71f40cc88ee090bfcf91da8ced7ef8e6b1f3b8f4f1c39f33eee74cd7d1a9b79567e0f87cc56eae59b4620635a45658f20765d4a5fc446e51aed45e40f3f8f974af548177af323875a5fad63b273072527a786435591b1e5ad834d10a0d8e41107d8585710700a267e6079b64259a68c49f46ca26c14010c2b22df172dde2f9ef891064a39988fcd1ad98705ed6c983c4fda1db2f269a7bda9e5586a211ae90fecec2ce915c6c9955fb473a9b20843a24bfafa75a4a3df50513461a774e505d22ef28b402b84ae469fb272612cca94bd3d6bf1a7d2bde9262a05fd52b4fb8b81c7dbe847c407846d8818083d69e626257565b4422a27aad22e225f849b6b316dfd00732e58c175a3fc96cf90da14b5b22a932a55b742645dda2e5f9e8348f5aae538b2c62ff7099a2b73c7676f9444c72374fce851c9f189d5e73b23d0564bc88452d71b47fc6aa29bdaf30f170ebb21f18d15230a8746af85aabf0cd6310e5b32350db35e4ca3d152785350685d69cdcc36b29ef0c54b828edf0492b588ed00bdef98f1a3b4ef8f20f9aa89e1128fbec66854b56b8f7d7b189ca093e42ee8f47b41423b2882244aa1de7ca9f2d84d9d28f2d2a6ab29c06f608e10e58c8f62c4d5d95bf7fcc1088e1751bf85af225e3a80909342667e00ef58034a7ee647f88fa5d4185bb448724d02d9430ce5b7bf082575006d02a2b7c1d1cf9fc03ac6215653a021333c505632e5c0b4d0253561fb79345a8cbae550f88794ba0ccebb9c7208fdb5dd2d484588b6a77a3289471b28c7cfa1847509ff0215907260e1703933d1d5e086cd9eb5472f2f7bfa27baa063713d856e223e667a395cf538673d460221ab340d7132a2cf51c99cc4c88440d532fc0d5228b365be799c86702534696ff54a1775b348cd302127a8107d8b64cee8d73e09684a50941987325ecfc8b83cb2c2283b63c0ae60dd7f8eef7c1bafc3c7e0967eeaac03d2223d9aa1effca8ac03bd9fe7c60a36ba86ca42b1e5adebd0b19c904b9a7aeb74a817e2a61f3971e7fd85847588c0cda3787d7b804915db29cff8647690e2eaa09fbeace8d00bc42c709df65bcb05bb2c0d57cd869283cf5e01f4f27c5cc41f759d7902ef7451ac58e7910202ae30b53a888af272daea108ab0481d6d238b76ed4921c7a4e709026628fdaec747d42dce567b6fd23126e54dccd9281d32308766669ca55df048487a7bfc51c86f33876ab45467395bbcc1357a2fae8a411148ef40d63a313451a55e2347b37fe360a878fa4660be683166c9f9f77a5d251dc8de3761257845520556e4417888b219877fa6193970cafb28ead7cd8265e7eefde675f5e1ee8cdde59d9ecf74f0aa29e6a8df5dfb91eea65271ee97e7b7a7342c562bbad488222c6ef0134253f725fc0d59230f3102887f6f6853733ace1c27678a756618651d247d138357271682b26764dadd3fbfcaf297962f8ab6bad93e966dcf333145fcf292a502dcc7894f1dfc8d42a75f04ed7a4043a217a5d02b37b46d5e35263b6df2ad8337a9a0d97193a3ff8cf76a74279667b6ce4292fc178dcdece1fbc2ea8849e9f9625ba9c632d843e4ec9c37a7edd5029d612f5cb987f892ac338388f0952c459aa8186905e02c1b03fc0d51639264c06ccaa22148d416a04c40f7298ee6020df35dd6b39799090ff79569c10e05a3a06ed253a8f2f04ac03cf995acee0bcdfb0107f69e678a38e6cdd7b293f4c838668c88f8cf6c77b8352e1eaa6353b340c75928202809b66f6232b702f9e4995b9ebe8c509d6cefc5ae73d28b0093b66aa32fd4ff8f0e93d53e22198518db1ee58afa4226ff82758932c4a6a8c222ef390caeff4f614027c64f39af826e08fd1b625c80f792d29bd1adde0781004e4a6dde042da057d06709d34777e06557deb1b511e26625879548d89d8e1a666866fd00794055c95f72d1bce8683ccb6ee3c0c715dc0a8bcc5a6cb0fdc2783684a1ac8e84a51631ca55b5c4b2fe73940b801daa0f1650f1d4da056e0448211390ae6a9062454ad281f3fb269da7ff25461a72d5e2cb7266b820c2fecb563132c0358d38fae953f6d60177230f0834f5245d62e14f0df30c13182b0985e3714dfdb146dea516cc900e0e61ab22df8b1c73289a24dc40cc39fd5f6a39302e030fd3227d2620622b3c695c9cd6d27cd4c2dd1b275c5963e369d1d10147543dd4951bad480ff7930c6997aabc7d59abee70094e7c265577fa6d8ef986f987eb3b839225c8ff9b17a36824e4407cc6b379047dc92489595021ddd277e7bffbf8d89327660f4bc85b76dca185ff7c96883ee1302b38f06d4eaef1486642fd891c021869f47de8ad25644160efa66e98d27e9fadc069b386d16ad33010f852928bcae96f32f7b8e50751b2facdcc45b0cb050330bae3b042af5ebf7be8f1242411cf16a9afc45dba7f45cc4d4822e8d45bbc3f2929b89923f51ab7d6075911ef9edbd4655a188eaf8c9b5a6799844b71e8952c9f4d438330330a900e2f0af0335869eb3c8c5a6b7d405b8a97b307895b5fcb6668ee67998838488b0236d9c76e82056a917c728e8393549bc8dff4084fa2f5826f1845e91bcbc40c0e2eacff1f448e35a99597dccd1c1c613fefae908789edd9a43cb08c30b4d5c217b5eae165150448c7c58cc3bc8982d9d128767094dae0a606364f0d1142ac7007c877b7d660d416cc4473368440ea9b4049c0cabf2532e61d5cfbca09549f46033acc0da799af670597e0ae97e722b3e23af0064fa150eb05910f3c3b05f5aade8ffecc636375225275f4b9beb14cac48873d1984d7f037eb64558268439575b5167fb49b561fdac7402231d68ee2a17628ae229c37f7dcbffc7e5a2c18ab321be33d5941fc4b7130b48729dd94ed249f72fc78964cb110be1ed784169142de74274b09c81233bdd32dd056fee76054b42d2279e250774bde5a5dcb7900b7890b64390347905dd6e9c163be7c138c3a3c593348edbbe1ae72220631e962afb8182e468ed067250d45ff8904495e9d9a80a98846e4e96a41dbffac143442a2c6642e8ca99acc7d1041e7bd5451ebf35a431cc6441ccc7ebfc0f1e4b2ce848f38a7e84b9b1c4cc877f6f612b82e10180fc4115de19d41c69d7ad9f7c59e2add9ac0d5544d76d13984aa514ac18ada0f93cd268f264dfc0134e6e05cc33c3f80042fedeb19baa4e950df3562c03dd870202efab62eb2c644bd3739aa36d1a8fd2265c1d1b851f08a423fbb716ad8814e0f192a99a57005653c493416218f9ad3d04a38a1cc7d692add61c725282110b3332219b01b97a8cd5a71d45a5da833f36c79010aad3556502936ac2829f661383d1f839d3eb0131b11f360341552e12e46658ff2ea55118847b5dce803ea186dac287211df6ed7981c8ab3af0ee8575ccfa67ff666f9023dc55b1c6c636ce41ba13a2e7e4266f253ad9d8388d7c228029a73573f5b079155bb45150f1cfeff1d3379e23dc7f5d1ce821e0eb128da732c8e05a8dd0f7ee222ec3dc0809d4626a5c9473b47835df55c7078f7e948fd5f992ee959f3d46532adc7c6526bc8d378f21fc54aec7dd6f885fc6bfb26e95854aafdd7149faaa460bd2a4ffac2bed4c8efb42628028884abe4c71ab91a339148441c846231ad918d0a95214deec00e89fd41589977db48abb61d0067be5db592bea96faea9532f0c2532bb296b4920a101955df2d6b0d41bbde1e976409ec2d79672c3ab5ab8dd2159746df283af25f16212c84a91e422857f27eafa2434c0567dd88299e5459afb115c26fdfd3edba33a44affe15791329119f6e50c50f8c421484c4126ee28939914774e27f06b73b28c45702800f500a8891c8162009aab2b9894597c920c38248d227d8b1abd7c07baa5ecd7bae438ced2d3256b80ad19ed01fa50d4a319b0034abd10d2c6e9cf5da258d3441ccc582fef37d0d7bd47d0468bf79aa70591c3f1346f8319a997a299feb4742c08731026e52a0f9f7b98c269446ec28c959cd9ddbb20ac325b6ccf21eebec8087cb50b7d8067271e9b8f7d19aa71ad2e713a484bb641d4ff16583b445298072f5983b2b2053826e1695fd9860d0904e2792cd43caf0e62a0675399a4b3d43a179739b2916b9256eea82fb09c13957bd38a9182273451e1d4926401d82577a448060fd456685809ebfdf713060c2d1895dc7c9df9c8d5548604a584c96e883e44b4ceb0dd085abc2ec932f3d28d5abe588cf55c6715cf60ad4d76632f83f8a02191d36b9abdab9e137ff157c60f8ba66f8fb17a4f160ec274dd2c7da6b62416f160860f412d3c94d3a62ade7cea1c003c54201e39969c1fbee8ffb2a745c6007fb38a10e8ac9c49a5deceaf71a1e69b8b56cc91f6b283d2221cc628723d43b4cc585eab806f2c39e280f3d361ea6c853dc729d0921f5bd6f94ea89d15e2fcc71ac36b6126b3abdfa7f0e26a17035d75a72be6a7ddde0fd809dba061ffe929bf6c5d016edcd63b100d6ae35527232c338cecbfae58094880b8f6969aea8667322663cdc9b9b065895e239d9d07371ae58948520b03aad54e86821ee3e28379ef5bd99a4df27749e507c8fd1293e7f87e4f9e2c1d97efc98b0479b90f2b6d13cbed89c1b723b9afab2c254b1bbfa9acf2bf7f384351e32262872a074c581c6afe4aaa39f732115efd78a50dc40dd7986072a8c3639b9078bf4dc551ae6e0703404f54d5f6efde273c35df1b4deb713b8372b8a61bf462607d927b9dd01fb0167572a8f45aeb0b7e2c957163ea302cc0c3ce77cf24e95991b384b3d6000195ab5b3de481c9eb70c8aeb0cd898db4bd653087764c0e727f50e0503f8fd2a456e363f3bdca76200cc8fd6033d2e1aceca5acfa50f080fd8355061c47412763d96e98aeaabbb4e1fabfd6534f9a4106f245a0cd0b5d1371f85658cf4fbc8339a3d33b65a37d840f36c56b739c8d9103e2be5d53b77d07041cf42e4706df846e89c2ef6f5091c190939ca0480adb660a9ca1e09a82abdd713f67d8b36999935a15e77d30095c87ba29bc2d3bfdd75f15bee327e907196dc7bb2513781e6212454adc8e3dec1c34f8ae51935a3003cbf1c4fce67025816eef006c4a2f85f7a3626447491dda7811ebaf60b64a4ca2fbb37da53cb4ed220ebd3b0d03c72e354e1ad0a5939597c87cff914870863833a40c4954339726c47a1834b5b0b051418c9b06e8e59ab883fea9cc73a739a9922fb208e41c4680d7a472f1d5e19a6ec8a60f3f2c9d59036bfc33ac90a7539df63cfcb8e1764d8f4cf5b11a2e3eca3d771bbf20189dbea7b3b0616de11ad540b30e9d683fbb2bc9c142f9c641fc113c1027ec076716d8c60fb9c263a96835a59f506a8dfc7aaa6d6b6552eaea672c38656345fb9370fea6d8be96aed230e7dee73db5fead72afb5c7d0f852c3502bc3a89690955798ddc471f383e7c68c4a3039d91e9b580c287b644ab6584eaa25319a3d636715f0c39b6e27fc58aca94e877a72b5e79fa082fef7be40f7241e30290437cf33b35e3365e5da6acde7f669aff9bcc3458ec3ee14c4deb77d9cbb729c86f6391154bb97f608c85b74c4a7cf628def2c30fd4bd47c736fc82864a9af9e4b283c2642486b0a8bda940c3ab759833cab1cc7a6d75cb199f4434c1b980c83c6bba1fca15414ba7bfe8f32a4d1775d1fb009a8497f114cd6be89e25f7778571059542b51b3f88de50d09f275ee4df1f2d4158f1eae4ce68ef71af1e3e82428c93a0c03baaa212eda98d61e1ed7887d66dc439276daaf61a9661b8034498944e4dc91122ba982509d97aa254a6bc4c487cfb95e9bc8c3396ee4882abc452b12a81a3b53fa467188f6f839c24c7ffd7786976f4247b42794beb441ca93e60e4e133ac2bc898d256d301898e84311554f0bbfcfb55963fc005a64c7054cf6df86deb974cb888a0fb3ec85ef71a8eacef6c996220900d72839798fb147217691edea2dc258f011a511107df058ef88355c6427e239929e4416dec048d939688b1fd6015212e974e2cce35e8cf41b86dc4433c9bdd07230d52be3f8ab7d527dfbe32331378e6d7112fc43edd801335db29bf39387509aab3180250d95b1eadc70670bfb077a5d166f5ab169fe62db1d90ce220f7657fc96930c8e733092a1c732e55bf2a630e5e114e3bcdb5f50d42d2eafa3dc13df7b7dd7caf658c0bd237911a1153ceb579d9910380353e41847ec0695e6ab0a145ce1c8239055ee6d9401060fd3040e63baec95121443d031553523131e06ed0588c02e72c1556f4de6d2c26453aad451a8096b5bb82ff13d78dc6b8746b6b7c3fe847f366c89e4a9080b5c3ef19c7e224702cfb8d52e824ae62153d8cd2629e534d9317122c73e7f762462d2236f40bef33a3cd00edb6550c8a7f0334bf5a8adaf2440a33ac9d93503d418e1ce76854bd569e9bff944eb71b29bcaf6dee14b0469b36ff668cbd2a6ada7aa9f73b50ebe193f9c497730d50e77f22c8bc262abe90dacc64e5c0744b6dee5d5b754b3afbfcb94effc5becb5e1062f81cc349516f8f14df7f3d739033e96b9a5dccf1ecfd06e95659fcfa4e02297036edcaf601df72b5f5792b371e167e6204ac01e72ff16970e46573becc9d2d2e88f406d5bdbc9a50598907c8d4374d05b1a1111ff3f3067c012109f811eaebad7a1b5682ea7d98e3b6db8ed86f6d4747827ef9347b671e9c6bae81a48d04c78c5e7b1e480d6bd933594b840cd220b9417d6e5e09220afbe013bc2b2d5d096405b47dcd7dcae5883118db7e2239bba1a8d5c8bd8eb4c4788267712f024e1486c05ec2f192afc954c06631b57cf7215ec0480e636b2423de84a0330a36c21dc967cac6b089722eb48923f0da4374793628b99ef4264b426b1c67e4383c8a26e1fdd75f20b1e7ca9aa601c66b2150cce06f0a4bce7a8c9fbfe5fcef54aa7230a61bad31882cba1669d996daa74535be789ef7c80ca3d79ae61c9aad266cf917c8797f086f6fa7e022c7979b6500f7e5a52c6ccd7b7cb238cd1a1fd39d5e29ffd1d57ce9bb1c01a649ed78f094fa4614b7ac6bdee6a0a09abe7d6a67189b64d5560861c15ccd36a05e3762521fedf4df749ceeca401596c8d438bb6abbd2df0d2984d617734ba3037fcb63b16b49cfc44c33bd04cf49d8b21f60c8a2ff6c271313a26b6720346fd61cdfcecd6561cd52de0b53fd196260039a3dc160bb475f7819c98ad6546f855f95d20dfe126ddd7ad84f33ff112bd6b57fb08a1557fa25d9226fd0d3c1e062857a5aa8860f56dfc3aefe42a1b6073aeff6beaafd594f1d1d13d56c192669c0646332b545a5c4576590454730525be30403f4e31c0cf6e5caf8954067380c351ba59065456c290443164cf20bae9b625a4df503fa3c179c4ae1644f6e201915ecb51bcca46c64466b83563434f5595a83e94bd21ec52a52b96795092cb40af9a7c76784a4daf4b3a4757269120d7f37d65b291ae3124edee3a20d1b9b5eaad62db73557aad51018464afb8feaedb0143238b803ceba1982e1cfd19ae17a6ea4edf5a57a430132e8d7ff8932392d3ac866762738028af2510ff6e058d9c7b75dfd0c86f37252f76b732a4930f6128c3e6a7f36763ec612442c47f6746e2cb2ddf7cd1e52e42a5504527677548a7eabbf8323b15ae687540b93618bd0c414b77a8a430ae03570686a2bf1cef2212c5cde7db5fca89e66f06cacfe852b18443ca7fe0de868b278b205745fa8ca7e17283ec7143b4df58d268e91215295a0de37f7965f415d28bf6f7ef6682bbbfbda7f7a02dd1bc602571fc9f512aad45b057616d6c2b3fc85ff99b6069fbfa56e907b0681fe1ab9d1cfc77967f398544e49c067d0da6ba6a4d39186af4b3cd45c2c32daf6e8fe181538f106427110a3680b715d72a77f95dee0d31d12b7c484111f54af6bfd9833ad9cf6a718b0d22d7e4672a6570e31b33a3deafa08a073207927a2d41efb3bdddc5da708f9ff9813bac90665bb01e658b59c84c8f2056cb3e67b33f36d446e709f371ceab37b079a827d904830b3d654d0f8fc787a06e3d5d6b6ca3ae476f4e10e29ffaced05655b882d4b4466da4d828d7d521d74598feffa4d7833f8dfc421ad44941ad60efa1e2760c6e8a1e0ed9fbfec432ce9d08990093adf2b85257178d623043877596f33eb69afe30c06c983161b921eb8034f6901edba12a344f8fcbe690f003d8a7d007943d302b12a6385aa63891fd9df404dbf0579c525aa22822766a6c2278526f4c92e1b35a79ecab1c30278f2f186265df23025fd13f633bae2041cbc7a774f04b6b420401060d4f51e3e115294b9fe7078d434b2f58ff4cdb304569d45106d09a2036e8fe0f4a75f6ea46c91579da1c72695829481c3dc66569602c8ffa05ebb52ea99795e7c3ba0793160cd949a676aa2d7693e8b9eb0b56cafbb5e4d886a53ce8cfce38c7404f9321a7b54cedcf5a1a747dc3af8bcbd0f0a63d2e21419c0e5f733bad3dae791c74abd5e64b5c1023dbd665140257bea946329f5cdc370f299bd3d9320bacd9bec01d2fd0b4cbd9fbb3cc8fbac9a0c00161ea09b468c6fee5ee4e07c9d0f93c48a70c6e926a04cde3c0f962ea8168c9eac2247dd6ba53fda2caba43f8d61b62de0151255db013de04d08eb50a5496511730e6a63fed68f76c9628beb455055de44a851470f3654a1bbe5774d9ea0cc65f241f53038ccc4baa016bbc3817df5183cb22d41994a41cb19f5d5511f07108c7121b72a70a5e74c3cd78a00e812958ca63d7adec9ed3433c5681a603859f7e2c0b09d562c427d0751b8531513400f3d571e65b4e3de5e532555b14c0fe757d5ca19d5811efc8819ff2cee5cc1cb8f7bb095312fea9b9781dbcfdf5e7e9b7b42f69f3bb3fcd68d85b5060884f09a6841b14e50a94be9d37e041ee953f971ca421f880b624b16b64de5c9860616d771968eb0750748735a8fb6f040458784ff545b66857fd7b3053e9579c9d428194693476aa34e7f9d77d607079ed14d9c1bfcd556a12636652f3aef7b4397eeaae96264c0c12f2afe33dcef916471debc65e9a682dd99a1c1ad0014402116fdc637ac312f325a5c7415fa11fe1f8a5c232bcdaca94fedc6a2a28e72f3754a9a3582dd2bedf8822e70dd1f930c94ee715c5b3a04222b426f28345563c4a2cbbcf7c5dc79936c8e18929f697a4173e000ec0f0819d44cc88432aceac4c2fc1386ee42d6d6cadd1ccae6970e834b11f44deef049d160923ba41b5fcd8ea85923a32d2a77d723977163ef07bdcbd82a881364891b4843ffdac7f824011c6dc298c7179d432a330259ff8f01e45f1ab9e2bc057451cc91e2c613eab3c3e2bc0a5c4523c2e97f19636cae481f8e25104daeeac5ec1e757ecd3c63435dbd9febc6ecc84deb772b6ac82aa6f8760b8a8cea678bf7815e8dcef624fbb4b25bb5cd7ec34d98f05197841bdde44c3fd6c0e49d1e5362f676fca36729e75b61a845075a30334ce616e81d08d6f2586d019fdd40a271178265783be636d18af76c8f07f0e9a7d8b53bbc3a2a8773aa4f9ddb59ba77531416f5d96ec710f1fbc74dfc0ab02fdf904d2a40a50b6452ee0c3fb93de88c0e882f82cb39fc1f30d1f357d0ca7877692cf4244d82e1ad8c74107c6f3d32aa4a7e3d55d4504c3978c8a52eff3163c7a57bbde7933f968bda1fb42b65a24218e8007c4c4b2b83ca52fb371e234183dc67ee057cb086256f8ba1718570a5524feb964ae856e305952bba68a5d8356a55e6579359cb6e8f4d8b2e9f398c1fba459134cc8cf8777098f547890248efe63aed6b9057cc46637626f73ba17cdfa38ffcefdd334f22b0c4639976134e7f4a01c0d88bd03db4304d33b717ff3ab45f348b4e3b6eab4771b7789b91007c98c5e4176e000a6d7fd89b5a7fbd6d5dbfe72287d3fdcf79beaaacb0abbed5af8270460c5c8615829fef55a1d01dee857ca8dc0fb47208a6e02eaabaacac68daa4e12c82eb5047c95a835ccc1b6747c577d769fae528077cf0a590cf2c76f9af37f2c41603a9e51a3c432de739ca48538e0dd400d960382e1c6ab20270250c8d22c9dc84583d2bb8419ba6858c7044178248a601bf6dd0a0d4765cdaa93472c3a31d90c6df5eba8e768af4ef1a4e1a5c7c58efdc2f4cc0faa0b791ed14443b541ffb041c04919aa822f9805a0abe67ea6e7d7c55aed22754476a096e9f9d3dd11c5674a2fddfd55df1188af72df88f6cc1568c6d6a99afeae80c56f978964bd75e97aeba6703b62d443c35512188f77729459cb6b0a15a9e1e83d79a8b6581812ba6afcb8e28b4cfe561e4cebf68268e20994efa8a3f0fcb8428a8974dce39bf62c52a88b69a17c5a50615bf943051af9d7ba28a7b14554f4390a74951fff82b264046357e62fc5789badfe83b9def576e3a1f3b53ef7e3a34d75db494d9f23ff58d8a57b8f9beb3771b36fdd52d3991ceea969f6eccf5dd7f155e03d19a9b23cca9be11c3189d9afb5bf6eac738477c9631a6efd37cecf4359bd6e67ba1f0cc9977e82858cba31abb1b48f03bc8dc934bd4d0963a7d7bb5853fd46512ccc72f0fef591752234d7501beaa9858443c55f0df2bb8e53bae80ad7a9a7332e188b47a4f7c49cb17284d700dca15722997014a65b78042b882a51f8e8395296da33d79c3942afba38006b5382013985a46b445d1ec5b353b4c133dbf1feaacf107a2a75ede934999c1d279751be96bf42e67336497e5b5ad8b1da668e03daf214a384a92c3dd0932326942186962bf46cdc88df2889a6b8f09272fbee2605c80fbfe927ec6b721908990deaca008feacbf3e2bd83dac30f4d179db7c1e8ff483c7f6c45e5950fddad4c9bf7a275dc03c0721527435a6cfbdf9d5e1dbf1b9aee42fb6d195ab37c312dd8d698017251478c725a2cf0c00e9f0854fb03ae3409a917167085b8711a536a2fde70ab20841434482277b19fd38548250457e00e055667d9b26b7c293155d5daf5fc0dd9b9485ad6f37956d194cf1c8b723cf4d64e446195c8f3d786d85eb38433ef353fd96056a1c38fe1523808e51e1e628ff383981448fba8f403437ff43ea2cc1946c8055e5d250c9a1b312b3a1e3264b5e47053b19a83257009bc9e6ec3f6dc4f66c5f55bed4380e2498ba1d6a703a8147e2cf631a17017dd403fe1404e9128226693ca57b5b14f54b47dc926f4b0de653c3125b66bec67b1c3bee378a714c4c8bc38af9cdc438ae2ee8764953728db62485e81a4bc3d6452061328dd1928406874dcff3bcda370c675f14ebbbe431a2052a554116520785f5e03a3eda080e1a3f4e2985af96c5dbe54bf462a27e1939a7bada39df63088c45b73e9a7277fdf120b2ede8add91f90fc3bfd820c9ae17cef6e694e3b1f1d254d88b57147cce8c3a5a6818b76e65378336e8bad1b1a0c30ba61d5ab030c603ed68cc142325cf90fbab7cbc0bb8eaac2e453490e9a89b61410dc4dd51966e532aa141a4179ecbe54bfe9fd96f683b9f1b225d3bd87ad1ef2f58fbd2de71dde42c58501602a3228b7589152c84f1ee6ed7af41c49f75c8149ccc00ed3a5893459e797f5b062b133c3fb6ed1960877b1e538cefd44258db9ab2927ada55fe13a5c3022b9da654b30f6cc737380ed469ca7dd58e1e532ede6e109c4288fe8a394e41893f28ca2dbc84b79553f7441a04443142c5df4773183de2aef4ea3386661a7f69912235660e35af4393f4d7dc18f2b4212d8785048633e8809edd13e4d70b9218f84d88d1e7959f7d35ae8a6ca79e5e5a3f4f109d961d84ca6c52df9d4f1fc7d6514dd7d9aeadf03c658d3e89caed6355dabb259d7b6c93e8d9ce097bd8c10183511bc39006213cfffe2449a12baf0f45ba89ed8d4101a676af37db6e51d86786aefda1a46b4ed2493143408d0cd439d8a5a156a98f8b4b6e2c74ed84eb5f6d9e37b06af9be3a4019f566dc4a8b1f7f15ab1aabe27d9bdf9886a7381531980a6ef1022dd75891cccb8f41a72215cda215b009d1636add119ec9de1b7e08a07cd27b4371a674d3dd6764e965770b79a5936cbaf25040b8884802818806fa647c97601f68476e7e77b58cc3b6773cf155b3784ff6738d3167fed1922458a0f9d757075fac129a72be7eac3bbbac3e128f402b1a61aeab3c0a9c9962e9225f2c89b8773a5a3e1295a84d926cf415f615e118cbabad68d31bd70463c0b36ceed954d58f80960fcaa5b49de752150b442339277638cb223e5ffab2254b66029ea242d23633fcd3d5d5d162772972cf7fa16a4498e8e710414a10cf47c451e96d9900a78e1f798b996e55ab8eca714453631bb1ef2ef31e6ff928c73bbd187b044afa6468c549c7252f11e1536d37ab4457c63475c31e01e4f481dbcc4aa77d6365256a9f1f65fa5f1777026757663713faca34cbcfcd8c1e4bd61f51d5a2e627a98483dc36acabf63ffbfeffd24364be09a91e0a80f1bc97b8c966d982d1522ec6e14dd24627bf93859c23eeb15416bab4ec55c9659e08e887cbf83c12a1d3cec0aa0f54cbb1e22c9247db64fb6a0ad4b300ca90445c0620844a7a1414eb9919d99b234a26f8f15435fcb29c6f2a4ba39ad5e2b17a59c96fb155655eb4403d6ed555d217a842e9b77f8b709b583625aea96ad9139f582f7dd0680da245ebb1de6170a9f32881f55ac6c9636bf7f06ec7bfb6a5deefc29e04f5e0b807777e44b222b669f6e656e4eda9c64bec749dec9f0afe52e8fab091f1811c558256c3e9b9e24ddd03d84892f8aa24aa6ce62b8b477ae730c1bf2cd48e63522f785465fec2ee103a55a8057740907922f002cdec7876edaef8371c4e6b23fd77c9570dec62db1e5eb243e71e1cb7ac73875707c98fcd2b0d3d5f8912c897cff94febc87da980a764a458bfa399eca54ef87e58e32e500c936f455fd6407158962bb63ae448d79f9c7cfcc4a2c960b9f3b8adeac8a4c2664ce646f99f263b1cc9e05ad857e583c860f6fd04727c8c111da8e2ebb7d18bca30eb8e6605e86bce118d75387f7a41f27666068c5fbd89a4edccbea52ba0c8ba485c6162fa5f6d352b1ea9bce966fe508190948edc3daa2fddb02939bcaa361c420ac94e8b127e4fff46e5c6304bece68891c37b89d0b0cffa58a4337ee6feda2e8029d032902ea5563fce35f39e1a441f394c2590e0b10a2592f95887b5e634a8c2f925f5cd0d690677a4aa0a5f6faef1d812428a108ddc3ea10e13d8186cfc7d397cba996861ba9d33ba7c76d7a691c50a0c848f0a5d559b43fd3331bc43c802901034b0f26770209c388d5ac49240781c588388ce4a5c76a5dadce37c25616073ea460107876709079fc33391042f78b6ea1a35f56a3b7125b960ae7a3d5f572fd780611703d6f6e6331038531f974781cbc92a33a2e8248723c0a6dec3f49674e000d76426e0bb057c0dd26b8e7f633f27a6d654128ee1c8229b6d0c26a890ab245e5c8daf4c07de6f736a25309782cc648d052c093997741644e16aa59518235ec3b2a92858100e2651c33aa57c6207f5895b0fb48d7059f5b6a77419267a7bf6cd9581f1179e2766981f6b48ba1814bee6081b22a175b1a24a24c65609c21c84b941c0dae77fafd20397ec323b921604c5c01dffa60019f6c31f0d104dcde195f3752632eb1080d75180f7ea1c1e71b4087ba48fa8b88d10c269f6d465588e1453a14ac6f92cb7c56f8d46a1803006e979591c93de0d65b966bf0b3e08436c2cc0fc7c7312085f0eb5c830f32858ec8f32d43be603bb82433978aeb23ae29687d9de4ce548df19d0e3c6f2854b1655b971704304804c4e09292b2b5494a53de2b2b446dbd050c108d8a9640b35c37b232951969ce0f4e75ab2e6a9d1687c28a7fb0da79a7aceccfd0dccf98c70fb1f0bf0d366b92d2c2688492d30782057945c07d3c460693b696e237413cdfa93aa00f3ff9a8b07405019a7758b9925fabd411431ce4f616eaa6036ceed227e73ea67e5831e9c5d84afe1ba525fa5dd2f6a9b38f679b026479fda87bc8ddb062ec9f04466735110975bf47599145ff52385e53cc1318a19ff1560b48dc40f0c9b72ad7d6ff3b9cc2aec888e8ac0e71a3660c1e2997ad15063acb3144537470ace0d97214d57ab704a96c380030ab47c03f23887e6cb92c0123c346e3a3e0a45b4e57f622b44076f3639a227ccfd1e727afd9d0820200e636e767d865023098b122f40c186e4879b53a1a65323bcc8070a6a3065c0ae1e6f2089826b1f8332925345c742df67074e19d4cce9d0a52b09ee6a8e659480d343865b3f44978ebc0a4f803b0ad1026355e23af6a83920ec93d3b0b5a1c6ae83272d1a170585e456a2ebd7060e5e5e037340a7b6fa0a938cd2a9a14e6d34c0c86179c07c4b4c5c00c2e3e4e91f87d0608fa35f1875aecbf3ffb3961dec9061f2cf0169a980ad7ab75b2e49e93c8695d85f1fe26bf0bec1fe00988f4eda9529facc415572cbf6fe50e9558feb785e3f84cfabec9d2f8373c73d1f86fc59ba444066340586b031079f825f49031526c7ea18b2e3ff0097b0eacc00b34c49cbf1b2018f2f74443f80f9314541d7735518742c8f7c59ce3a2505da6b07ef17294a62bed889402f4e0e20a0ffbac2b31ff66b30784df26c80e927f8af92db120b15b4d31202e413a8da5d007acd76cd3ae0eb278bbcc934f42b2ac799f79411e146d6631e381cbd110fc0a84b1ae30d1a58d33c377d56a56ebddba53b9551a902676207168dd6d07655f238a8f9cfb08ed8167969d60b788930a2d95994421577f38271257c56b17ddcab47d53f6b30ceb90ce9541377076612f3ffdfab5ad5ea6dbc8f852cb5cad02e617968e3af8b6a07a92d2b53f44fab8a10b32ddcc1a2e05e49796ce28e8cdfc15bc3d59a1e7a0ef286044ff425f4f1c6effa6ed937cecfe43d274b12851ec37a27c2c6da2a98c42b9be9ee5573ae9fe9ca247790a692424e95e746616f7771802efd625907e8bfc5aca1c5e5e513946ed5d923db6d6cd394d73b73154ab73280a56d776163167429313b52673def1510312cefe38ed8ef034428ce5a48a33deb5a813cb5b9ae695de422f4b51afc939ddf16ad47e80cef5889fc5572440771b5567af4a1c1c8bb205c6d757ed9745583ed50ed02e45bba7cec7eb8c91b9d691945726816dc3bb9a4257e13c7be3e112f97169b8f93c080a4b32a0983d3ed1f1f9db11d2946a9a28d57797df393ba5da4a5e3c289183fe7bc101d97e83a80ca446b1a8b33cebbfc063226b79e227e78d5e31a944f90b2cee4d8fa27f9a8674d1f0b10e7e95575bde8b6dd16f3b65a01e80f009f1a5a15f0997a8d702a4511b17d39e479228c7c8363ca93e6c82b554dc114cb4a16726f5cc0181c7d3963f219a411ed91624b44760344b74109362b580c54f6a56142688ca21ab88fed4383493388565cda0df8f4b4ea9b494f49967537dcd6f59e28e3a7d00a1f9375bc66201d1db1c3904156b8ad27d5c4e892a8ed874903b48169062456d2ff880c903c3f78fdec566c4aa735e001c5901bcf8b270e79bfc1ccc3aeca494e94af1a5a979f6ab81aabe4b8307abc0f5ccd0ca05e07798c02719e6140ba1bf42007dd51d885ac4b1f1306bbaca8fca52834279b402697b8bb7b61ce650f17765b66b0f396c48a62f818b67bf2273f42a64030c23414107d93f71fbb2180cd2593d54a4df9fd03842a7be839935a86fbf8a6bb280c60c5c98fc7bc99b30082e638b4c1fee5c85a6ac06ea533a71f55e29ab0feada653f5aa7dfacb8857f0735ce0a8d070e7bbd5bf0b4e945855ef9f8b39aa96daf72fa9a3969a03ca87ba983bb61f4e2946be911c6f76970aa65f15a7551856044ed74788f70d3eab94d5b6346e4620a979718fb78cd3b26421898664ce789379bd118e86f28b526996eb0c7ef09aaec5ce7b2b5c30b6d6c111556e3ef7ebe98aaecc565abc3d2765a197abaff96d9e35b4c745bb34492debc64939a56f885ac20d9db1bb99969c1e4ee0755cd4d936cdef28e61770cc1d917a9625f5907e5110ea1bef6a455289e73d01299fc5ee0bf60e5f3efd3907ff61741a1a34b6cfe53376422cfa061592a022dc1640fb42dafad584d13d3ec03efea470d18955c874e315753ea5d1ba7b0fbb74c3ece745b7ff415823d366cf71007ab7b155c5bd9e2761ba11c70d91990a773c23967e12a9747b8f584dd5aeb13491df2b100e98a243660c472e4ddf3ef41e09941f152cb379a326492d8b61ba5b4c6f61f44cdaf2ed23896257f917eeffd0fe993c93b9289adbae970c9eee8a895b6b0ba559c521792e53cab7697a89ee13aa0debb4556effff2c838d9eead61cdb9e168414aafe0c2f6407e3ccc76334a7bc60f29877c5265b7db2957c1b125bc67789ef54d586f12399ae5e26007ead1eb7083d4c1cfea68d4e23fd31584eb480dd71c00a134d71c7a5e4cee198eee2676f376f91aedafb67956ae84dfb4795178cef36ca859fa8d22acee2f076fd816be4e1acf4c0b5e2db2cdd2d13b9d1b5a447e84a9c74478b20d981159dbc5bc6516e072ef1c3172faa10bbb039182f63eafdfce2bfa834c73ac8ba3b864c82882cfec9c334cb6c6d21f12be36a942f28e41600c515c727eb147aba640ca3cbd6b5a8eccef9aa50b9fb850527b7ed610194fe0ddb2ecff206c7848240ffa6620ec3fdec3f8d35d4dbbb9c2fdf6e801e6c1b9283c592e5adcb31d633efa6e8d5db831113234e1ee9119569e309c80973fb8be151077946f9000fafd5f0c4e3275fac35d36710569452565c41ec2b0a007da66d30c527ac06ab8954645176e58c5f8dec2697438823b7384f978273bdb5d1b980de23301f5dcf2eebc45d20b0e5fdfbb7630b3e27d390cbd4b6eff74bc7dfbec6097076a8d1dc03d16681b44793f55413db632af11f767e0ebd56cb2c9d486c76eee2a34a8e99f75beac7d672399ed792da036db26ec48db4d3d1dde762aed4ccbb408bb39430e42fe770bc22b96ee7c0a809b79476031374399c33ac1ec5a0ef4e715b95321687514debc35ae6962b5ec6c43018452c67e2b6fa2d25dd74b5f0b4d6b4c8a441d12bc679a1696d74a6c56d283b444e6053dd4fe4ecf8579358c3fb0611bb859c6c131c2c377733d11fcbd81bbc40f59e753e37561cdc0bf2b50927a5b437523ed03de501a6478762dd3eade02a53cd18c8d5657b8b7c17575452099b701bc31f413a9be6ea2340d6e5b7f101f7eb65787899b588afc94cca53af779d2225705ca2510ecc5e913ff6465e03644465c86e66833b83125363c443e45f2d6b4d2b0fef0963f27eed9ec5515fa739463092a1dc36763e0e637d068cf5bb9a0ffd21f786d6fdd81c6417f0f812892b3554e3c248c12b380fab92a2e3fa37ffefb248cf14734449d4c885c3a4b79e733f47cd33cbebd422d24067e32954cf6ac1b0c72edc950462837753462bb1fc1e3996ef7279d9665bef72b8238c1adfa1abdb9cb36ed35e7de76a42f934c9a213b522c624b11e8f0dc5ef988beadf599abed5a3c9bca498d916644dc780b8b436079c27c8f87a23bf04aab9ed8e44d88b9e3c73eefe14f05df8f25058aea155654befa83f869a8cc7d5fcc0b0423f5210e3c68bac0c7dc4997c7f5eaa6a49014d198601e21ab7d86cce66cd0c2d06ba238962038b91630ca088913ae11953b2fe4f073fb321938302370fe0e54c470d1798f97c1abecf6fe1902658d19ffcc66baf125ef0f31490c809855f4987b4b993e2d68f26930fc50804abcd44eaa36b74b61bc43ac6387e89d882b27d681f89212e0494e16b69375074b391457353a7c61db926c08531db50fa3d14477231d44cb9fd8a56c8c975fe76a0f05fb2c25813b52d703d5a0aec986edc2434f95a0f2a416cca88d19ab2d6144b69f8155a9a859f2a860b242c0703bacd43ccd62cf8792d3f88d158b627cbf9af84352332735aa4bb89a9563b5dae952257a104e7cf4ff6a62829ffcff3ce10123a86b7a2111c25ef47e42075dccaa2e018b25cadd17619cba3252ef42c919ac0c477798072298262459a17d440ea787467b679d9cc4c3d7535fd1df6a3da589f754359e75a4af11bb8b7e7dfa12ce925929a482fb1100e4d18de5abd077b4d2aa544024b936dc2c9f81c0cf0d5dfe1734c468bd68a54af7da8ce38a1a8a8ccea901efad9444182a6be860dbbf37087a3eab365918c893ddd57266fc86dd3d21345efbfeeaec5234ef58193f71143267baa075a1c62e9ebe9a04b27fdf11ce33a2f796ccb5c5cbe570451c6cfe6d95c74db6f90806291883c7b043c51724f5310957fe4bbd0b1496e278e6ad15ae9c9f71365a61170af73a5ffe821b076f083f1363972a748720b20784d13e7977ded666d59d1440af1dfa336a16d6bb9196f292352ddc26caae5a4ce0e58db4bdf3c1a8fe953dd8d1a723f606f1e0552d0e96f3771ac9308aba00934a72194dc7b66f4001e1ec70b746a4dde65b2ccb7f99200ab030d164d98562d0df4dbd5191563eba3513f9df66363ab196945bf55f75ac3705a8d079dc5a1e02904aace56dbeff26873bc2baa2e937f75fbbfb79a0cab0533ff9a2f87fc375f1c9cfa3cb2f0410cc0a503651122a922475fc5ed87497501f345e19ef58a793735dd60ca1ec5a99b706614f3642da0cf22e350f597589581b9a6bf138e727e112f632916dbce3e92b49045bba57e0652ab7ed9ca6838e2edce8630779abd5bae38a800b661b938fc517060a03bfdfae44a45d1022fe558966c8352a53d1226ceb880c52481f30b24101f29cb5ee3811af821575f4c5a798ad514515fcc76caa7625aa0c635578a12d6597420c2ee38dcc0d0864882562766be00c5e32e698cb9494c098ebebd066dd14a13e67865ac0bdddd07c8fa86c185e377302a0115a95d1966c931572bea4d24559aee3ca7328372880ad6616cdb586d202b50d779e1a2f8dda7dad946e21caee1edf7ca9dab97cc40081da5ef0e6921a46a2ae61c45c3466664e83a13780329e6ccbfe53b2ff6cd928aa442769fd350ca89ed261f30e20ddd5d3abd8e31fd082b203c2a2f2aa54ada9e7d2f20fced0ee91ccd66192e214aaa22e452b43f7a086ca9ba6b6d5dc576eac5504bd825ecb0038c5ce1ad83aadec6c1de6938b209d1833267ddb1a40b9363c57f6e3419b54d668e6c4f157ad3410aa5066c1140be4c201ba712021e50994a097266b0962372c3fa17e21d841244c95372e515b5d2ad28c39c4b23caf6bc137d4a6a0cbc5dd0372681e3f042a474431e54f635b103166abce489d7c7198fbeb48a32391936b5ca6f9695e7c611de72f9a322a02cf15e9f56857b89c69c477cd079672fcfe32b7824803dc3ba437ece346d1ac3ad4a08d1c35c24eacff6e5bd2b9e5018308ab2be349e6985b43abce2c9e29fa40b27c496c3b418894a07499a5148625fb1524e5d8cad5dce848c9116c3ae544c6265405db1de37c106391bd5d9aef17ab9f9030ae5f2b58a8e7a8589a8ae08ec0e4c0b71755d7b03d09fdf5539bafbdb4786fc876403e03731fee5cd5dd11952235b02e135b8a5c11a562bb166a4cc524dccecd135cc855af36b884f6ed2b5a478f60a528794b3ca344d90cfde85f6fd233fa4b3f14b7ecc5b7b3e13776202faefa060d419c09fe5118a49dd61a2a25a2b7116ae24981a611dfb51b3a03a6316e7db24e50ca5a017f353e8d48d42e277a21c5f363729f1a2d2413adea87bfad95ac89b487aac50733d70b0c51710eec8fea01ce3563df2ac2d8220eeeefac2284fb452438bd182050626d1ab5263f62c1e126b6121c56d0bf7ee06e6b36d42437052fe2e989689f49060ca0b920ccd59540410e932975e1f15ec2cae86564f7bcd939db91f9ed79af7a287a207cf090f5ac7ae1d890662696d2e6c44e02494e3fb0c31bf7e5755ff01fca26361e0165f9db8781a297fd9dfb9141eabb4369f7fd00dd26fa0aa3d40244c061e1598bebf92d696ade390b6a593b707fc04d0286a0ba9b115f36fdf22ab45a0a3df41ff3dbbde815eba0383d86c59b0e4ac38611fc48ea8c38a49a44aa31f937eef7a81c021ae7d0d2cd02ae18f70c2e21434a04d271549ebef7618202b32dcf117ba278c1cb252411a6d9895471fc294c0b1bfc4ce1445df1ca492cb79d7a669451e9ee2eed6b5d7406ba7c0c0b42929f7c00f476b87506cf7caec1f7a13ddf8974e7123d8dd8bc2cdb0816ff570f4a4508b38652ab874d188595a281be6e7f42e19efe4f4c7ce4d3ddb0e2ba0a2f1d71f4e26bc641ed92cf8978116bd355ab04dae78779017af72ed27e7f341ab9915ff6805e59c047f11c42b32c31cff974cd1ca2cc9d750f7aa6ddea205b2d43711092152a78c4112e0ad851259c1497ae8f861ef4d14af359dd9e1b6a58660d26fc3110d973ee174248dd5df76f8d0749f0b11d77ce84d1189749b85445eb3d57fbf450cc6ce024516b51cce7bb4896bb798ca056b870e6c211e7b02b0ed0003c842ec183cc8c0fa2e9df32734b1ba66d42357ed072cebe59f80bcb234c0b37c50cb92c39522c3c2ed54a8554e6547f8ece6cb1cb5b15d041cdc23ba294fca43bb83d74300b3ff5610f52a50af0c63cdd0511d45683664c59fa62b572e68b27c20fdb9d5c4f589a01d7ae865adfda56cf80e8bb8d15425a2489ea14ce673e57c69f198cb609bd31aa595c8f092591de7de62bebc76477078cd941e0fce697df0114ad8296704832e73321e8a074a07d50eec3d51e1408adfd21a8a64ca54d2cbd87d60ff69f413b04be6810ffb8dc7d01598f95e325896cb613a475a54f0dc34e72c0ad32c7ca8f20c8f9b5a36ea583062a282ec944b42253fb50faab6a00342afaed1ea714e3476230728a828e61f23882225841be6ef2ad29797f1054778e9afbf2a93b0314a732e9297b948585e9bb43613f0b47ce0fb702820d05330878c2da4b4ef0b77756ab9882dc1c8ef991364d8365cb5f1241c3391e38e5076e1142b19374ca93610ffcbc35ce2dd47c27763e19237a8a7176a3dfa5056a29d55dccc0631687465329b30cfd222571c7268c5b5612e1ce21b8b6c9cd08c40d2e9a10efa523573c1d37e0207652cf8d6c34e46200a46a2a285ac29985d38f0e73a213f6db1306601063597a702578c1d0066e8a18ee47c50ae7e7d5088a3a961b2185b106b37ac4820c2126eaac10769e9750f30e1e18d3372508fd9e29e1e7aa2d9ff46c9796648bf4b742f33b627af1e3c7583e6ad9b8ecf4fc70cfccf64843ac685d898e6b337c5ae48b95004186f814fd175c053fd090b54278f31c1ecbfd32902374d9cc8dca67e940e576f6f69eb3271892f4c454dd006b880beca5c66e58c553033d83433a26f2cfa6339a8893ec7168d0bbe8cff549ec5b6d19720202e331d163c2a825818263e6445573aee326f15b62bdf37c181544175aee0fe54482db83394055b30269939d2e13e1d67a8826e326e1baea47c4cd1461c41e27aed1d0d4ea2c728c5662565bae03ba19163909efeaa9c2ad1edcb46e6fe6a87b2a335fe32336e76e41d9dae86a6d87a6ee611e82dd23f2ba9ecf553412c5b61a2f08f25cf94c46ba58b83494fe4a6be9eb82022c50242eaf2d745cceaf2ad3a4886f81ee381dd27fdc519d109c3f4ba6da6f8443d46bf37e646fa5403969cda315a43cda7cd011a06c7152408be5140719c535ae458d2c8406260709e66fa35b27f4b25841af4deebc39cd7cf0152030521faca92f59a380ba3add9cb99d4f9cf9ee9547935a8823b094417566f297edd70105043f267389643a6dc1395281ba4d15fa050819b89c89a7518c48ff8eb4e42f128c300ff8318ecce7a8e1e9b5c6ee685f60bef37060b80bb73d96f97337cb7681d3f7f4b891bc5c976661d370b284cea191b18dca48070a239afe50fb5a11e3e4629d150ba8b3e9be56153124980194279f352b7fd89947d2eafdacb14e30db5e62ce55efe2fecfd70fc6ff1fd4a1d6bbd135994dea01993de4d18228e9d56dba08312a06bee5e93b6fc0ca7755f6374b30a2999e6d9792031a8bf77ecb187a41624f781362c6cbe4206fa29f6faf92553a3379c60ef3efed8b3d84cfea380be8c5c48f727eaaeae7d7410c72ea7b3a81c1c86c687252f3e9811dd845cb642d426e1322e8a5f1c0d688ef9abc6bbf33abd94c72a4d27a56950dcfc63b957c914f0afd701862a51cfbc64698e6c31d5c5f2d54758f33c4226f79dbf43175167b832180ab20e920401e1e907d317b7d778376014a9b2d158e78cfa0d598612364dc901f4b40e015e503edbde81e1ce568e7c699e9dec14bca3eb52f5f58e9d63b3ff9310bac09dbcb48bc76c9d5c1d9226036fbfc656a5be8841f44d4e5ff4bcd08a3a38749944b2b1b6f9cb3ae388f3813c0226c03c9e39307b2005dbfafe85e9ed4b5b22f2e7cb1e155792bae15545d60c1aa2da0d95580c4cb9413ee5aa2145583edfcaa013994a7d29a99e1973ac3449fce3b81cb4338bc69285cea390d3866f5bd19bc9c1d1616dff82709f4218f0ceb21dbd58c395d9d163bf84a5d80807383f6c3dc617509b251bf07c3d13af8192cc96801fc20e28a5e302f7065a4fa99bdbdeb2c811b04c3b390f536ffc902f438367d318f6107d00ea60bfa6ff14f34aa4f4cfe4a08c7176b5ad177b53378a5208446d576add13bd5cb43e9420531e7f4bdb3eb2827b4aa4ab29218725a380140407bc69a36e3668dc8d5a24bb6e9de39d671b965059c31c799c8c9e8882c7d6f563aa18631866232cb46e6248644167a329a470f56cb37869ec36d3fe0cad8f88ac9114d6f679f25dabe9665458d67f4b4717a056a7a8c5dfd54cba8f77095d743bed10752834b99dfb4e84945ceaf355240266ef0ddd96cb7148cf7f30bb2e286d1951243650b112fe90a6f99c3b870919ad3a25789005c4ecdb5742031ac695cf8a9bf96760e23edfcc161b8f7606b7ca5a7018489fa933842c5cae83554e0b8914d25ee9dbbb0db5a3fab43efbbe5af719ec7c0732da512cc2ccd405c31aedda851afacea92529bd300933abb8b9880ea0ca87e82eb3b4befc8cb54ea052f51d335653cd2c8885fc045b19e0e584ebf1e3d5dfb9d570225c99109d51995057775eab67dcade36f860be2acd6465ce2b1ac8938e6e1344b56a66aa33effed1edf03b8c09a43fc10d237a18a4e09689ed2a69202f2a6b9163b74e0b8688ae7cf6005dc65f449b3ac7f12e0643778c511254fe45a50d6204ef1e267da9dd914ed65de968d2672fe896eb1e6216c68e476d57839ddb30d66e353b57528b8e9709840c9c35e8f365f2dbaf110892cd87d334b5f8be0105bf334a4d6dd0c7159ba751bdb178f668d02a9d1d0d0415128984d175f824ce51115671a5e0120469800e16d443a0828833d49f23833629db424acc6a64830b68120aca6175422c6cf5b229f5494012e634db517857def820640757e61e827db605fa4e7cce4b8805a5cf7d64a2fdd301d2a87c74b557674ca846e02677633f28eb58383eddf10b5f6105009f3d567d8f6d0a50046c5852174aba3c167da0450d1a971fed760ae55c43c7291f19b7dbb9c9124a1ba81708782ffed2ce798171ccf7d61552edb83e454b460ac0813146f0501522bfbb6923d1f899655b5a963676dcd2bc2ea7d92a86a2e4326c9f0db3be449acda6b659aac1e5f2fa01a57722bc4604b05caabefc1bde10bb81e94a1862200c2027b24a7a84729250e6b18427160d89b679a7abd66689e0efdff654811a03ef9b0ed28ee9331753cd9bc19593d493020bd8a9d713ebb0fb78c2a5d7a366aae619f1c6ac383acfe0c800a0b31b2fc5e1ce4d8d543be5a192107b59fb1763fe3986441d8e77cee5cf96dbf9872a06ae6cab4c833e077892099d2c765ef099156bcebec28f0a7bb37cb010dc318589ee5b4f802030d5197f234826bb5a76c47f770774569776b27f0a32382f047a88c995dccb34466ac97861b917b0d94b62a85ad3b2fc4cca15bf1e4e995dc5854b50c9f28aafd8fea483107e87761cee84c4305ee6267f3ea6cca973329101bc35f1822a8c4046e0da3bee66d15dc8a8af03ca50fb1b8e81c254990ad0339015da8cb3ceb065898c5992af6592baa7dc2d026c1b6fbfe48e7bf2cd53df2d9cdf3d9808ad264e86178dd7df09217eb9034fb5b0f8d747f7d1b7f26c11bbcc72be51c92765fbecaf7eee8740c9f7ba2e0ddc6e0922e5ee45cce42a1289e4dd9c59e701ca049dc7c89ee7f12b7b5d29beb622df88f21d8b908b96edb0baf7cd14e4447f46288a38ea0c065199c09f1ac5084608c6c3c60f8dabe3d311ab0f91aac23937140852779bbda8983a4f6eaea75a6fc4cb215e7e33b6611eb1759fc4de3b3e1585c1c1bacc1a53c737cfede1690569b3b07c604914fe0d9ebf9318cc99c2db87310ed141be2cd8b948799c82606bbdd8a3d26b0dcf4ada8d0c5d4be8c69e492845679464818b8401dd5fb5173b33d7c68423331a5bc221ce278a406cc22f87cfda9c021801ae8cd87107166ee403721d4f47f0f2a1a4eee591788fcc01da4748fae098f2adc3c6ca113726b1c53b7c45949780509d219b12f5b254eaa3c4295427849cc8abfaee249662aba8096c9a61dceac1c8060148d337c74c31978a82be7622a793e9fd49e33acf0967731fd3abc56efac6d27bc18fac40f484290d26fb062cb5870ecd539c92b288cede90d05a57aefa5427224099719ee88aee176b24c8507508fd4505279719dc4a7502dbc9998d2395a489fd857be28077cc7bceeb1e1754213f90cdbb22725a9342d1ede7d3634a5efd5e9dc58f131d775c437062e30b6527b54475cefd40102593bd586e5d4b4e6abc7b358cb6b4b49366d929ca1b4e4c98fae94574d16ed84249f8d8f23c3c1c916dbe9bc3b5a9afb6acd23f3f7847856aaf0e4d345800fda8ef2fd0a6f040338ba15fdec32c54742ec3223e12e5ec3da201c6df80464858b4748ed72ad246219c57ddee4d16b281b775284fcb7c08c984582de9afd5a13e5e9dc3f9de97f7a31b1d233c11614cfe0d71e26b4a97ae177d118941aa7d9880dd74630b96590ad477339b60912c99788ee8f1fdd804785f40f5a094e6e79ebbbb7c0992765074c9fbe1084cc83a3b6225f8e3f15e4207677ec6731d3fa5a849be48</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是“12345678”</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-butterfly</title>
      <link href="2021/02/18/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
      <url>2021/02/18/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="个人博客搭建-Hexo"><a href="#个人博客搭建-Hexo" class="headerlink" title="个人博客搭建 Hexo"></a>个人博客搭建 Hexo</h1><h2 id="一、创建博客"><a href="#一、创建博客" class="headerlink" title="一、创建博客"></a>一、创建博客</h2><blockquote><p>先安装 <strong>git 和 node.js</strong></p></blockquote><blockquote><p>然后在你要保持博客的路径下执行下面命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli   <span class="comment"># 安装hexo</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init &lt;folder&gt;<span class="comment"># 安装博客</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> &lt;folder&gt;<span class="comment"># 进入到安装博客的路径</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install<span class="comment"># 安装npm</span></span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218112216.png" alt="image-20210218112210771"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218111819.png" alt="image-20210218111818131"></p><blockquote><p>然后进入到 xiaofanBlog/ 修改文件</p></blockquote><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218113450.png" alt="image-20210218113449005" style="zoom:150%;" /><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218112801.png" alt="image-20210218112759252"></p><blockquote><p>然后执行命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;$ npm install hexo-deployer-git --save</span><br><span class="line">&gt;$ hexo d</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218113755.png" alt="image-20210218113752927"></p></blockquote><p>如果不行重新输入 hexo d</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218114336.png" alt="image-20210218114333983"></p><blockquote><p>上面就已经上传到了github仓库了</p><p>下面就是怎么修改主题</p></blockquote><hr><blockquote><p>如果你没有设置 git 的邮箱和用户名则在</p><p>hexo d 时会出现下面提示</p><p>只需要设置邮箱和用户名即可</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/tCTxUb8v7EpJXIe.png" alt="image-20210310144318638"></p><h2 id="二、修改主题"><a href="#二、修改主题" class="headerlink" title="二、修改主题"></a>二、修改主题</h2><p>从 hexo<strong>主题</strong> 官网下载主题，直接 git clone 即可</p><p>然后就是把主题放到博客文件夹 themes里面，重命名</p><p>然后在 _config.yml 中修改主题（注意名称要和 themes 里面的主题文件夹一致）</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218142237.png" alt="image-20210218142059021"></p><p>保存之后用重新部署一下如图</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218142514.png" alt="image-20210218142512671"  /><p>如果出现了下面这个问题</p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210218142548.png" alt="image-20210218142546760" style="zoom:80%;" /><p>解决方案输入下面命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-pug hexo-renderer-stylus --save</span></span><br></pre></td></tr></table></figure><p>清理缓存代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br></pre></td></tr></table></figure><hr><h2 id="三、主题美化"><a href="#三、主题美化" class="headerlink" title="三、主题美化"></a>三、主题美化</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n page tags</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">然后找到source/tags/index.md文件</span><br><span class="line">修改为</span><br><span class="line">---</span><br><span class="line">title: 標籤</span><br><span class="line">date: 2018-01-05 00:00:00 # 不动</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">top_img: # 图片</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo n page categories</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">同样找到source/categories/index.md文件</span><br><span class="line">修改为</span><br><span class="line">---</span><br><span class="line">title: 分類</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h3 id="代码主题和能否Copy"><a href="#代码主题和能否Copy" class="headerlink" title="代码主题和能否Copy"></a>代码主题和能否Copy</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">highlight_theme: pale night #  darker / pale night / light / ocean / mac / mac light / false</span><br><span class="line">highlight_copy: true # 能否复制</span><br><span class="line">highlight_lang: true # show the code language</span><br><span class="line">highlight_shrink: false # true 全部代碼框不展開，需点击&gt;打開false 代碼狂展開，有&gt;點擊按鈕 none 不顯示&gt;按鈕</span><br><span class="line">code_word_wrap: false # 代码换行</span><br></pre></td></tr></table></figure><h3 id="主页标签页等图片设置"><a href="#主页标签页等图片设置" class="headerlink" title="主页标签页等图片设置"></a>主页标签页等图片设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 主题配置文件</span><br><span class="line"><span class="meta">#</span><span class="bash"> Disable all banner image</span></span><br><span class="line">disable_top_img: false # 显示顶部图为 false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 顶部图</span></span><br><span class="line">index_img: /img/背景.jpg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认的top_img，当页面的top_img 没有配置时，会显示default_top_img</span></span><br><span class="line">default_top_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 归档页面的top_img</span></span><br><span class="line">archive_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag 子页面的默认top_img</span></span><br><span class="line">tag_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> tag 子页面的top_img，可配置每个 tag 的 top_img</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - tag name: xxxxx</span></span><br><span class="line">tag_per_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> category 子页面的默认top_img</span></span><br><span class="line">category_img:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> category 子页面的top_img，可配置每个category 的top_img</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  - category name: xxxxx</span></span><br><span class="line">category_per_img:</span><br></pre></td></tr></table></figure><h3 id="文章图片设置"><a href="#文章图片设置" class="headerlink" title="文章图片设置"></a>文章图片设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">cover:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> display the cover or not (是否顯示文章封面)</span></span><br><span class="line">  index_enable: true # 在主页</span><br><span class="line">  aside_enable: true # 在文章页</span><br><span class="line">  archives_enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> the position of cover <span class="keyword">in</span> home page (封面顯示的位置)</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> left/right/both</span></span><br><span class="line">  position: left # 图片在左边</span><br><span class="line"><span class="meta">  #</span><span class="bash"> When cover is not <span class="built_in">set</span>, the default cover is displayed (當沒有設置cover時，默認的封面顯示)</span></span><br><span class="line">  default_cover:</span><br><span class="line">    #- https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span><br></pre></td></tr></table></figure><h3 id="文章在主页展示的字数"><a href="#文章在主页展示的字数" class="headerlink" title="文章在主页展示的字数"></a>文章在主页展示的字数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line">index_post_content:</span><br><span class="line">  method: 3</span><br><span class="line">  length: 200 # 预览多少。0 就没有了</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如200</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220094718.png" alt="image-20210220094717060"></p><h3 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h3><blockquote><p>直接在文章的front-matter区域里添加sticky: 1属性来把这篇文章置顶。数值越大，置顶的优先级越大。</p></blockquote><h3 id="文章主页和阅读页显示"><a href="#文章主页和阅读页显示" class="headerlink" title="文章主页和阅读页显示"></a>文章主页和阅读页显示</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 主题配置</span><br><span class="line">post_meta:</span><br><span class="line">  page: # Home Page</span><br><span class="line">    date_type: both # created or updated or both 主頁文章日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 主頁是否顯示分類</span><br><span class="line">    tags: true # true or false 主頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br><span class="line">  post:</span><br><span class="line">    date_type: both # created or updated or both 文章頁日期是創建日或者更新日或都顯示</span><br><span class="line">    date_format: date # date/relative 顯示日期還是相對日期</span><br><span class="line">    categories: true # true or false 文章頁是否顯示分類</span><br><span class="line">    tags: true # true or false 文章頁是否顯示標籤</span><br><span class="line">    label: true # true or false 顯示描述性文字</span><br></pre></td></tr></table></figure><h3 id="文章阅读页显示目录"><a href="#文章阅读页显示目录" class="headerlink" title="文章阅读页显示目录"></a>文章阅读页显示目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> toc (目錄)</span></span><br><span class="line">toc:</span><br><span class="line">  enable: true</span><br><span class="line">  number: true</span><br><span class="line">  style_simple: false</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220104649.png" alt="image-20210220104648888"></p><blockquote><p>特定文章也可以设定是否显示目录</p><p>在文章头部添加</p><p>toc_number和toc，配置为 true 和 false</p></blockquote><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><blockquote><p>相关文章推荐的原理是根据文章tags的比重来推荐</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Related Articles</span></span><br><span class="line">related_post:</span><br><span class="line">  enable: true</span><br><span class="line">  limit: 5 # 篇数</span><br><span class="line">  date_type: created # or created or updated 文章日期顯示創建日或者更新日</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="文章描点"><a href="#文章描点" class="headerlink" title="文章描点"></a>文章描点</h3><blockquote><p>开启文章锚点后，当你在文章页进行滚动时，文章链接会根据标题ID进行替换<br>(注意:每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> anchor</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> when you scroll <span class="keyword">in</span> post, the URL will update according to header id.</span></span><br><span class="line">anchor: true</span><br></pre></td></tr></table></figure><h3 id="文章编辑按钮"><a href="#文章编辑按钮" class="headerlink" title="文章编辑按钮"></a>文章编辑按钮</h3><blockquote><p>在文章标题旁边显示一个编辑按钮，点击会跳转到对应的链接去。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post edit</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Easily browse and edit blog <span class="built_in">source</span> code online.</span></span><br><span class="line">post_edit:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> url: https://github.com/755400668/755400668.github/edit/main/<span class="built_in">source</span>/</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> For example: https://github.com/jerryc127/butterfly.js.org/edit/main/<span class="built_in">source</span>/</span></span><br><span class="line">  url: https://github.com/755400668/755400668.github/edit/main/source/</span><br></pre></td></tr></table></figure><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> </span></span><br><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: true # 显示中文网址</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure><p>如果想要某偏文章不显示版权，在文章标题添加<strong>copyright: false</strong> 即可</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220103922.png" alt="image-20210220103920494"></p><h3 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Sponsor/reward</span></span><br><span class="line">reward:</span><br><span class="line">  enable: true</span><br><span class="line">  QR_code:</span><br><span class="line">    - img: /img/wechat.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: wechat</span><br><span class="line">    - img: /img/alipay.jpg</span><br><span class="line">      link:</span><br><span class="line">      text: alipay</span><br></pre></td></tr></table></figure><h3 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Avatar (頭像)</span></span><br><span class="line">avatar:</span><br><span class="line">  img: /img/wechat.gif</span><br><span class="line">  effect: false # 转圈</span><br></pre></td></tr></table></figure><h3 id="网站内容是否可以复制"><a href="#网站内容是否可以复制" class="headerlink" title="网站内容是否可以复制"></a>网站内容是否可以复制</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> copy settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> copyright: Add the copyright information after copied content (複製的內容後面加上版權信息)</span></span><br><span class="line">copy:</span><br><span class="line">  enable: true</span><br><span class="line">  copyright:</span><br><span class="line">    enable: true</span><br><span class="line">    limit_count: 500</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220110231.png" alt="image-20210220110230870"></p><h3 id="页脚设置"><a href="#页脚设置" class="headerlink" title="页脚设置"></a>页脚设置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Footer Settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line">footer:</span><br><span class="line">  owner:</span><br><span class="line">    enable: true</span><br><span class="line">    since: 2021</span><br><span class="line">  custom_text: 愿世间美好与你环环相扣</span><br><span class="line">  copyright: true # Copyright of theme and framework</span><br></pre></td></tr></table></figure><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> dark mode</span></span><br><span class="line">darkmode:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Toggle Button to switch dark/light mode</span></span><br><span class="line">  button: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Switch dark/light mode automatically (自動切換 dark mode和 light mode)</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: 1  Following System Settings, <span class="keyword">if</span> the system doesn<span class="string">&#x27;t support dark mode, it will switch dark mode between 6 pm to 6 am</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: 2  Switch dark mode between 6 pm to 6 am</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> autoChangeMode: <span class="literal">false</span></span></span><br><span class="line">  autoChangeMode: 1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220110817.png" alt="image-20210220110816979"></p><h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Read Mode (閲讀模式)</span></span><br><span class="line">readmode: true</span><br></pre></td></tr></table></figure><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Bottom right button (右下角按鈕)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Change font size</span></span><br><span class="line">change_font_size: true</span><br></pre></td></tr></table></figure><h3 id="访问人数"><a href="#访问人数" class="headerlink" title="访问人数"></a>访问人数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> busuanzi count <span class="keyword">for</span> PV / UV <span class="keyword">in</span> site</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 訪問人數</span></span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> aside (側邊欄)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line"></span><br><span class="line">aside:</span><br><span class="line">  enable: true</span><br><span class="line">  hide: false</span><br><span class="line">  button: true</span><br><span class="line">  mobile: true # display on mobile</span><br><span class="line">  position: right # 右边显示</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 头像卡片</span></span><br><span class="line">  card_author:</span><br><span class="line">    enable: true</span><br><span class="line">    description:</span><br><span class="line">    button:</span><br><span class="line">      enable: true</span><br><span class="line">      icon: fab fa-github</span><br><span class="line">      text: Github</span><br><span class="line">      link: https://github.com/755400668</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 公告卡片</span></span><br><span class="line">  card_announcement:</span><br><span class="line">    enable: true</span><br><span class="line">    content: 欢迎来到灰灰爱吃小云朵的博客</span><br><span class="line"></span><br><span class="line">  card_recent_post:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 5 # if set 0 will show all</span><br><span class="line">    sort: date # date or updated</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 分类卡片</span></span><br><span class="line">  card_categories:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    expand: none # none/true/false</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 标签卡片</span></span><br><span class="line">  card_tags:</span><br><span class="line">    enable: true</span><br><span class="line">    limit: 40 # if set 0 will show all</span><br><span class="line">    color: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_archives:</span><br><span class="line">    enable: true</span><br><span class="line">    type: monthly # yearly or monthly</span><br><span class="line">    format: MMMM YYYY # eg: YYYY年MM月</span><br><span class="line">    order: -1 # Sort of order. 1, asc for ascending; -1, desc for descending</span><br><span class="line">    limit: 8 # if set 0 will show all</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br><span class="line">  card_webinfo:</span><br><span class="line">    enable: false</span><br><span class="line">    post_count: true</span><br><span class="line">    last_push_date: true</span><br><span class="line">    sort_order: # Don&#x27;t modify the setting unless you know how it works</span><br></pre></td></tr></table></figure><h3 id="访问人数-1"><a href="#访问人数-1" class="headerlink" title="访问人数"></a>访问人数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> busuanzi count <span class="keyword">for</span> PV / UV <span class="keyword">in</span> site</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 訪問人數</span></span><br><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br></pre></td></tr></table></figure><h3 id="网站运行时间"><a href="#网站运行时间" class="headerlink" title="网站运行时间"></a>网站运行时间</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Time difference between publish date and now (網頁運行時間)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Formal: Month/Day/Year Time or Year/Month/Day Time</span></span><br><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 02/18/2021</span><br></pre></td></tr></table></figure><h3 id="Tag-hide"><a href="#Tag-hide" class="headerlink" title="Tag-hide"></a>Tag-hide</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220112432.png" alt="image-20210220112431535"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220112517.png" alt="image-20210220112516336"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210220112533.png" alt="image-20210220112530047"></p><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> gitalk</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/gitalk/gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  client_id: aa776ef94071498f6753</span><br><span class="line">  client_secret: 1cbad93b480c8980863bbfcf1fd8926c2fdd9863</span><br><span class="line">  repo: 755400668.github.io</span><br><span class="line">  owner: 755400668</span><br><span class="line">  admin: 755400668</span><br><span class="line">  language: zh-CN # en, zh-CN, zh-TW, es-ES, fr, ru</span><br><span class="line">  perPage: 10 # Pagination size, with maximum 100.</span><br><span class="line">  distractionFreeMode: false # Facebook-like distraction free mode.</span><br><span class="line">  pagerDirection: last # Comment sorting direction, available values are last and first.</span><br><span class="line">  createIssueManually: false # Gitalk will create a corresponding github issue for your every single page automatically</span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>然后主题配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Local search</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="UI颜色"><a href="#UI颜色" class="headerlink" title="UI颜色"></a>UI颜色</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> theme_color:</span></span><br><span class="line">  enable: true</span><br><span class="line">  main: &quot;#49B1F5&quot;</span><br><span class="line">  paginator: &quot;#00c4b6&quot;</span><br><span class="line">  button_hover: &quot;#FF7242&quot;</span><br><span class="line">  text_selection: &quot;#00c4b6&quot;</span><br><span class="line">  link_color: &quot;#99a9bf&quot;</span><br><span class="line">  meta_color: &quot;#858585&quot;</span><br><span class="line">  hr_color: &quot;#A4D8FA&quot;</span><br><span class="line">  code_foreground: &quot;#F47466&quot;</span><br><span class="line">  code_background: &quot;rgba(27, 31, 35, .05)&quot;</span><br><span class="line">  toc_color: &quot;#00c4b6&quot;</span><br><span class="line">  blockquote_padding_color: &quot;#49b1f5&quot;</span><br><span class="line">  blockquote_background_color: &quot;#49b1f5&quot;</span><br></pre></td></tr></table></figure><h3 id="图片加载动画"><a href="#图片加载动画" class="headerlink" title="图片加载动画"></a>图片加载动画</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lazyload (圖片懶加載)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/verlok/lazyload</span></span><br><span class="line">lazyload:</span><br><span class="line">  enable: true</span><br><span class="line">  post: /img/loading1.gif</span><br></pre></td></tr></table></figure><h3 id="网站背景"><a href="#网站背景" class="headerlink" title="网站背景"></a>网站背景</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Website Background (設置網站背景)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> can <span class="built_in">set</span> it to color or image (可設置圖片 或者 顔色)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line">background:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 页脚显示和首页一样</span></span><br><span class="line">footer_bg: true</span><br></pre></td></tr></table></figure><h3 id="鼠标聚集几何图形"><a href="#鼠标聚集几何图形" class="headerlink" title="鼠标聚集几何图形"></a>鼠标聚集几何图形</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> canvas_nest</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line">canvas_nest:</span><br><span class="line">  enable: true</span><br><span class="line">  color: &#x27;0,0,255&#x27; #color of lines, default: &#x27;0,0,0&#x27;; RGB values: (R,G,B).(note: use &#x27;,&#x27; to separate.)</span><br><span class="line">  opacity: 0.7 # the opacity of line (0~1), default: 0.5.</span><br><span class="line">  zIndex: -1 # z-index property of the background, default: -1.</span><br><span class="line">  count: 199 # the number of lines, default: 99.</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h3 id="鼠标点击效果"><a href="#鼠标点击效果" class="headerlink" title="鼠标点击效果"></a>鼠标点击效果</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Mouse click effects: Heart symbol (鼠標點擊效果: 愛心)</span></span><br><span class="line">click_heart:</span><br><span class="line">  enable: true</span><br><span class="line">  mobile: true</span><br></pre></td></tr></table></figure><h3 id="页面美化"><a href="#页面美化" class="headerlink" title="页面美化"></a>页面美化</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Default display mode (網站默認的顯示模式)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> light (default) / dark</span></span><br><span class="line">display_mode: light</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Beautify (美化頁面顯示)</span></span><br><span class="line">beautify:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> post 只在文章頁生效</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> site 在全站生效</span></span><br><span class="line">  field: sist # site/post</span><br><span class="line">  title-prefix-icon: &#x27;\f0c1&#x27;</span><br><span class="line">  title-prefix-icon-color: &#x27;#F47466&#x27;</span><br></pre></td></tr></table></figure><h3 id="主页打字"><a href="#主页打字" class="headerlink" title="主页打字"></a>主页打字</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> the subtitle on homepage (主頁subtitle)</span></span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Typewriter Effect (打字效果)</span></span><br><span class="line">  effect: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> loop (循環打字)</span></span><br><span class="line">  loop: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>調用第三方服務</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="built_in">source</span>: <span class="literal">true</span> <span class="comment"># 關閉調用</span></span></span><br><span class="line">  source: 1 # 調用搏天api的隨機語錄（簡體）</span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 2  調用一言網的一句話（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 3  調用一句網（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> <span class="built_in">source</span>: 4  調用今日詩詞（簡體）</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> subtitle 會先顯示 <span class="built_in">source</span> , 再顯示 sub 的內容</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"><span class="built_in">source</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果有英文逗號<span class="string">&#x27; , &#x27;</span>,請使用轉義字元 &amp;<span class="comment">#44;</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果有英文雙引號<span class="string">&#x27; &quot; &#x27;</span>,請使用轉義字元 &amp;quot;</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 開頭不允許轉義字元，如需要，請把整個句子用雙引號包住</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 如果關閉打字效果，subtitle只會顯示sub的第一行文字</span></span><br><span class="line">  sub: </span><br></pre></td></tr></table></figure><h3 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-offline --save</span><br></pre></td></tr></table></figure><h3 id="字数统计"><a href="#字数统计" class="headerlink" title="字数统计"></a>字数统计</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wordcount (字數統計)</span></span><br><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><h3 id="图片放大模式"><a href="#图片放大模式" class="headerlink" title="图片放大模式"></a>图片放大模式</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Lightbox (圖片大圖查看模式)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --------------------------------------</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> You can only choose one, or neither (只能選擇一個 或者 兩個都不選)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> medium-zoom</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line">medium_zoom: false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> fancybox</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://fancyapps.com/fancybox/3/</span></span><br><span class="line">fancybox: true</span><br></pre></td></tr></table></figure><h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Snackbar (Toast Notification 彈窗)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> position 彈窗位置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可選 top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line">snackbar:</span><br><span class="line">  enable: true</span><br><span class="line">  position: bottom-left</span><br><span class="line">  bg_light: &#x27;#ffc0cb&#x27; # The background color of Toast Notification in light mode</span><br><span class="line">  bg_dark: &#x27;#121212&#x27; # The background color of Toast Notification in dark mode</span><br></pre></td></tr></table></figure><h3 id="修改背景"><a href="#修改背景" class="headerlink" title="修改背景"></a>修改背景</h3><ol><li><p>引入一个新的 CSS 文件</p></li><li><p>使用 js 文件</p><p> 但是会在一定程度上延缓网页的加载时间，且修改复杂</p></li></ol><p><strong>下面使用第一种方案</strong></p><ol><li><p>\themes\hexo-theme-butterfly\source\css<br> 目录下新建 <strong>background.css</strong> </p><blockquote><p>或者你可以在 css 目录下创建一个自己写的新文件夹如（mycss），然后在该目录下创建<strong>background.css</strong> </p></blockquote></li><li><p>编辑<br> butterfly 主题的背景 div 的 id 是 <strong>web_bg</strong> </p><ul><li><p>修改为图片</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">  /* 背景图像的地址（url括号里）  */</span><br><span class="line">  background: url();</span><br><span class="line">  /* 背景图像不重复 */</span><br><span class="line">  background-repeat: no-repeat;</span><br><span class="line">  /* 背景图像大小 */</span><br><span class="line">  background-size: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background-repeat 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-repeat</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关于 background-size 更多用法：https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-size</span></span><br></pre></td></tr></table></figure></li><li><p>修改为渐变背景（如下几种）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 蓝红色渐变</span><br><span class="line">#web_bg &#123;</span><br><span class="line">  &#x2F;* webkit内核 5.1 - 6.0 *&#x2F;</span><br><span class="line">  background: -webkit-linear-gradient(left, red, blue);</span><br><span class="line">  &#x2F;* Opera 11.1 - 12.0 *&#x2F;</span><br><span class="line">  background: -o-linear-gradient(right, red, blue);</span><br><span class="line">  &#x2F;* Firefox 3.6 - 15 *&#x2F;</span><br><span class="line">  background: -moz-linear-gradient(right, red, blue);</span><br><span class="line">  &#x2F;* 标准的语法 *&#x2F;</span><br><span class="line">  background: linear-gradient(to right, red, blue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">    background: linear-gradient(102.7deg,#fddaff 8.2%,#dfadfc 19.6%,#adcdfc 36.8%,#adfcf4 73.2%,#caf8d0 90.9%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 紫蓝色渐变</span></span><br><span class="line"><span class="meta">#</span><span class="bash">web_bg &#123;</span></span><br><span class="line">    background: linear-gradient(to right bottom, rgb(0, 255, 240), rgb(92, 159, 247) 40%, rgb(211, 34, 255) 80%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 图片滤镜渐变</span></span><br><span class="line"><span class="meta">#</span><span class="bash">web_bg&#123;</span></span><br><span class="line">    background-image: url(&quot;https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png&quot;), linear-gradient(60deg, rgba(255, 165, 150, 0.5) 5%, rgba(0, 228, 255, 0.35)), url(&quot;https://ae01.alicdn.com/kf/H21b5f6b8496141a1979a33666e1074d9x.jpg&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>更多的渐变网址</p><p><a href="https://webgradients.com/">https://webgradients.com/</a></p><p><a href="https://www.grabient.com/">https://www.grabient.com/</a></p></blockquote></li></ul></li><li><p>最后将文件引入</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Inject</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Insert the code to head (before <span class="string">&#x27;&lt;/head&gt;&#x27;</span> tag) and the bottom (before <span class="string">&#x27;&lt;/body&gt;&#x27;</span> tag)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span></span><br><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/mycss/background.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line">    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221120248.png" alt="image-20210221120247170"></p></li></ol><blockquote><p>如果没有生效的话修改如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># 主题配置文件</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># Website Background (設置網站背景)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># can set it to color or image (可設置圖片 或者 顔色)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"><span class="comment"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">background: <span class="string">&quot;#efefef&quot;</span></span></span><br></pre></td></tr></table></figure></blockquote><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><blockquote><p>同样的和上面修改背景一样，新建一个css文件如我的</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221122105.png" alt="image-20210221122103774"></p><blockquote><p>下面在某博主上面看到两种样式</p></blockquote><ul><li><p>渐变</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">/* 页脚footer */</span><br><span class="line">/* 渐变色滚动动画 */</span><br><span class="line">@-webkit-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-moz-keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes Gradient &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    50% &#123;</span><br><span class="line">        background-position: 100% 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100% &#123;</span><br><span class="line">        background-position: 0 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">footer &#123;</span></span><br><span class="line">    background: linear-gradient(-45deg, #ee7752, #ce3e75, #23a6d5, #23d5ab);</span><br><span class="line">    background-size: 400% 400%;</span><br><span class="line">    -webkit-animation: Gradient 10s ease infinite;</span><br><span class="line">    -moz-animation: Gradient 10s ease infinite;</span><br><span class="line">    animation: Gradient 10s ease infinite;</span><br><span class="line">    -o-user-select: none;</span><br><span class="line">    -ms-user-select: none;</span><br><span class="line">    -webkit-user-select: none;</span><br><span class="line">    -moz-user-select: none;</span><br><span class="line">    user-select: none;</span><br><span class="line">    border-top-left-radius: 10px;</span><br><span class="line">    border-top-right-radius: 10px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash">footer:before &#123;</span></span><br><span class="line">    background-color: rgba(0, 0, 0, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>半透明</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">footer &#123;</span></span><br><span class="line">    background: rgba(255,255,255,.15);</span><br><span class="line">    color: #000;</span><br><span class="line">    border-top-right-radius: 20px;</span><br><span class="line">    border-top-left-radius: 20px;</span><br><span class="line">    backdrop-filter: saturate(100%) blur(5px)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer::before &#123;</span></span><br><span class="line">    background: rgba(255,255,255,.15)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer <span class="comment">#footer-wrap &#123;</span></span></span><br><span class="line">    color: var(--font-color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">footer <span class="comment">#footer-wrap a &#123;</span></span></span><br><span class="line">    color: var(--font-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>然后引入即可</p></blockquote></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221122344.png" alt="image-20210221122343300"></p><h3 id="手机侧边栏默认不展开"><a href="#手机侧边栏默认不展开" class="headerlink" title="手机侧边栏默认不展开"></a>手机侧边栏默认不展开</h3><blockquote><p>新建 js 文件即可，然后引入</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221124518.png" alt="image-20210221124517652"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221124539.png" alt="image-20210221124538405"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var mobile_sidebar_menus = document.getElementById(&quot;mobile-sidebar-menus&quot;);</span><br><span class="line">var menus_item_child = mobile_sidebar_menus.getElementsByClassName(</span><br><span class="line">    &quot;menus_item_child&quot;</span><br><span class="line">);</span><br><span class="line">var menus_expand = mobile_sidebar_menus.getElementsByClassName(&quot;menus-expand&quot;);</span><br><span class="line">for (var i = 0; i &lt; menus_item_child.length; i++) &#123;</span><br><span class="line">    menus_item_child[i].style.display = &quot;none&quot;;</span><br><span class="line">    menus_expand[i].className += &quot; menus-closed&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加入clustrmaps访问者地图"><a href="#加入clustrmaps访问者地图" class="headerlink" title="加入clustrmaps访问者地图"></a>加入clustrmaps访问者地图</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221175024.png" alt="image-20210221175020256"></p><blockquote><p><a href="https://clustrmaps.com/">clustrmaps.com</a></p><p>注册账号或直接登录</p></blockquote><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221175157.png" alt="image-20210221175156007"></p><blockquote><p>填写你的网址然后会看到代码，一种是JS一种是HTML的，这里我选用HTML的</p></blockquote><p>先在主题配置文件加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">card_maps: true</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221181520.png" alt="image-20210221181519652"></p><p>然后在 </p><p>themes\hexo-theme-butterfly\layout\includes\widget</p><p>路径下创建一个文件 如 <strong>card_maps.pug</strong> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-map</span><br><span class="line">    .card-content</span><br><span class="line">        .item-headline</span><br><span class="line">            i.fa.fa-map-marker(aria-hidden=&quot;true&quot;)</span><br><span class="line">            span= _p(&#x27;足迹&#x27;)</span><br><span class="line">    # 这里是你复制过来的代码</span><br><span class="line">    &lt;a href=&#x27;https://clustrmaps.com/site/1bgca&#x27;  title=&#x27;Visit tracker&#x27;&gt;&lt;img src=&#x27;//clustrmaps.com/map_v2.png?cl=ffffff&amp;w=300&amp;t=tt&amp;d=Ti7plTQaKk8zjpyoUXfK29uCDrIzNldAuvoLvSLy1bU&amp;ct=ffffff&amp;co=2d78ad&#x27;/&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221181857.png" alt="image-20210221181856529"></p><p>然后在 widget/ 目录下找得到 index.png 加上下面代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_maps</span><br><span class="line">    !=partial(&#x27;includes/widget/card_maps&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br></pre></td></tr></table></figure><p>如图</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210221182140.png" alt="image-20210221182139515"></p><h3 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h3><ol><li><p>首先去 leadcloud 国际版注册一个账号<a href="https://leancloud.app/">Leadcloud国际版</a> 。</p></li><li><p>然后创建应用</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222103608.png" alt="image-20210222103607671"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222103806.png" alt="image-20210222103804648"></p></li><li><p>创建class</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222104008.png" alt="image-20210222104007668"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222104130.png" alt="image-20210222104129170"></p></li><li><p>找到用户栏添加用户</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222104218.png" alt="image-20210222104217236"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222104320.png" alt="image-20210222104319685"></p></li><li><p>然后修改访问权限</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222104638.png" alt="image-20210222104636441"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222104744.png" alt="image-20210222104743842"></p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222104849.png" alt="image-20210222104848202"></p><blockquote><p>把 _User 的权限全部设置为指定用户但不添加，就是为了没有用户可以修改，防止别人通过 id 和 key 篡改我们用户数据</p><p>即上一步添加用户就是这么个作用</p><p>Leancloud的配置就告一段落了</p></blockquote></li><li><p>然后在主题配置文件中填写 Leancloud 信息</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> valine</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> https://valine.js.org</span></span><br><span class="line">valine:</span><br><span class="line">  appId:  # leancloud application app id</span><br><span class="line">  appKey:  # leancloud application app key</span><br><span class="line">  pageSize: 10 # comment list page size</span><br><span class="line">  avatar: monsterid # gravatar style https://valine.js.org/#/avatar</span><br><span class="line">  lang: zh-CN # i18n: zh-CN/zh-TW/en/ja</span><br><span class="line">  placeholder: Please leave your footprints # valine comment input placeholder (like: Please leave your footprints)</span><br><span class="line">  guest_info: nick,mail # valine comment header info (nick/mail/link)</span><br><span class="line">  recordIP: false # Record reviewer IP</span><br><span class="line">  serverURLs: # This configuration is suitable for domestic custom domain name users, overseas version will be automatically detected (no need to manually fill in)</span><br><span class="line">  bg: # valine background</span><br><span class="line">  emojiCDN: # emoji CDN</span><br><span class="line">  enableQQ: true # enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class="line">  requiredFields: nick,mail # required fields (nick/mail)</span><br><span class="line">  visitor: false</span><br><span class="line">  option:</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最后不要忘记打开这个</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222165836.png" alt="image-20210222165835011"></p></li></ol><h3 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure><p>然后在文章的头部写上，如下例子</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210222165511.png" alt="image-20210222165510117"></p><h3 id="顶部标签页顶部图片"><a href="#顶部标签页顶部图片" class="headerlink" title="顶部标签页顶部图片"></a>顶部标签页顶部图片</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE配置</title>
      <link href="2021/02/18/IDE%E9%85%8D%E7%BD%AE/"/>
      <url>2021/02/18/IDE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Vscode"><a href="#Vscode" class="headerlink" title="Vscode"></a>Vscode</h1><ol><li><p>preLaunchTask”C/C++: gcc.exe 生成活动文件”已终止，退出代码为 -1</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210528181104.png" alt="image-20210528180610075"></p><p>点击仍要调试后出现下图情况</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210528180841.png" alt="image-20210528180841101"></p><blockquote><p>只需要修改 tasks.json 中一个地方</p><p>即 “command”: 处修改为 g++.exe</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// launch.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;gcc.exe - 生成和调试活动文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;D:\\Program Files\\RELY\\x86_64-8.1.0-release-posix-sjlj-rt_v6-rev0\\mingw64\\bin\\gdb.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">&quot;description&quot;</span>: <span class="string">&quot;为 gdb 启用整齐打印&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tasks.json</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppbuild&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;label&quot;</span>: <span class="string">&quot;C/C++: gcc.exe 生成活动文件&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;command&quot;</span>: <span class="string">&quot;g++.exe&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-g&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-o&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;options&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;detail&quot;</span>: <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><h2 id="常用设置"><a href="#常用设置" class="headerlink" title="常用设置"></a>常用设置</h2><h3 id="设置鼠标滚轮调节字体大小"><a href="#设置鼠标滚轮调节字体大小" class="headerlink" title="设置鼠标滚轮调节字体大小"></a>设置鼠标滚轮调节字体大小</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210205192659.png" alt="image-20210205145421119"></p><h3 id="鼠标悬浮在代码有提示"><a href="#鼠标悬浮在代码有提示" class="headerlink" title="鼠标悬浮在代码有提示"></a>鼠标悬浮在代码有提示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210205192838.png" alt="image-20210205192838603"></p><h3 id="自动导包和优化多余包"><a href="#自动导包和优化多余包" class="headerlink" title="自动导包和优化多余包"></a>自动导包和优化多余包</h3><p>手动导包：Ant + Enter<br>自动导包：<img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210205193817.png" alt="image-20210205193548380"  /></p><h3 id="同一个包下的类，超过指定个数导包合并为"><a href="#同一个包下的类，超过指定个数导包合并为" class="headerlink" title="同一个包下的类，超过指定个数导包合并为 *"></a>同一个包下的类，超过指定个数导包合并为 *</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206105017.png" alt="image-20210206105012613"></p><h3 id="显示行号和方法之间分隔符"><a href="#显示行号和方法之间分隔符" class="headerlink" title="显示行号和方法之间分隔符"></a>显示行号和方法之间分隔符</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206105301.png" alt="image-20210206105259327"></p><h3 id="忽略大小写提示"><a href="#忽略大小写提示" class="headerlink" title="忽略大小写提示"></a>忽略大小写提示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206105455.png" alt="image-20210206105451278"></p><h3 id="多个类不隐藏，多行显示"><a href="#多个类不隐藏，多行显示" class="headerlink" title="多个类不隐藏，多行显示"></a>多个类不隐藏，多行显示</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206110014.png" alt="image-20210206110012776"></p><h3 id="设置默认字体，大小，行间距（编辑区和控制台都会变化）"><a href="#设置默认字体，大小，行间距（编辑区和控制台都会变化）" class="headerlink" title="设置默认字体，大小，行间距（编辑区和控制台都会变化）"></a>设置默认字体，大小，行间距（编辑区和控制台都会变化）</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206110331.png" alt="image-20210206110330073"></p><h3 id="修改注释"><a href="#修改注释" class="headerlink" title="修改注释"></a>修改注释</h3><center class = "half"><img src = "https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206113813.png" width = "464" /><img src = "https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206114352.png" width = "464" /></center><h3 id="设置类头的文档注释信息"><a href="#设置类头的文档注释信息" class="headerlink" title="设置类头的文档注释信息"></a>设置类头的文档注释信息</h3>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @ Author: xxx</span></span><br><span class="line"><span class="comment">* @ Date: $&#123;DATE&#125; - $&#123;TIME&#125;</span></span><br><span class="line"><span class="comment">* @ Description: $&#123;PACKAGE_NAME&#125;</span></span><br><span class="line"><span class="comment">* @ Version: 1.0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>   <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206115655.png" alt="image-20210206115654047"></p><h3 id="设置文件编码格式默认全选为-UTF-8"><a href="#设置文件编码格式默认全选为-UTF-8" class="headerlink" title="设置文件编码格式默认全选为 UTF-8"></a>设置文件编码格式默认全选为 UTF-8</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206120422.png" alt="image-20210206120420884"></p><h3 id="自动编译"><a href="#自动编译" class="headerlink" title="自动编译"></a>自动编译</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206120752.png" alt="image-20210206120750786"></p><h3 id="导入-jar-包"><a href="#导入-jar-包" class="headerlink" title="导入 jar 包"></a>导入 jar 包</h3><center class = "half"><img src = "https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206121029.png" width = "264" /><img src = "https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206121157.png" width = "664" /></center><h3 id="生成序列化版本号"><a href="#生成序列化版本号" class="headerlink" title="生成序列化版本号"></a>生成序列化版本号</h3><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206121612.png" alt="image-20210206121610845"></p><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ol><li>创建内容：Alt + Ins</li><li>main() ：psvm</li><li>复制行：Ctrl + D</li><li>删除行：Ctrl + Y</li><li>代码上/下 移动：Ctrl + Shift + Up/Dn</li><li>收缩类：Ctrl + N</li><li>生成代码：Alt + Ins (如构造器, hashcode)</li><li>百能快捷键：Alt + Enter （导包，生成变量等）</li><li>单行注释或者多行注释：Ctrl + / 、Ctrl + Shift + /</li><li>重命名：Shift + F6</li><li>for循环：fori</li><li>代码块包围：Ctrl + Alt + T</li><li>自动补全提示：Alt + /<br><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206124238.png" alt="image-20210206124236220"></li><li>代码一层层调用：<br>点进源码：Ctrl + 鼠标悬浮 + 点进去</li><li>左右回退：<br><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210206124647.png" alt="image-20210206124646882"></li><li>显示代码结构：Alt + 7</li><li>显示导航：Alt + 1</li></ol><h1 id="Clion"><a href="#Clion" class="headerlink" title="Clion"></a>Clion</h1><h2 id="运行多个-main-函数"><a href="#运行多个-main-函数" class="headerlink" title="运行多个 main() 函数"></a>运行多个 main() 函数</h2><blockquote><p>将 <strong>CMakeLists.txt</strong> 文件写成如下</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">file (GLOB_RECURSE files *.cpp)</span><br><span class="line">foreach (file $&#123;files&#125;)</span><br><span class="line">    string(REGEX REPLACE &quot;.+/(.+)/(.+)\\..*&quot; &quot;\\1-\\2&quot; exe $&#123;file&#125;)</span><br><span class="line">    add_executable ($&#123;exe&#125; $&#123;file&#125;)</span><br><span class="line">endforeach ()</span><br></pre></td></tr></table></figure><p>EX：</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/image-20210311173629566.png" alt="image-20210311173629566"></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记录 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识汇编</title>
      <link href="2021/02/18/%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96/"/>
      <url>2021/02/18/%E5%88%9D%E8%AF%86%E6%B1%87%E7%BC%96/</url>
      
        <content type="html"><![CDATA[<h1 id="初识汇编"><a href="#初识汇编" class="headerlink" title="初识汇编"></a>初识汇编</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>语言</p><p>进制</p><p>进制如何运算</p><p>二进制（量子计算）</p><p>数据宽度</p><p>有符号数和无符号数</p><p>原码反码补码</p><p>位运算</p><p>位运算计算</p><p>汇编（OD）</p><p>寄存器</p><p>内存</p><p>汇编指令</p><p>内存复制</p><p>堆栈指令</p><p>汇编如何写函数</p><p>堆栈传参</p><p>堆栈平衡</p><p>外挂</p><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>什么是机器语言？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 目前主流的电子计算机</span></span><br><span class="line">状态：0 1</span><br><span class="line">加0100 0000</span><br><span class="line">减0100 1000</span><br><span class="line">乘0100 1000 0100 1000</span><br><span class="line">除0100 1000 1100 1000</span><br></pre></td></tr></table></figure><p>上述为机器语言，通过助记符 -&gt; 得到汇编语言，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加INC-编译器-&gt; 0100 0000</span><br><span class="line">减DEC 0100 1000</span><br><span class="line">乘MUL 0100 1000 0100 1000</span><br><span class="line">除DIV 0100 1000 1100 1000</span><br></pre></td></tr></table></figure><p>汇编只是用于助记机器语言</p><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><blockquote><p>测试</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 一进制 1 - 20</span></span><br><span class="line">1</span><br><span class="line">1 1</span><br><span class="line">1 1 1</span><br><span class="line">1 1 1 1</span><br><span class="line">.........</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 三进制</span></span><br><span class="line">012</span><br><span class="line">101112</span><br><span class="line">202122</span><br><span class="line">100101102</span><br><span class="line">110111112</span><br><span class="line">120121122</span><br><span class="line">200201202</span><br><span class="line">210211212</span><br><span class="line">220221222</span><br><span class="line">100010011002</span><br><span class="line">101010111012</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 七进制</span></span><br><span class="line">0123456</span><br><span class="line">10111213141516</span><br><span class="line">20212223242526</span><br><span class="line">3031...</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>加密解密：进制的加密</p><p>数字量一大，总有规律</p><blockquote><p>进制的运算</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 八进制计算</span></span><br><span class="line">2 + 3 = 5</span><br><span class="line">2 * 3 = 6</span><br><span class="line">4 + 5 = 11</span><br><span class="line">4 * 5 = 24</span><br><span class="line"></span><br><span class="line">277 + 333 = 632</span><br><span class="line">276 * 54 = 20250</span><br><span class="line">273 - 54 = 217</span><br><span class="line">234 / 4 = 47</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结论：无论什么进制，本事都有一套完美的运算体系，都可以通过列表的方式计算出来</p><blockquote><p>二进制</p></blockquote><p>计算机使用二进制 0 1 转态！ 电子！ </p><p>物理极限：摩尔定理！追求语言的极限！并发语言！软操作！</p><p><strong>量子计算机</strong>：一旦民用，目前的安全系统不再有用，爆破几分钟的事</p><p>可以实现量子计算的机器</p><p>传统计算机：集成电路：0 1     硅晶片</p><p>量子计算机的单位：昆比特</p><p>光子：正交偏振方向</p><p>磁场：电子的自旋方向</p><p>21世纪    计算力    快到尽头了</p><p>量子计算机    -&gt;    提高计算机的计算力</p><p>量子比特，量子叠加态，量子纠缠，量子并行原理</p><p>为什么要学习理解二进制？</p><p>寄存器、内存、位！底层的每一个位都是有含义的。</p><p>汇编高级：了解程序深层！操作系统的内核</p><h2 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h2><p> C C++ Java 都需要定义数据的类型。计算机底层需要我们给这些数据定义宽度</p><p>位    0 1<br>字节    0 - 0XFF<br>字    0 - 0XFFFF<br>双字    0 - 0XFFFFFFFF</p><h2 id="有符号数和无符号数"><a href="#有符号数和无符号数" class="headerlink" title="有符号数和无符号数"></a>有符号数和无符号数</h2><p>数据都是有宽度的，每个数据代表什么意思？</p><p>规则</p><p><strong>二进制解码增加一个规则</strong></p><ul><li><p>无符号数规则</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1001 1010十六进制：0x9A十进制：154</span><br></pre></td></tr></table></figure></li><li><p>有符号数规则</p><p>  最高位是符号位：1（负数）0（正数）</p></li></ul><h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><p><strong>编码规则</strong> ：有符号位的编码规则</p><ul><li>原码：最高位是符号位</li><li>反码：<ul><li>正数：反码和原码相同</li><li>负数：符号位一定是1，其余对原码取反</li></ul></li><li>补码：<ul><li>正数：补码和原码相同</li><li>负数：符号位一定是1，反码 +1</li></ul></li></ul><blockquote><p>例子</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果是正数，都是一样的</span></span><br><span class="line">1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码0000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码0000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码0000 0001</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果是负数</span></span><br><span class="line">-1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码1000 0001</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码1111 1110</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码1111 1111</span></span><br><span class="line">-7</span><br><span class="line"><span class="meta">#</span><span class="bash"> 原码1000 0111</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 反码1111 1000</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 补码1111 1001</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个二进制数，需要了解它是有符号数还是无符号数</p><p>如一个 32 位机器</p><p>FFFF FFFF</p><ul><li>有符号表示 -1</li><li>无符号表示 4,294,967,295</li></ul><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>2 * 8 最高效的计算方式   -&gt;  2&lt;&lt;3</p><p>很多调试器，需要通过位来判断 CPU 状态</p><ol><li><p>与运算（and &amp;）串行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">1001 0000</span><br></pre></td></tr></table></figure></li><li><p>或运算（or |）并行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">1111 1001</span><br></pre></td></tr></table></figure></li><li><p>异或运算（xor ^）不同为1</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1011 0001</span><br><span class="line">1101 1000</span><br><span class="line">0110 1001</span><br></pre></td></tr></table></figure></li><li><p>非运算（单目运算符 not ~）</p><p> 0 就是 1，1 就是 0</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1101 1000</span><br><span class="line">0010 0111</span><br></pre></td></tr></table></figure></li><li><p>位运算（移动位，左移 * 2，右移 / 2）</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0000 00011</span><br><span class="line">0000 00102</span><br><span class="line">0000 01004</span><br><span class="line">0000 10008</span><br></pre></td></tr></table></figure><p> 左移：shl    &lt;&lt;</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 # 所以二进制位全部左移若干位，高位丢弃，低位补0</span><br></pre></td></tr></table></figure><p> 右移：shr    &gt;&gt;</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0001 # 所以二进制位全部左移若干位，低位丢弃，高位补补0或1（正数补0，负数补1）</span><br></pre></td></tr></table></figure></li></ol><h2 id="位运算的加减乘除"><a href="#位运算的加减乘除" class="headerlink" title="位运算的加减乘除"></a>位运算的加减乘除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 计算机怎么操作 4 + 5？</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">----------计算机不会直接加</span><br><span class="line">0000 1001</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面是计算机怎么计算的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第一步， 异或：如果没有进位，异或直接就可以出结果</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">---------</span><br><span class="line">0000 0001</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第二步：与运算（判断进位，如果与运算结果为0，则没有进位）</span></span><br><span class="line">0000 0100</span><br><span class="line">0000 0101</span><br><span class="line">---------</span><br><span class="line">0000 0100</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第三步，将与运算的结果，左移一位</span></span><br><span class="line">0000 1000</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第四步：异或</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">---------</span><br><span class="line">0000 1001</span><br><span class="line"><span class="meta">#</span><span class="bash"> 第五步：与运算（判断进位，如果与运算结果为0，没有进位）</span></span><br><span class="line">0000 0001</span><br><span class="line">0000 1000</span><br><span class="line">---------</span><br><span class="line">0000 0000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所以最终结果就是与运算为0的上一个异或运算的值</span></span><br></pre></td></tr></table></figure><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器：</p><p>存储数据：CPU -&gt; 内存 -&gt; 硬盘</p><p>32位 CPU：8    16    32</p><p>64位 CPU：8    16    32    64</p><p><strong>通用寄存器</strong></p><p>32位的通用寄存器只有 8 个</p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210209165542.png" alt="image-20210209165541692"></p><p>存值的范围    0 - FFFFFFFF</p><p>对于二进制来说，直接修改值</p><p><strong>计算机如果像寄存器存值</strong></p><p><strong>mov 指令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov 存的地址,存的数</span><br><span class="line">mov 存的地址1,存的地址1</span><br></pre></td></tr></table></figure><p>可以将数字写入寄存器，可以将寄存器中的值写到寄存器</p><p><strong>不同的寄存器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">32位16位8位</span><br><span class="line">EAX AX AL</span><br><span class="line">ECX CX CL</span><br><span class="line">EDX DX DL</span><br><span class="line">EBX BX BL</span><br><span class="line">ESP SP AH</span><br><span class="line">EBP BP CH</span><br><span class="line">ESI SI DH</span><br><span class="line">EDI DI BH</span><br></pre></td></tr></table></figure><p>8位：L低8位，H高8位</p><p>除了这些通用寄存器之外，那么其他的寄存器都有自己特定的功能！</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>寄存器很小，不够用，所以把数据放到内存中</p><p>每个应用程序都有4GB的内存空间，空头支票</p><p>程序真正运行的时候，才会用到物理内存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1B = 8bit</span><br><span class="line">1kb = 1024B</span><br><span class="line">1MB = 1024KB</span><br><span class="line">1GB = 1024MB</span><br><span class="line">4GB = 4096M = 4096 * 1024 * 1024B = 2^(12+10+10) = 2^32</span><br></pre></td></tr></table></figure><p><strong>内存地址</strong></p><p>存一个数：占用的大小，数据宽度！存到哪里？</p><p>计算机中内存地址很多，空间很大，每个空间分配一个地址，名字</p><p>如32位系统：0x00000000 - 0xFFFFFFFF</p><p>32位：寻址能力！4GB</p><p>FFFFFFFF + 1 = 100000000，最大的值</p><p>位是怎么限制内存大小的</p><p>100000000 内存地址 * 8 = 位：800000000</p><p>转换为10进制 /8 ：4,294,967,296字节</p><p>按照规则 /1024 ，最终即为 4GB</p><p><strong>内存如何存值</strong></p><p>数据宽度：    byte    word    dwrod</p><p>不是任意的地址都可以写东西，申请使用的。只有程序申请过的内存才可以使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 汇编如何向内存中写值</span></span><br><span class="line">mov 数据宽度 内存地址,值</span><br><span class="line">mov byte/word/dword/qword,-1</span><br><span class="line"></span><br><span class="line">eg:mov byte ptr ds:[0xFFFFFFFF],1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 传递的值的大小一定要和数据宽度相等</span></span><br></pre></td></tr></table></figure><p><strong>内存有多种写法</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds:[0x0090FFFF+4]内存地址偏移</span><br><span class="line">ds:[eax]寄存器</span><br><span class="line">ds:[eax+4]寄存器偏移</span><br><span class="line"><span class="meta">#</span><span class="bash"> 数组[]</span></span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;]数组</span><br><span class="line">ds:[reg+reg*&#123;1,2,4,8&#125;+4]数组偏移</span><br></pre></td></tr></table></figure><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210511213009.png" alt="image-20210511213009527"></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210511213725.png" alt="image-20210511213717044"></p>]]></content>
      
      
      <categories>
          
          <category> C </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汇编 </tag>
            
            <tag> 底层 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git-个人记录</title>
      <link href="2021/02/18/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95%EF%BC%89/"/>
      <url>2021/02/18/Git%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%AA%E4%BA%BA%E8%AE%B0%E5%BD%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Git-常用命令"><a href="#Git-常用命令" class="headerlink" title="Git 常用命令"></a>Git 常用命令</h1><p>level intro4</p><p>level rampup3</p><p>level mixed1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch &lt;branch_name&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout &lt;branch_name&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b &lt;branch_name&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge &lt;branch_name&gt;<span class="comment"># 把 branch_name 分支合并到当前所处分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase &lt;branch_name&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout &lt;has&gt;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git ./git/HEAD <span class="comment"># 查看 HEAD 指向</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git symbolic-ref HEAD<span class="comment"># 查看 HEAD 指向</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -f main HEAD~3 <span class="comment"># 将 main 分支强制指向 HEAD 的第 3 级父提交</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git reset HEAD^<span class="comment"># 本地分支撤回</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git revert HEAD <span class="comment"># 远程分支撤回</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick &lt;name&gt; [&lt;name&gt; ...]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git rebase -i HEAD^</span></span><br></pre></td></tr></table></figure><h1 id="Git-使用"><a href="#Git-使用" class="headerlink" title="Git 使用"></a><strong>Git</strong> 使用</h1><blockquote><h3 id="Git是目前世界上最先进的分布式版本控制系统。"><a href="#Git是目前世界上最先进的分布式版本控制系统。" class="headerlink" title="Git是目前世界上最先进的分布式版本控制系统。"></a><strong>Git是目前世界上最先进的分布式版本控制系统。</strong></h3></blockquote><hr><h2 id="一、安装方面"><a href="#一、安装方面" class="headerlink" title="一、安装方面"></a>一、安装方面</h2><ol><li><p>安装 git </p><p>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p><p>淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a> </p></li></ol><p>  <strong>Git Bash：</strong>Unix与Linux风格的命令行，使用最多，推荐最多</p><p>  <strong>Git CMD：</strong>Windows风格的命令行</p><p>  <strong>Git GUI</strong>：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><blockquote><p><strong>基本 Linux 命令</strong></p></blockquote><ul><li><p>cd ：改变目录。</p></li><li><p>cd . . 回退到上一个目录，直接 cd 进入默认目录</p></li><li><p>pwd : 显示当前所在的目录路径。</p></li><li><p>ls(ll):  都是列出当前目录中的所有文件, ll更为详细。</p></li><li><p>touch :文件</p></li><li><p>vi ：新建文件并编辑</p></li><li><p>rm:  删除文件</p></li><li><p>mkdir:  新建文件夹。</p></li><li><p>rm -r :  删除文件夹</p></li><li><p>mv 移动文件/ 文件重命名，必须保证文件和目标文件夹在同一目录下。</p></li><li><p>reset：重新初始化终端/清屏。</p></li><li><p>clear：清屏。</p></li><li><p>history：查看命令历史。</p></li><li><p>help：帮助。</p></li><li><p>exit：退出。</p></li><li><p>#：表示注释</p></li></ul><ol start="2"><li><p><strong>Git</strong> 配置</p><p>查看配置：<strong>git config -l</strong></p><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210208163207.png" alt="image-20210208163206086"></p><p>查看不同级别的配置文件：</p></li></ol><ul><li>系统 config ：<strong>git config –system –list</strong></li><li>用户 <strong>global</strong> ：<strong>git config –global –list</strong></li></ul><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210208163639.png"></p><pre><code>  git 相关配置文件：    - Git\etc\gitconfig ：Git 安装目录下的 gitconfig            –system 系统级别  - C:\Users\用户名\.gotconfig ：只适用于当前登录用户的配置     –global 全局</code></pre><ol start="4"><li><p><strong>设置用户名与邮箱</strong></p><ul><li>法一单独配置：引号要不要都可以 如：<br>  git config –global user.name “MingHuifan”<br>  git config –global user.email “<a href="mailto:&#120;&#120;&#120;&#120;&#120;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;">&#120;&#120;&#120;&#120;&#120;&#x40;&#113;&#x71;&#x2e;&#x63;&#x6f;&#x6d;</a>“</li><li>法二文件写：<br>  git config –global –edit  会进入.gitconfig文件编辑，把name和email写进去 :wq 退出并保存<br>  <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210208165404.png" alt="image-20210208165359679"></li></ul></li><li><p>生成 <strong>SSH</strong> 公钥</p><p> 设置本机绑定 SSH 公钥，实现免密登录</p><p> 在 <strong>C:\Users\用户名\ .ssh 目录</strong></p><p> 如果没有则用：<strong>ssh -keygen</strong> 生成，一路回车即可</p><p> 然后进去 <strong>C:\Users\用户名\ .ssh</strong> 目录 有一个 <strong>.pub</strong> 后缀的文件，这是公钥</p></li><li><p>在 <strong>gitee</strong> 设置公钥，github 一样</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210208175338.png" alt="image-20210208175337489"></p></li></ol><blockquote><p><strong>然后就是如何使用 git push 到 github 或者 gitee 上了</strong></p></blockquote><h2 id="二、操作方面"><a href="#二、操作方面" class="headerlink" title="二、操作方面"></a>二、操作方面</h2><p><img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210208223330.png" alt="image-20210208223324255"></p><hr><p>前序工作已经完成，接下来是如何操作</p><ol><li><p>在 <strong>github</strong> 上创建一个仓库（<strong>Repository</strong>）</p><p> <img src= "/img/loading2.gif" data-lazy-src="https://ming-blog.oss-cn-shenzhen.aliyuncs.com/image/blog_img/20210208175930.png" alt="image-20210208175929149"></p></li><li><p>然后克隆到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> URL</span></span><br></pre></td></tr></table></figure></li><li><p>然后下载到你的本地仓库</p><ul><li><p>右键选择 <strong>git Bash Here</strong>  —&gt;  <strong>git clone + [url]</strong> </p><p>  然后就会有一个 <strong>.git</strong> 的目录</p></li><li><p>可以下载到你的项目路径中，然后就可以用命令操作了</p></li><li><p>或者复制到其他的路径中，**.git**文件绑定了你的远程仓库，所以只要复制到任何地方都可以</p><ul><li>考虑一种情况：我从远程仓库下载并保存在 E:\A\ 目录下那么 A 目录下就有 .git （该文件绑定了一个远程仓库），我就可以操作本地仓库 A ，然后我在把 .git 文件复制到 E:\B\ 目录下，那么我是不是可以将两个的文件叠加的上床到远程仓库中<br>  其实并不能，并且两个路径不可以同时使用 <strong>git</strong> ，只能使用一个文件路径下的 <strong>git</strong></li></ul></li></ul></li><li><p>几个命令</p><ul><li>git add .</li><li>git commit -m 说明</li><li>git push</li><li>git pull</li><li>git rm -r –cached filePath : 清除缓存-指定路径</li><li>git rm -r –cached . ：清除缓存-清除全部缓存</li><li>git clone</li><li>git remote add origin SSH地址：链接远程仓库地址</li><li>git remote remove origin：移除远程仓库地址</li><li>git remove -v：查看远程仓库地址</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="1970/01/01/Linux%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/"/>
      <url>1970/01/01/Linux%E5%AE%89%E8%A3%85%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<hr><hr><hr><h1 id="安装中文手册"><a href="#安装中文手册" class="headerlink" title="安装中文手册"></a>安装中文手册</h1><ol><li><p>先下载中文手册包</p><p><a href="https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/">https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/</a></p><p>或者直接用该链接下载：<a href="https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/manpages-zh-1.5.2.tar.bz2/cab232c7bb49b214c2f7ee44f7f35900/manpages-zh-1.5.2.tar.bz2">https://src.fedoraproject.org/repo/pkgs/man-pages-zh-CN/manpages-zh-1.5.2.tar.bz2/cab232c7bb49b214c2f7ee44f7f35900/manpages-zh-1.5.2.tar.bz2</a></p></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tar -jxvf manpages-zh-1.5.2.tar.bz2</span></span><br></pre></td></tr></table></figure></li><li><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> manpages-zh-1.5.2</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./configure --disable-zhtw</span></span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="1970/01/01/nvim/"/>
      <url>1970/01/01/nvim/</url>
      
        <content type="html"><![CDATA[<hr><hr><hr><h1 id="init-vim"><a href="#init-vim" class="headerlink" title="init.vim"></a>init.vim</h1><h1 id="basic-vim"><a href="#basic-vim" class="headerlink" title="basic.vim"></a>basic.vim</h1><h1 id="map-vim"><a href="#map-vim" class="headerlink" title="map.vim"></a>map.vim</h1><h1 id="Packer"><a href="#Packer" class="headerlink" title="Packer"></a>Packer</h1><p><code>/home/minghui/.local/share/nvim/lsp_servers/</code></p><p><code>/home/minghui/.local/share/nvim/site/pack/packer/start/</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面状态条</span></span><br><span class="line">&quot;vim-airline/vim-airline&quot;</span><br><span class="line">&quot;vim-airline/vim-airline-themes&quot;</span><br><span class="line">&quot;ryanoasis/vim-devicons&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 主题</span></span><br><span class="line">&quot;sainnhe/gruvbox-material&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ranger</span></span><br><span class="line">&quot;kevinhwang91/rnvimr&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> xda</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 代码提示</span></span><br><span class="line">--Nvim LSP 客户端的快速入门配置</span><br><span class="line">use &quot;neovim/nvim-lspconfig&quot;</span><br><span class="line">use &#123;</span><br><span class="line">&quot;hrsh7th/nvim-cmp&quot;,</span><br><span class="line">    requires = &#123;</span><br><span class="line">        &quot;hrsh7th/cmp-nvim-lsp&quot;, --neovim 内置 LSP 客户端的 nvim-cmp 源</span><br><span class="line">        --以下插件可选，可以根据个人喜好删减</span><br><span class="line">        &quot;onsails/lspkind-nvim&quot;, --美化自动完成提示信息</span><br><span class="line">        &quot;hrsh7th/cmp-buffer&quot;, --从buffer中智能提示</span><br><span class="line">        &quot;hrsh7th/cmp-nvim-lua&quot;, --nvim-cmp source for neovim Lua API.</span><br><span class="line">        &quot;octaltree/cmp-look&quot;, --用于完成英语单词</span><br><span class="line">        &quot;hrsh7th/cmp-path&quot;, --自动提示硬盘上的文件</span><br><span class="line">        &quot;hrsh7th/cmp-calc&quot;, --输入数学算式（如1+1=）自动计算</span><br><span class="line">        &quot;f3fora/cmp-spell&quot;, --nvim-cmp 的拼写源基于 vim 的拼写建议</span><br><span class="line">        &quot;hrsh7th/cmp-emoji&quot;, --输入: 可以显示表情</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-- 代码段提示</span><br><span class="line">use &#123;</span><br><span class="line">    &quot;L3MON4D3/LuaSnip&quot;,</span><br><span class="line">    requires = &#123;</span><br><span class="line">        &quot;saadparwaiz1/cmp_luasnip&quot;, -- Snippets source for nvim-cmp</span><br><span class="line">        &quot;rafamadriz/friendly-snippets&quot; --代码段合集</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
